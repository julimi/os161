cscope 15 $HOME/cs350-os161/os161-1.99               0001404570
	@build/install/hostinclude/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@build/install/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@build/install/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@build/install/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@build/install/include/fcntl.h

31 
	~<uni°d.h
>

	@build/install/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@build/install/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@build/install/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@build/install/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@build/install/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@build/install/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@build/install/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

54 
	#__NAME_MAX
 255

	)

57 
	#__PATH_MAX
 1024

	)

60 
	#__ARG_MAX
 (64 * 1024)

	)

68 
	#__PID_MIN
 2

	)

71 
	#__PID_MAX
 32767

	)

74 
	#__PIPE_BUF
 512

	)

85 
	#__NGROUPS_MAX
 32

	)

88 
	#__LOGIN_NAME_MAX
 17

	)

99 
	#__OPEN_MAX
 128

	)

102 
	#__IOV_MAX
 1024

	)

	@build/install/include/kern/mips/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@build/install/include/kern/mips/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@build/install/include/kern/mips/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@build/install/include/kern/mips/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@build/install/include/kern/mips/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@build/install/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@build/install/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@build/install/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@build/install/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@build/install/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@build/install/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@build/install/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@build/install/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@build/install/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@build/install/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@build/install/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@build/install/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@build/install/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@build/install/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@build/install/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@build/install/include/signal.h

30 
	~<kîn/sig«l.h
>

	@build/install/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@build/install/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@build/install/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@build/install/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@build/install/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@build/install/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@build/install/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@build/install/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@build/install/include/sys/reboot.h

31 
	~<uni°d.h
>

	@build/install/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@build/install/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@build/install/include/sys/wait.h

31 
	~<uni°d.h
>

	@build/install/include/time.h

31 
	~<uni°d.h
>

	@build/install/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@build/install/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@common/gcc-millicode/adddi3.c

38 
	~"l⁄gl⁄g.h
"

47 
	$__adddi3
(
a
, 
b
)

49 
uu
 
Ø
, 
bb
, 
sum
;

51 
Ø
.
Œ
 = 
a
;

52 
bb
.
Œ
 = 
b
;

53 
sum
.
ui
[
L
] = 
Ø
.ui[L] + 
bb
.ui[L];

54 
sum
.
ui
[
H
] = 
Ø
.ui[H] + 
bb
.ui[H] + (sum.ui[
L
] < bb.ui[L]);

55  (
sum
.
Œ
);

56 
	}
}

	@common/gcc-millicode/anddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__™ddi3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] &
bb
.ui[0];

51 
Ø
.
ui
[1] &
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/gcc-millicode/ashldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ashldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@common/gcc-millicode/ashrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__ashrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
s
;

62 
s
 = (
Ø
.
si
[
H
] >> (
INT_BITS
 - 1)) >> 1;

64 
Ø
.
ui
[
L
] =áa.
si
[
H
] >> (
shi·
 - 
INT_BITS
);

65 
Ø
.
ui
[
H
] = 
s
;

67 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

68 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

70 
Ø
.
si
[
H
] >>
shi·
;

72  (
Ø
.
Œ
);

73 
	}
}

	@common/gcc-millicode/cmpdi2.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__cmpdi2
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52  (
Ø
.
si
[
H
] < 
bb
.si[H] ? 0 :áa.si[H] > bb.si[H] ? 2 :

53 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

54 
	}
}

	@common/gcc-millicode/divdi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__divdi3
(
a
, 
b
)

47 
ua
, 
ub
, 
uq
;

48 
√g
 = 0;

50 
ua
 = 
a
;

51 
ub
 = 
b
;

53 i‡(
a
 < 0)

54 
ua
 = -ua, 
√g
 ^= 1;

55 i‡(
b
 < 0)

56 
ub
 = -ub, 
√g
 ^= 1;

58 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, 
NULL
);

59 i‡(
√g
)

60 
uq
 = - uq;

61  
uq
;

62 
	}
}

	@common/gcc-millicode/iordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__i‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] |
bb
.ui[0];

51 
Ø
.
ui
[1] |
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/gcc-millicode/longlong.h

56 #i‡
deföed
(
_KERNEL
)

57 
	~<ty≥s.h
>

58 
	~<ídün.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/ídün.h
>

64 
	~<limôs.h
>

70 
	uuu
 {

71 
	mŒ
;

72 
	muŒ
;

73 
	msi
[2];

74 
	mui
[2];

80 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


81 
	#H
 1

	)

82 
	#L
 0

	)

85 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


86 
	#H
 0

	)

87 
	#L
 1

	)

96 
	#LONGLONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

97 
	#INT_BITS
 ((Ë* 
CHAR_BIT
)

	)

98 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

110 
	#HHALF
(
x
Ë(()(xË>> 
HALF_BITS
)

	)

111 
	#LHALF
(
x
Ë(()(xË& ((()1 << 
HALF_BITS
Ë- 1))

	)

112 
	#LHUP
(
x
Ë(()(xË<< 
HALF_BITS
)

	)

114 
__adddi3
 ( , );

115 
__™ddi3
 ( , );

116 
__ashldi3
 ( , );

117 
__ashrdi3
 ( , );

118 
__cmpdi2
 ( , );

119 
__divdi3
 ( , );

120 
__i‹di3
 ( , );

121 
__lshldi3
 ( , );

122 
__lshrdi3
 ( , );

123 
__moddi3
 ( , );

124 
__muldi3
 ( , );

125 
__√gdi2
 ( );

126 
__⁄e_cm∂di2
 ( );

127 
__subdi3
 ( , );

128 
__ucmpdi2
 (, );

129 
__udivdi3
 (, );

130 
__umoddi3
 (, );

131 
__x‹di3
 ( , );

133 #i‚de‡
_KERNEL


134 
__fixdfdi
 ();

135 
__fixsfdi
 ();

136 
__fixunsdfdi
 ();

137 
__fixunssfdi
 ();

138 
__Êﬂtdidf
 ();

139 
__Êﬂtdisf
 ();

140 
__Êﬂtunsdidf
();

143 
__qdivªm
 (, ,

	@common/gcc-millicode/lshldi3.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__lshldi3
(
a
, 
shi·
)

47 
uu
 
Ø
;

49 i‡(
shi·
 == 0)

50 (
a
);

51 
Ø
.
Œ
 = 
a
;

52 i‡(
shi·
 >
INT_BITS
) {

53 
Ø
.
ui
[
H
] =áa.ui[
L
] << (
shi·
 - 
INT_BITS
);

54 
Ø
.
ui
[
L
] = 0;

56 
Ø
.
ui
[
H
] = (Ø.ui[H] << 
shi·
) |

57 (
Ø
.
ui
[
L
] >> (
INT_BITS
 - 
shi·
));

58 
Ø
.
ui
[
L
] <<
shi·
;

60  (
Ø
.
Œ
);

61 
	}
}

	@common/gcc-millicode/lshrdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__lshrdi3
(
a
, 
shi·
)

46 
uu
 
Ø
;

48 i‡(
shi·
 == 0)

49 (
a
);

50 
Ø
.
Œ
 = 
a
;

51 i‡(
shi·
 >
INT_BITS
) {

52 
Ø
.
ui
[
L
] =áa.ui[
H
] >> (
shi·
 - 
INT_BITS
);

53 
Ø
.
ui
[
H
] = 0;

55 
Ø
.
ui
[
L
] = (Ø.ui[L] >> 
shi·
) |

56 (
Ø
.
ui
[
H
] << (
INT_BITS
 - 
shi·
));

57 
Ø
.
ui
[
H
] >>
shi·
;

59  (
Ø
.
Œ
);

60 
	}
}

	@common/gcc-millicode/moddi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__moddi3
(
a
, 
b
)

48 
ua
, 
ub
, 
ur
;

49 
√g
 = 0;

51 
ua
 = 
a
;

52 
ub
 = 
b
;

54 i‡(
a
 < 0)

55 
ua
 = -ua, 
√g
 ^= 1;

56 i‡(
b
 < 0)

57 
ub
 = -ub;

58 ()
	`__qdivªm
(
ua
, 
ub
, &
ur
);

59 i‡(
√g
)

60 
ur
 = -ur;

61  (
ur
);

62 
	}
}

	@common/gcc-millicode/muldi3.c

38 
	~"l⁄gl⁄g.h
"

97 
__lmulq
(, );

100 
	$__muldi3
(
a
, 
b
)

102 
uu
 
u
, 
v
, 
low
, 
¥od
;

103 
high
, 
mid
, 
udiff
, 
vdiff
;

104 
√gÆl
, 
√gmid
;

105 
	#u1
 
u
.
ui
[
H
]

	)

106 
	#u0
 
u
.
ui
[
L
]

	)

107 
	#v1
 
v
.
ui
[
H
]

	)

108 
	#v0
 
v
.
ui
[
L
]

	)

115 i‡(
a
 >= 0)

116 
u
.
Œ
 = 
a
, 
√gÆl
 = 0;

118 
u
.
Œ
 = -
a
, 
√gÆl
 = 1;

119 i‡(
b
 >= 0)

120 
v
.
Œ
 = 
b
;

122 
v
.
Œ
 = -
b
, 
√gÆl
 ^= 1;

124 i‡(
u1
 =0 && 
v1
 == 0) {

130 
¥od
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

138 
low
.
Œ
 = 
	`__lmulq
(
u0
, 
v0
);

140 i‡(
u1
 >
u0
)

141 
√gmid
 = 0, 
udiff
 = 
u1
 - 
u0
;

143 
√gmid
 = 1, 
udiff
 = 
u0
 - 
u1
;

144 i‡(
v0
 >
v1
)

145 
vdiff
 = 
v0
 - 
v1
;

147 
vdiff
 = 
v1
 - 
v0
, 
√gmid
 ^= 1;

148 
mid
 = 
udiff
 * 
vdiff
;

150 
high
 = 
u1
 * 
v1
;

155 
¥od
.
ui
[
H
] = 
high
 + (
√gmid
 ? -
mid
 : midË+ 
low
.ui[
L
] +

156 
low
.
ui
[
H
];

157 
¥od
.
ui
[
L
] = 
low
.ui[L];

159  (
√gÆl
 ? -
¥od
.
Œ
 :Örod.ll);

160 #unde‡
u1


161 #unde‡
u0


162 #unde‡
v1


163 #unde‡
v0


164 
	}
}

184 
	$__lmulq
(
u
, 
v
)

186 
u1
, 
u0
, 
v1
, 
v0
, 
udiff
, 
vdiff
, 
high
, 
mid
, 
low
;

187 
¥odh
, 
¥odl
, 
was
;

188 
uu
 
¥od
;

189 
√g
;

191 
u1
 = 
	`HHALF
(
u
);

192 
u0
 = 
	`LHALF
(
u
);

193 
v1
 = 
	`HHALF
(
v
);

194 
v0
 = 
	`LHALF
(
v
);

196 
low
 = 
u0
 * 
v0
;

199 i‡(
u1
 =0 && 
v1
 == 0)

200  (
low
);

202 i‡(
u1
 >
u0
)

203 
udiff
 = 
u1
 - 
u0
, 
√g
 = 0;

205 
udiff
 = 
u0
 - 
u1
, 
√g
 = 1;

206 i‡(
v0
 >
v1
)

207 
vdiff
 = 
v0
 - 
v1
;

209 
vdiff
 = 
v1
 - 
v0
, 
√g
 ^= 1;

210 
mid
 = 
udiff
 * 
vdiff
;

212 
high
 = 
u1
 * 
v1
;

215 
¥odh
 = 
high
 + 
	`HHALF
(high);

216 
¥odl
 = 
	`LHUP
(
high
);

219 i‡(
√g
) {

220 
was
 = 
¥odl
;

221 
¥odl
 -
	`LHUP
(
mid
);

222 
¥odh
 -
	`HHALF
(
mid
Ë+ (
¥odl
 > 
was
);

224 
was
 = 
¥odl
;

225 
¥odl
 +
	`LHUP
(
mid
);

226 
¥odh
 +
	`HHALF
(
mid
Ë+ (
¥odl
 < 
was
);

230 
was
 = 
¥odl
;

231 
¥odl
 +
	`LHUP
(
low
);

232 
¥odh
 +
	`HHALF
(
low
Ë+ (
¥odl
 < 
was
);

234 i‡((
¥odl
 +
low
) <Üow)

235 
¥odh
++;

238 
¥od
.
ui
[
H
] = 
¥odh
;

239 
¥od
.
ui
[
L
] = 
¥odl
;

240  (
¥od
.
Œ
);

241 
	}
}

	@common/gcc-millicode/negdi2.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__√gdi2
(
a
)

46 
uu
 
Ø
, 
ªs
;

48 
Ø
.
Œ
 = 
a
;

49 
ªs
.
ui
[
L
] = -
Ø
.ui[L];

50 
ªs
.
ui
[
H
] = -
Ø
.ui[H] - (ªs.ui[
L
] > 0);

51  (
ªs
.
Œ
);

52 
	}
}

	@common/gcc-millicode/notdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__⁄e_cm∂di2
(
a
)

47 
uu
 
Ø
;

49 
Ø
.
Œ
 = 
a
;

50 
Ø
.
ui
[0] = ~aa.ui[0];

51 
Ø
.
ui
[1] = ~aa.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/gcc-millicode/qdivrem.c

43 
	~"l⁄gl⁄g.h
"

45 
	#B
 (()1 << 
HALF_BITS
Ë

	)

48 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

51 #i‡
UINT_MAX
 =0xffffffffU && 
USHRT_MAX
 >= 0xffff

52 
	tdigô
;

54 
	tdigô
;

57 
shl
(
digô
 *
p
, 
Àn
, 
sh
);

68 
	$__qdivªm
(
uŒ
, 
vŒ
,

69 *
¨q
)

71 
uu
 
tmp
;

72 
digô
 *
u
, *
v
, *
q
;

73 
digô
 
v1
, 
v2
;

74 
qh©
, 
rh©
, 
t
;

75 
m
, 
n
, 
d
, 
j
, 
i
;

76 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

81 i‡(
vŒ
 == 0) {

83 vﬁ©ûêc⁄° 
zîo
 = 0;

85 
tmp
.
ui
[
H
] =Åmp.ui[
L
] = 1 / 
zîo
;

86 i‡(
¨q
)

87 *
¨q
 = 
uŒ
;

88  (
tmp
.
Œ
);

90 i‡(
uŒ
 < 
vŒ
) {

91 i‡(
¨q
)

92 *
¨q
 = 
uŒ
;

95 
u
 = &
u•a˚
[0];

96 
v
 = &
v•a˚
[0];

97 
q
 = &
q•a˚
[0];

112 
tmp
.
uŒ
 = ull;

113 
u
[0] = 0;

114 
u
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

115 
u
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

116 
u
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

117 
u
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

118 
tmp
.
uŒ
 = 
vŒ
;

119 
v
[1] = (
digô
)
	`HHALF
(
tmp
.
ui
[
H
]);

120 
v
[2] = (
digô
)
	`LHALF
(
tmp
.
ui
[
H
]);

121 
v
[3] = (
digô
)
	`HHALF
(
tmp
.
ui
[
L
]);

122 
v
[4] = (
digô
)
	`LHALF
(
tmp
.
ui
[
L
]);

123 
n
 = 4; 
v
[1] == 0; v++) {

124 i‡(--
n
 == 1) {

125 
rbj
;

126 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

136 
t
 = 
v
[2];

137 
q1
 = (
digô
)(
u
[1] / 
t
);

138 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

139 
q2
 = (
digô
)(
rbj
 / 
t
);

140 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

141 
q3
 = (
digô
)(
rbj
 / 
t
);

142 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

143 
q4
 = (
digô
)(
rbj
 / 
t
);

144 i‡(
¨q
)

145 *
¨q
 = 
rbj
 % 
t
;

146 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

147 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

148  (
tmp
.
Œ
);

157 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

158 
m
--;

159 
i
 = 4 - 
m
; --i >= 0;)

160 
q
[
i
] = 0;

161 
q
 +4 - 
m
;

169 
d
 = 0;

170 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

171 
d
++;

172 i‡(
d
 > 0) {

173 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

174 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

179 
j
 = 0;

180 
v1
 = 
v
[1];

181 
v2
 = 
v
[2];

183 
digô
 
uj0
, 
uj1
, 
uj2
;

193 
uj0
 = 
u
[
j
 + 0];

194 
uj1
 = 
u
[
j
 + 1];

195 
uj2
 = 
u
[
j
 + 2];

196 i‡(
uj0
 =
v1
) {

197 
qh©
 = 
B
;

198 
rh©
 = 
uj1
;

199 
qh©_too_big
;

201 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

202 
qh©
 = 
¬
 / 
v1
;

203 
rh©
 = 
¬
 % 
v1
;

205 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

206 
qh©_too_big
:

207 
qh©
--;

208 i‡((
rh©
 +
v1
Ë>
B
)

217 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

218 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

219 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

220 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

222 
t
 = 
u
[
j
] -Å;

223 
u
[
j
] = (
digô
)
	`LHALF
(
t
);

230 i‡(
	`HHALF
(
t
)) {

231 
qh©
--;

232 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

233 
t
 +
u
[
i
 + 
j
] + 
v
[i];

234 
u
[
i
 + 
j
] = (
digô
)
	`LHALF
(
t
);

235 
t
 = 
	`HHALF
(t);

237 
u
[
j
] = (
digô
)
	`LHALF
(u[j] + 
t
);

239 
q
[
j
] = (
digô
)
qh©
;

240 } ++
j
 <
m
);

247 i‡(
¨q
) {

248 i‡(
d
) {

249 
i
 = 
m
 + 
n
; i > m; --i)

250 
u
[
i
] = (
digô
)((()u[i] >> 
d
) |

251 
	`LHALF
(()
u
[
i
 - 1] <<

252 (
HALF_BITS
 - 
d
)));

253 
u
[
i
] = 0;

255 
tmp
.
ui
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

256 
tmp
.
ui
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

257 *
¨q
 = 
tmp
.
Œ
;

260 
tmp
.
ui
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

261 
tmp
.
ui
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

262  (
tmp
.
Œ
);

263 
	}
}

271 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

273 
i
;

275 
i
 = 0; i < 
Àn
; i++)

276 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
) |

277 (()
p
[
i
 + 1] >> (
HALF_BITS
 - 
sh
)));

278 
p
[
i
] = (
digô
)(
	`LHALF
((Ì[i] << 
sh
));

279 
	}
}

	@common/gcc-millicode/subdi3.c

38 
	~"l⁄gl⁄g.h
"

46 
	$__subdi3
(
a
, 
b
)

48 
uu
 
Ø
, 
bb
, 
diff
;

50 
Ø
.
Œ
 = 
a
;

51 
bb
.
Œ
 = 
b
;

52 
diff
.
ui
[
L
] = 
Ø
.ui[L] - 
bb
.ui[L];

53 
diff
.
ui
[
H
] = 
Ø
.ui[H] - 
bb
.ui[H] - (diff.ui[
L
] >áa.ui[L]);

54  (
diff
.
Œ
);

55 
	}
}

	@common/gcc-millicode/ucmpdi2.c

38 
	~"l⁄gl⁄g.h
"

45 
	$__ucmpdi2
(
a
, 
b
)

47 
uu
 
Ø
, 
bb
;

49 
Ø
.
uŒ
 = 
a
;

50 
bb
.
uŒ
 = 
b
;

51  (
Ø
.
ui
[
H
] < 
bb
.ui[H] ? 0 :áa.ui[H] > bb.ui[H] ? 2 :

52 
Ø
.
ui
[
L
] < 
bb
.ui[L] ? 0 :áa.ui[L] > bb.ui[L] ? 2 : 1);

53 
	}
}

	@common/gcc-millicode/udivdi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__udivdi3
(
a
, 
b
)

47  
	`__qdivªm
(
a
, 
b
, 
NULL
);

48 
	}
}

	@common/gcc-millicode/umoddi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__umoddi3
(
a
, 
b
)

46 
r
;

48 ()
	`__qdivªm
(
a
, 
b
, &
r
);

49  (
r
);

50 
	}
}

	@common/gcc-millicode/xordi3.c

38 
	~"l⁄gl⁄g.h
"

44 
	$__x‹di3
(
a
, 
b
)

46 
uu
 
Ø
, 
bb
;

48 
Ø
.
Œ
 = 
a
;

49 
bb
.
Œ
 = 
b
;

50 
Ø
.
ui
[0] ^
bb
.ui[0];

51 
Ø
.
ui
[1] ^
bb
.ui[1];

52  (
Ø
.
Œ
);

53 
	}
}

	@common/libc/printf/__printf.c

40 #ifde‡
_KERNEL


41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	#as£π
 
KASSERT


	)

46 
	~<sys/ty≥s.h
>

47 
	~<as£π.h
>

48 
	~<°döt.h
>

49 
	~<°dio.h
>

50 
	~<°rög.h
>

53 
	~<°d¨g.h
>

64 
	#USE_LONGLONG


	)

69 #ifde‡
USE_LONGLONG


70 
	#INTTYPE
 

	)

72 
	#INTTYPE
 

	)

84 
	#NUMBER_BUF_SIZE
 (((
INTTYPE
Ë* 
CHAR_BIT
Ë/ 3 + 2)

	)

91 (*
	m£ndfunc
)(*
	m˛õ¡d©a
, c⁄° *
	m°r
, 
size_t
 
	mÀn
);

92 *
	m˛õ¡d©a
;

95 
va_li°
 
	m≠
;

98 
	mch¨cou¡
;

101 
	mö_p˘
;

105 
	mINTSZ
,

106 
	mLONGSZ
,

107 #ifde‡
USE_LONGLONG


108 
	mLLONGSZ
,

110 } 
	msize
;

113 
INTTYPE
 
	mnum
;

116 
	msign
;

119 
	m•acög
;

122 
	mright•c
;

125 
	mfûlch¨
;

128 
	mba£
;

131 
	mba£¥efix
;

134 
	mÆtf‹m©
;

135 } 
	tPF
;

145 
	$__pf_¥öt
(
PF
 *
pf
, c⁄° *
txt
, 
size_t
 
Àn
)

147 
pf
->
	`£ndfunc
’f->
˛õ¡d©a
, 
txt
, 
Àn
);

148 
pf
->
ch¨cou¡
 +
Àn
;

149 
	}
}

156 
	$__pf_ídfõld
(
PF
 *
pf
)

158 
pf
->
ö_p˘
 = 0;

159 
pf
->
size
 = 
INTSZ
;

160 
pf
->
num
 = 0;

161 
pf
->
sign
 = 0;

162 
pf
->
•acög
 = 0;

163 
pf
->
right•c
 = 0;

164 
pf
->
fûlch¨
 = ' ';

165 
pf
->
ba£
 = 0;

166 
pf
->
ba£¥efix
 = 0;

167 
pf
->
Ætf‹m©
 = 0;

168 
	}
}

180 
	$__pf_modifõr
(
PF
 *
pf
, 
ch
)

182 
ch
) {

184 
pf
->
Ætf‹m©
 = 1;

187 
pf
->
right•c
 = 1;

190 i‡(
pf
->
size
==
LONGSZ
) {

191 #ifde‡
USE_LONGLONG


192 
pf
->
size
 = 
LLONGSZ
;

196 
pf
->
size
 = 
LONGSZ
;

200 i‡(
pf
->
•acög
>0) {

205 
pf
->
•acög
 =Öf->spacing*10;

211 
pf
->
fûlch¨
 = '0';

220 
	`as£π
(
ch
>'0' && ch<='9');

225 
pf
->
•acög
 =Öf->•acög*10 + (
ch
-'0');

228 
	}
}

237 
	$__pf_gënum
(
PF
 *
pf
, 
ch
)

239 i‡(
ch
=='p') {

246 
pf
->
num
 = (
uöçå_t
Ë
	`va_¨g
’f->
≠
, *);

248 i‡(
ch
=='d') {

250 
INTTYPE
 
sig√dnum
=0;

251 
pf
->
size
) {

252 
INTSZ
:

254 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

256 
LONGSZ
:

258 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

260 #ifde‡
USE_LONGLONG


261 
LLONGSZ
:

263 
sig√dnum
 = 
	`va_¨g
(
pf
->
≠
, );

271 i‡(
sig√dnum
 < 0) {

272 
pf
->
sign
 = -1;

273 
pf
->
num
 = -
sig√dnum
;

276 
pf
->
num
 = 
sig√dnum
;

281 
pf
->
size
) {

282 
INTSZ
:

284 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

286 
LONGSZ
:

288 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

290 #ifde‡
USE_LONGLONG


291 
LLONGSZ
:

293 
pf
->
num
 = 
	`va_¨g
’f->
≠
, );

298 
	}
}

312 
	$__pf_£tba£
(
PF
 *
pf
, 
ch
)

314 
ch
) {

317 
pf
->
ba£
 = 10;

321 
pf
->
ba£
 = 16;

324 
pf
->
ba£
 = 8;

327 i‡(
pf
->
Ætf‹m©
 || 
ch
=='p') {

328 
pf
->
ba£¥efix
 = 1;

330 
	}
}

337 
	$__pf_fûl
(
PF
 *
pf
, 
•c
)

339 
f
 = 
pf
->
fûlch¨
;

340 
i
;

341 
i
=0; i<
•c
; i++) {

342 
	`__pf_¥öt
(
pf
, &
f
, 1);

344 
	}
}

354 
	$__pf_¥öt°uff
(
PF
 *
pf
,

355 c⁄° *
¥efix
, c⁄° *
¥efix2
,

356 c⁄° *
°uff
)

359 
Àn
 = 
	`°æí
(
¥efix
)+°æí(
¥efix2
)+°æí(
°uff
);

362 
•c
 = 
pf
->
•acög
;

363 i‡(
•c
 > 
Àn
) {

364 
•c
 -
Àn
;

367 
•c
 = 0;

371 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
!='0') {

372 
	`__pf_fûl
(
pf
, 
•c
);

376 
	`__pf_¥öt
(
pf
, 
¥efix
, 
	`°æí
(prefix));

377 
	`__pf_¥öt
(
pf
, 
¥efix2
, 
	`°æí
(prefix2));

380 i‡(
•c
 > 0 && 
pf
->
right•c
==0 &&Öf->
fûlch¨
=='0') {

381 
	`__pf_fûl
(
pf
, 
•c
);

385 
	`__pf_¥öt
(
pf
, 
°uff
, 
	`°æí
(stuff));

388 i‡(
•c
 > 0 && 
pf
->
right•c
!=0) {

389 
	`__pf_fûl
(
pf
, 
•c
);

391 
	}
}

402 
	$__pf_¥öäum
(
PF
 *
pf
)

405 c⁄° *c⁄° 
digôs
 = "0123456789abcdef";

407 
buf
[
NUMBER_BUF_SIZE
];

408 *
x
;

409 
INTTYPE
 
xnum
;

410 c⁄° *
b¥efix
;

411 c⁄° *
•ªfix
;

414 
x
 = 
buf
+(buf)-1;

417 *
x
-- = 0;

420 
xnum
 = 
pf
->
num
;

431 *
x
 = 
digôs
[
xnum
 % 
pf
->
ba£
];

436 
x
--;

441 
xnum
 = xnum / 
pf
->
ba£
;

446 } 
xnum
 > 0);

454 
x
++;

459 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==16) {

460 
b¥efix
 = "0x";

462 i‡(
pf
->
ba£¥efix
 &&Öf->
ba£
==8) {

463 
b¥efix
 = "0";

466 
b¥efix
 = "";

472 
•ªfix
 = 
pf
->
sign
 ? "-" : "";

477 
	`__pf_¥öt°uff
(
pf
, 
•ªfix
, 
b¥efix
, 
x
);

478 
	}
}

485 
	$__pf_£nd
(
PF
 *
pf
, 
ch
)

488 
	`as£π
(
ch
!=0);

490 i‡(
pf
->
ö_p˘
==0 && 
ch
!='%') {

495 
c
 = 
ch
;

496 
	`__pf_¥öt
(
pf
, &
c
, 1);

498 i‡(
pf
->
ö_p˘
==0) {

502 
pf
->
ö_p˘
 = 1;

504 i‡(
	`°rchr
("#-l0123456789", 
ch
)) {

509 
	`__pf_modifõr
(
pf
, 
ch
);

511 i‡(
	`°rchr
("doupx", 
ch
)) {

517 
	`__pf_gënum
(
pf
, 
ch
);

518 
	`__pf_£tba£
(
pf
, 
ch
);

519 
	`__pf_¥öäum
(
pf
);

520 
	`__pf_ídfõld
(
pf
);

522 i‡(
ch
=='s') {

526 c⁄° *
°r
 = 
	`va_¨g
(
pf
->
≠
, const *);

527 i‡(
°r
==
NULL
) {

528 
°r
 = "(null)";

530 
	`__pf_¥öt°uff
(
pf
, "", "", 
°r
);

531 
	`__pf_ídfõld
(
pf
);

539 
x
[2];

540 i‡(
ch
=='c') {

541 
x
[0] = 
	`va_¨g
(
pf
->
≠
, );

544 
x
[0] = 
ch
;

546 
x
[1] = 0;

547 
	`__pf_¥öt°uff
(
pf
, "", "", 
x
);

548 
	`__pf_ídfõld
(
pf
);

550 
	}
}

558 
__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

559 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

561 
PF
 
pf
;

562 
i
;

564 
pf
.
£ndfunc
 = 
func
;

565 
pf
.
˛õ¡d©a
 = clientdata;

566 
pf
.
≠
 =áp;

567 
pf
.
ch¨cou¡
 = 0;

568 
	`__pf_ídfõld
(&
pf
);

570 
i
=0; 
f‹m©
[i]; i++) {

571 
	`__pf_£nd
(&
pf
, 
f‹m©
[
i
]);

574  
pf
.
ch¨cou¡
;

575 
	}
}

	@common/libc/printf/snprintf.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

40 
	~<°dio.h
>

44 
	~<°d¨g.h
>

61 *
	mbuf
;

62 
size_t
 
	mbuÊí
;

63 
size_t
 
	mbuÂos
;

64 } 
	tSNP
;

75 
	$__¢¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

77 
SNP
 *
¢p
 = 
myd©a
;

78 
i
;

81 
i
=0; i<
Àn
; i++) {

84 i‡(
¢p
->
buÂos
 < s≈->
buÊí
) {

87 
¢p
->
buf
[¢p->
buÂos
] = 
d©a
[
i
];

90 
¢p
->
buÂos
++;

93 
	}
}

99 
	$v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
)

101 
ch¨s
;

102 
SNP
 
¢p
;

111 
¢p
.
buf
 = buf;

112 i‡(
Àn
==0) {

113 
¢p
.
buÊí
 = 0;

116 
¢p
.
buÊí
 = 
Àn
-1;

118 
¢p
.
buÂos
 = 0;

121 
ch¨s
 = 
	`__v¥ötf
(
__¢¥ötf_£nd
, &
¢p
, 
fmt
, 
≠
);

130 i‡(
Àn
 > 0) {

131 
buf
[
¢p
.
buÂos
] = 0;

141  
ch¨s
;

142 
	}
}

148 
	$¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...)

150 
ch¨s
;

151 
va_li°
 
≠
;

152 
	`va_°¨t
(
≠
, 
fmt
);

153 
ch¨s
 = 
	`v¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
≠
);

154 
	`va_íd
(
≠
);

155  
ch¨s
;

156 
	}
}

	@common/libc/stdlib/atoi.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

50 
	$©oi
(c⁄° *
s
)

52 c⁄° 
digôs
[] = "0123456789";

53 
vÆ
=0;

54 
√g
=0;

57 *
s
==' ' || *s=='\t') {

58 
s
++;

62 i‡(*
s
=='-') {

63 
√g
=1;

64 
s
++;

66 i‡(*
s
=='+') {

67 
s
++;

71 *
s
) {

72 c⁄° *
whîe
;

73 
digô
;

76 
whîe
 = 
	`°rchr
(
digôs
, *
s
);

77 i‡(
whîe
==
NULL
) {

83 
digô
 = (
whîe
 - 
digôs
);

88 
vÆ
 = vÆ*10 + 
digô
;

91 
s
++;

95 i‡(
√g
) {

96  -
vÆ
;

100  
vÆ
;

101 
	}
}

	@common/libc/string/bzero.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$bzîo
(*
vblock
, 
size_t
 
Àn
)

51 *
block
 = 
vblock
;

52 
size_t
 
i
;

64 i‡((
uöçå_t
)
block
 % () == 0 &&

65 
Àn
 % () == 0) {

66 *
lb
 = (*)
block
;

67 
i
=0; i<
Àn
/(); i++) {

68 
lb
[
i
] = 0;

72 
i
=0; i<
Àn
; i++) {

73 
block
[
i
] = 0;

76 
	}
}

	@common/libc/string/memcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

48 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

50 
size_t
 
i
;

65 i‡((
uöçå_t
)
d°
 % () == 0 &&

66 (
uöçå_t
)
§c
 % () == 0 &&

67 
Àn
 % () == 0) {

69 *
d
 = 
d°
;

70 c⁄° *
s
 = 
§c
;

72 
i
=0; i<
Àn
/(); i++) {

73 
d
[
i
] = 
s
[i];

77 *
d
 = 
d°
;

78 c⁄° *
s
 = 
§c
;

80 
i
=0; i<
Àn
; i++) {

81 
d
[
i
] = 
s
[i];

85  
d°
;

86 
	}
}

	@common/libc/string/memmove.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°döt.h
>

40 
	~<°rög.h
>

49 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

51 
size_t
 
i
;

78 i‡((
uöçå_t
)
d°
 < (uöçå_t)
§c
) {

83  
	`mem˝y
(
d°
, 
§c
, 
Àn
);

91 i‡((
uöçå_t
)
d°
 % () == 0 &&

92 (
uöçå_t
)
§c
 % () == 0 &&

93 
Àn
 % () == 0) {

95 *
d
 = 
d°
;

96 c⁄° *
s
 = 
§c
;

103 
i
=
Àn
/(); i>0; i--) {

104 
d
[
i
-1] = 
s
[i-1];

108 *
d
 = 
d°
;

109 c⁄° *
s
 = 
§c
;

111 
i
=
Àn
; i>0; i--) {

112 
d
[
i
-1] = 
s
[i-1];

116  
d°
;

117 
	}
}

	@common/libc/string/strcat.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rˇt
(*
de°
, c⁄° *
§c
)

49 
size_t
 
off£t
;

51 
off£t
 = 
	`°æí
(
de°
);

52 
	`°r˝y
(
de°
+
off£t
, 
§c
);

53  
de°
;

54 
	}
}

	@common/libc/string/strchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°rchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 *
s
) {

55 i‡(*
s
 =
ch
) {

56  (*)
s
;

58 
s
++;

62 i‡(*
s
 =
ch
) {

63  (*)
s
;

67  
NULL
;

68 
	}
}

	@common/libc/string/strcmp.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

48 
	$°rcmp
(c⁄° *
a
, c⁄° *
b
)

50 
size_t
 
i
;

66 
i
=0; 
a
[i]!=0 &&á[i]==
b
[i]; i++) {

83 i‡(()
a
[
i
] > ()
b
[i]) {

86 i‡(
a
[
i
] =
b
[i]) {

90 
	}
}

	@common/libc/string/strcpy.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
	$°r˝y
(*
de°
, c⁄° *
§c
)

48 
size_t
 
i
;

53 
i
=0; 
§c
[i]; i++) {

54 
de°
[
i
] = 
§c
[i];

60 
de°
[
i
] = 0;

62  
de°
;

63 
	}
}

	@common/libc/string/strlen.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

46 
size_t


47 
	$°æí
(c⁄° *
°r
)

49 
size_t
 
ªt
 = 0;

51 
°r
[
ªt
]) {

52 
ªt
++;

54  
ªt
;

55 
	}
}

	@common/libc/string/strrchr.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

47 
	$°ºchr
(c⁄° *
s
, 
ch_¨g
)

50 c⁄° 
ch
 = 
ch_¨g
;

53 
size_t
 
i
 = 
	`°æí
(
s
)+1;

56 
i
 > 0) {

59 
i
--;

62 i‡(
s
[
i
] =
ch
) {

63  (*)(
s
+
i
);

68  
NULL
;

69 
	}
}

	@common/libc/string/strtok_r.c

35 #ifde‡
_KERNEL


36 
	~<ty≥s.h
>

37 
	~<lib.h
>

39 
	~<°rög.h
>

50 
	$°πok_r
(*
°rög
, c⁄° *
£ps
, **
c⁄ãxt
)

52 *
hód
;

53 *
èû
;

56 i‡(
°rög
) {

57 *
c⁄ãxt
 = 
°rög
;

61 
hód
 = *
c⁄ãxt
;

62 i‡(
hód
 =
NULL
) {

63  
NULL
;

67 *
hód
 && 
	`°rchr
(
£ps
, *head)) {

68 
hód
++;

72 i‡(*
hód
 == 0) {

74 *
c⁄ãxt
 = 
NULL
;

75  
NULL
;

79 
èû
 = 
hód
;

80 *
èû
 && !
	`°rchr
(
£ps
, *tail)) {

81 
èû
++;

85 i‡(*
èû
 == 0) {

86 *
c⁄ãxt
 = 
NULL
;

89 *
èû
 = 0;

90 
èû
++;

91 *
c⁄ãxt
 = 
èû
;

95  
hód
;

96 
	}
}

	@kern/arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

79 
thªad
 *
cuπhªad
 
asm
("$23");

80 #unde‡
__NEED_CURTHREAD


81 
	#__NEED_CURCPU


	)

84 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@kern/arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIPS_GPREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@kern/arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@kern/arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@kern/arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@kern/arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@kern/arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@kern/arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@kern/arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

44 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

45 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

49 
SPINLOCK_INLINE


51 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

53 *
sd
 = 
vÆ
;

54 
	}
}

56 
SPINLOCK_INLINE


57 
•ölock_d©a_t


58 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

60  *
sd
;

61 
	}
}

63 
SPINLOCK_INLINE


64 
•ölock_d©a_t


65 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

67 
•ölock_d©a_t
 
x
;

68 
•ölock_d©a_t
 
y
;

81 
y
 = 1;

82 
__asm
 volatile(

89 : "Ù" (
x
), "+r" (
y
Ë: "r" (
sd
));

90 i‡(
y
 == 0) {

93  
x
;

94 
	}
}

	@kern/arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@kern/arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@kern/arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_k0
;

73 
uöt32_t
 
	mtf_k1
;

74 
uöt32_t
 
	mtf_gp
;

75 
uöt32_t
 
	mtf_•
;

76 
uöt32_t
 
	mtf_s8
;

77 
uöt32_t
 
	mtf_ïc
;

83 
	#EX_IRQ
 0

	)

84 
	#EX_MOD
 1

	)

85 
	#EX_TLBL
 2

	)

86 
	#EX_TLBS
 3

	)

87 
	#EX_ADEL
 4

	)

88 
	#EX_ADES
 5

	)

89 
	#EX_IBE
 6

	)

90 
	#EX_DBE
 7

	)

91 
	#EX_SYS
 8

	)

92 
	#EX_BP
 9

	)

93 
	#EX_RI
 10

	)

94 
	#EX_CPU
 11

	)

95 
	#EX_OVF
 12

	)

101 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

106 
vaddr_t
 
˝u°acks
[];

107 
vaddr_t
 
˝uthªads
[];

	@kern/arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@kern/arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

101 
øm_boŸ°øp
();

102 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

103 
øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
);

111 
	sébshoŸdown
 {

115 
addr•a˚
 *
	mts_addr•a˚
;

116 
vaddr_t
 
	mts_vaddr
;

119 
	#TLBSHOOTDOWN_MAX
 16

	)

	@kern/arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

45 
asm_u£rmode
(
å≠‰ame
 *
tf
);

48 
mùs_å≠
(
å≠‰ame
 *
tf
);

52 
	#NTRAPCODES
 13

	)

53 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

74 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

76 
sig
 = 0;

78 
	`KASSERT
(
code
 < 
NTRAPCODES
);

79 
code
) {

80 
EX_IRQ
:

81 
EX_IBE
:

82 
EX_DBE
:

83 
EX_SYS
:

85 
	`KASSERT
(0);

86 
sig
 = 
SIGABRT
;

88 
EX_MOD
:

89 
EX_TLBL
:

90 
EX_TLBS
:

91 
sig
 = 
SIGSEGV
;

93 
EX_ADEL
:

94 
EX_ADES
:

95 
sig
 = 
SIGBUS
;

97 
EX_BP
:

98 
sig
 = 
SIGTRAP
;

100 
EX_RI
:

101 
sig
 = 
SIGILL
;

103 
EX_CPU
:

104 
sig
 = 
SIGSEGV
;

106 
EX_OVF
:

107 
sig
 = 
SIGFPE
;

115 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

116 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

117 
	`∑nic
("I don't know howÅo handleÅhis\n");

118 
	}
}

126 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

128 
uöt32_t
 
code
;

129 
boﬁ
 
isuéb
, 
iskîn
;

130 
•l
;

133 
	`KASSERT
((
å≠‰ame
)==(37*4));

138 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

139 
isuéb
 = (
tf
->
tf_ˇu£
 & 
CCA_UTLB
) != 0;

140 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

142 
	`KASSERT
(
code
 < 
NTRAPCODES
);

145 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

146 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

147 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


148 + 
STACK_SIZE
));

152 i‡(
code
 =
EX_IRQ
) {

153 
ﬁd_ö
;

154 
boﬁ
 
dﬂdju°
;

156 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

157 
cuπhªad
->
t_ö_öãºu±
 = 1;

176 i‡(
cuπhªad
->
t_cur•l
 == 0) {

177 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

178 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

179 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

180 
cuπhªad
->
t_ùlhigh_cou¡
++;

181 
dﬂdju°
 = 
åue
;

184 
dﬂdju°
 = 
Ál£
;

187 
	`maöbus_öãºu±
(
tf
);

189 i‡(
dﬂdju°
) {

190 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

191 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

192 
cuπhªad
->
t_ùlhigh_cou¡
--;

193 
cuπhªad
->
t_cur•l
 = 0;

196 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

197 
d⁄e2
;

211 
•l
 = 
	`•lhigh
();

212 
	`•lx
(
•l
);

215 i‡(
code
 =
EX_SYS
) {

217 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

218 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

220 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

221 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

223 
	`sysˇŒ
(
tf
);

224 
d⁄e
;

232 
code
) {

233 
EX_MOD
:

234 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

235 
d⁄e
;

238 
EX_TLBL
:

239 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

240 
d⁄e
;

243 
EX_TLBS
:

244 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

245 
d⁄e
;

248 
EX_IBE
:

249 
EX_DBE
:

259 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

269 i‡(!
iskîn
) {

274 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

275 
d⁄e
;

299 i‡(
cuπhªad
 !
NULL
 &&

300 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

301 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

302 
d⁄e
;

309 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

310 
å≠codíames
[
code
]);

311 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

312 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

314 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

316 
d⁄e
:

321 
	`˝u_úqoff
();

322 
d⁄e2
:

330 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

334 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

335 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

346 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

347 
	}
}

367 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

376 
	`•l0
();

377 
	`˝u_úqoff
();

379 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

380 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

397 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

402 
	`asm_u£rmode
(
tf
);

403 
	}
}

418 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack
, vaddr_à
íåy
)

420 
å≠‰ame
 
tf
;

422 
	`bzîo
(&
tf
, (tf));

424 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

425 
tf
.
tf_ïc
 = 
íåy
;

426 
tf
.
tf_a0
 = 
¨gc
;

427 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

428 
tf
.
tf_•
 = 
°ack
;

430 
	`mùs_u£rmode
(&
tf
);

431 
	}
}

	@kern/arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

39 
	~"›t-A2.h
"

40 #i‡
OPT_A2


41 
	~<addr•a˚.h
>

82 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

84 
ˇŒno
;

85 
öt32_t
 
ªtvÆ
;

86 
îr
;

88 
	`KASSERT
(
cuπhªad
 !
NULL
);

89 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

90 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

92 
ˇŒno
 = 
tf
->
tf_v0
;

103 
ªtvÆ
 = 0;

105 
ˇŒno
) {

106 
SYS_ªboŸ
:

107 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

110 
SYS___time
:

111 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

112 (
u£Ωå_t
)
tf
->
tf_a1
);

114 #ifde‡
UW


115 
SYS_wrôe
:

116 
îr
 = 
	`sys_wrôe
(()
tf
->
tf_a0
,

117 (
u£Ωå_t
)
tf
->
tf_a1
,

118 ()
tf
->
tf_a2
,

119 (*)(&
ªtvÆ
));

121 
SYS__exô
:

122 
	`sys__exô
(()
tf
->
tf_a0
);

124 
	`∑nic
("unexpectedÑeturn from sys__exit");

126 
SYS_gëpid
:

127 
îr
 = 
	`sys_gëpid
((
pid_t
 *)&
ªtvÆ
);

129 
SYS_waôpid
:

130 
îr
 = 
	`sys_waôpid
((
pid_t
)
tf
->
tf_a0
,

131 (
u£Ωå_t
)
tf
->
tf_a1
,

132 ()
tf
->
tf_a2
,

133 (
pid_t
 *)&
ªtvÆ
);

138 #i‡
OPT_A2


139 
SYS_f‹k
:

140 
îr
 = 
	`sys_f‹k
(
tf
, (
pid_t
*)&
ªtvÆ
);

143 
SYS_execv
:

145 
îr
 = 
	`sys_execv
((*)
tf
->
tf_a0
, (**Èf->
tf_a1
);

150 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

151 
îr
 = 
ENOSYS
;

156 i‡(
îr
) {

162 
tf
->
tf_v0
 = 
îr
;

163 
tf
->
tf_a3
 = 1;

167 
tf
->
tf_v0
 = 
ªtvÆ
;

168 
tf
->
tf_a3
 = 0;

176 
tf
->
tf_ïc
 += 4;

179 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

181 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

182 
	}
}

192 #i‡
OPT_A2


195 
	$íãr_f‹ked_¥o˚ss
(*
d©a1
, 
d©a2
)

197 
å≠‰ame
 *
tf
;

199 
å≠‰ame
 
u£r_tf
;

200 ()
d©a2
;

202 
tf
 = (
å≠‰ame
*)
d©a1
;

204 
u£r_tf
 = *
tf
;

205 
	`k‰ì
(
tf
);

209 
u£r_tf
.
tf_a3
 = 0;

210 
u£r_tf
.
tf_v0
 = 0;

213 
u£r_tf
.
tf_ïc
 += 4;

216 
	`as_a˘iv©e
();

219 
	`mùs_u£rmode
(&
u£r_tf
);

220 
	}
}

223 
	$íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
)

225 ()
tf
;

226 
	}
}

	@kern/arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

100 
	$˝u_idítify
()

104 
	}
}

130 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

131 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

137 
	$˝u_úq⁄
()

139 
uöt32_t
 
x
;

141 
	`GET_STATUS
(
x
);

142 
x
 |
CST_IEc
;

143 
	`SET_STATUS
(
x
);

144 
	}
}

150 
	$˝u_úqoff
()

152 
uöt32_t
 
x
;

154 
	`GET_STATUS
(
x
);

155 
x
 &~(
uöt32_t
)
CST_IEc
;

156 
	`SET_STATUS
(
x
);

157 
	}
}

164 
	$˝u_úq⁄off
()

166 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

168 
	`GET_STATUS
(
x
);

169 
x⁄
 = 
x
 | 
CST_IEc
;

170 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

171 
	`SET_STATUS
(
x⁄
);

172 
__asm
 volatile("nop;Çop;Çop;Çop");

173 
	`SET_STATUS
(
xoff
);

174 
	}
}

192 
ölöe


194 
	$waô
()

207 
__asm
 volatile(

214 
	}
}

220 
	$˝u_idÀ
()

222 
	`waô
();

223 
	`˝u_úq⁄off
();

224 
	}
}

230 
	$˝u_hÆt
()

232 
	`˝u_úqoff
();

234 
	`waô
();

236 
	}
}

	@kern/arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@kern/arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@kern/arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@kern/arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<•ölock.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<mùs/éb.h
>

38 
	~<addr•a˚.h
>

39 
	~<vm.h
>

40 
	~"›t-A3.h
"

48 
	#DUMBVM_STACKPAGES
 12

	)

53 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

56 
	$vm_boŸ°øp
()

59 
	}
}

62 
∑ddr_t


63 
	$gëµages
(
≈ages
)

65 
∑ddr_t
 
addr
;

67 
	`•ölock_acquúe
(&
°ólmem_lock
);

69 
addr
 = 
	`øm_°ólmem
(
≈ages
);

71 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

72  
addr
;

73 
	}
}

76 
vaddr_t


77 
	$Æloc_k∑ges
(
≈ages
)

79 
∑ddr_t
 
∑
;

80 
∑
 = 
	`gëµages
(
≈ages
);

81 i‡(
∑
==0) {

84  
	`PADDR_TO_KVADDR
(
∑
);

85 
	}
}

88 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

92 ()
addr
;

93 
	}
}

96 
	$vm_ébshoŸdown_Æl
()

98 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

99 
	}
}

102 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

104 ()
ts
;

105 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

106 
	}
}

109 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

111 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

112 
∑ddr_t
 
∑ddr
;

113 
i
;

114 
uöt32_t
 
ehi
, 
ño
;

115 
addr•a˚
 *
as
;

116 
•l
;

118 
Áu…addªss
 &
PAGE_FRAME
;

120 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

122 
Áu…ty≥
) {

123 
VM_FAULT_READONLY
:

125 #i‡
OPT_A3


126  
EFAULT
;

128 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

130 
VM_FAULT_READ
:

131 
VM_FAULT_WRITE
:

134  
EINVAL
;

137 i‡(
cuΩroc
 =
NULL
) {

143  
EFAULT
;

146 
as
 = 
	`cuΩroc_gëas
();

147 i‡(
as
 =
NULL
) {

152  
EFAULT
;

156 
	`KASSERT
(
as
->
as_vba£1
 != 0);

157 
	`KASSERT
(
as
->
as_pba£1
 != 0);

158 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

159 
	`KASSERT
(
as
->
as_vba£2
 != 0);

160 
	`KASSERT
(
as
->
as_pba£2
 != 0);

161 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

162 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

163 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

164 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

165 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

166 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

167 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

169 
vba£1
 = 
as
->
as_vba£1
;

170 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

171 
vba£2
 = 
as
->
as_vba£2
;

172 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

173 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

174 
°ackt›
 = 
USERSTACK
;

176 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

177 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

179 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

180 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

182 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

183 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

186  
EFAULT
;

190 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

193 
•l
 = 
	`•lhigh
();

195 
i
=0; i<
NUM_TLB
; i++) {

196 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

197 i‡(
ño
 & 
TLBLO_VALID
) {

200 
ehi
 = 
Áu…addªss
;

201 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

202 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

203 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

204 
	`•lx
(
•l
);

208 #i‡
OPT_A3


209 
ehi
 = 
Áu…addªss
;

210 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

211 
	`éb_øndom
(
ehi
, 
ño
);

212 
	`•lx
(
•l
);

215 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

216 
	`•lx
(
•l
);

217  
EFAULT
;

219 
	}
}

221 
addr•a˚
 *

222 
	$as_¸óã
()

224 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

225 i‡(
as
==
NULL
) {

226  
NULL
;

229 
as
->
as_vba£1
 = 0;

230 
as
->
as_pba£1
 = 0;

231 
as
->
as_≈ages1
 = 0;

232 
as
->
as_vba£2
 = 0;

233 
as
->
as_pba£2
 = 0;

234 
as
->
as_≈ages2
 = 0;

235 
as
->
as_°ackpba£
 = 0;

236 #i‡
OPT_A3


237 
as
->
as_gŸ
 = 
Ál£
;

239  
as
;

240 
	}
}

243 
	$as_de°roy
(
addr•a˚
 *
as
)

245 
	`k‰ì
(
as
);

246 
	}
}

249 
	$as_a˘iv©e
()

251 
i
, 
•l
;

252 
addr•a˚
 *
as
;

254 
as
 = 
	`cuΩroc_gëas
();

255 #ifde‡
UW


258 i‡(
as
 =
NULL
) {

263 
•l
 = 
	`•lhigh
();

265 
i
=0; i<
NUM_TLB
; i++) {

266 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

269 
	`•lx
(
•l
);

270 
	}
}

273 
	$as_dó˘iv©e
()

276 
	}
}

279 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

280 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

282 
size_t
 
≈ages
;

285 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

286 
vaddr
 &
PAGE_FRAME
;

289 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

291 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

294 ()
ªadabÀ
;

295 ()
wrôóbÀ
;

296 ()
execuèbÀ
;

298 i‡(
as
->
as_vba£1
 == 0) {

299 
as
->
as_vba£1
 = 
vaddr
;

300 
as
->
as_≈ages1
 = 
≈ages
;

304 i‡(
as
->
as_vba£2
 == 0) {

305 
as
->
as_vba£2
 = 
vaddr
;

306 
as
->
as_≈ages2
 = 
≈ages
;

313 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

314  
EUNIMP
;

315 
	}
}

319 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

321 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

322 
	}
}

325 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

327 
	`KASSERT
(
as
->
as_pba£1
 == 0);

328 
	`KASSERT
(
as
->
as_pba£2
 == 0);

329 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

331 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

332 i‡(
as
->
as_pba£1
 == 0) {

333  
ENOMEM
;

336 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

337 i‡(
as
->
as_pba£2
 == 0) {

338  
ENOMEM
;

341 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

342 i‡(
as
->
as_°ackpba£
 == 0) {

343  
ENOMEM
;

346 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

347 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

348 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

351 
	}
}

354 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

356 #i‡
OPT_A3


357 
as
->
as_gŸ
 = 
Ál£
;

359 ()
as
;

362 
	}
}

365 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

367 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

369 *
°ack±r
 = 
USERSTACK
;

371 
	}
}

374 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

376 
addr•a˚
 *
√w
;

378 
√w
 = 
	`as_¸óã
();

379 i‡(
√w
==
NULL
) {

380  
ENOMEM
;

383 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

384 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

385 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

386 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

389 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

390 
	`as_de°roy
(
√w
);

391  
ENOMEM
;

394 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

395 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

396 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

398 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

399 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

400 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

402 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

403 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

404 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

406 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

407 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

408 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

410 *
ªt
 = 
√w
;

412 
	}
}

	@kern/arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 508*1024*1024) {

61 
ømsize
 = 508*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

121 
	$øm_gësize
(
∑ddr_t
 *
lo
,Öaddr_à*
hi
)

123 *
lo
 = 
fú°∑ddr
;

124 *
hi
 = 
œ°∑ddr
;

125 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

126 
	}
}

	@kern/arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/å≠‰ame.h
>

34 
	~<˝u.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<synch.h
>

40 
	~<maöbus.h
>

41 
	~<sys161/bus.h
>

42 
	~<œmebus/œmebus.h
>

43 
	~"autoc⁄f.h
"

51 
	#CPU_FREQUENCY
 25000000

	)

62 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

68 
__asm
 volatile(

73 :: "r" (
cou¡
));

74 
	}
}

81 
œmebus_so·c
 *
	gœmebus
;

84 
	$maöbus_boŸ°øp
()

87 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

90 
œmebus
 = 
	`œmebus_öô
();

93 
	`œmebus_föd_˝us
(
œmebus
);

98 
	`k¥ötf
("lamebus0 (system main bus)\n");

105 
	`•l0
();

111 
	`autoc⁄f_œmebus
(
œmebus
, 0);

116 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

117 
	}
}

123 
	$maöbus_°¨t_˝us
()

125 
	`œmebus_°¨t_˝us
(
œmebus
);

126 
	}
}

134 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

136 
uöt32_t
 
addªss
;

138 ()
bus
;

140 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

142 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

143  (*)
addªss
;

144 
	}
}

149 
uöt32_t


150 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

152 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

154  *
±r
;

155 
	}
}

161 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

162 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

164 
uöt32_t
 *
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

166 *
±r
 = 
vÆ
;

167 
	}
}

174 
	$maöbus_powîoff
()

182 
	`œmebus_powîoff
(
œmebus
);

183 
	}
}

189 
	$maöbus_ªboŸ
()

198 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

199 
	`maöbus_powîoff
();

200 
	}
}

208 
	$maöbus_hÆt
()

210 
	`˝u_hÆt
();

211 
	}
}

221 
	$maöbus_∑nic
()

223 
	`maöbus_powîoff
();

224 
	}
}

230 
uöt32_t


231 
	$maöbus_ømsize
()

233  
	`œmebus_ømsize
();

234 
	}
}

240 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

242 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

243 
	}
}

250 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

251 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

252 
	#MIPS_TIMER_BIT
 0x00008000

	)

255 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

257 
uöt32_t
 
ˇu£
;

260 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

262 
ˇu£
 = 
tf
->
tf_ˇu£
;

263 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

264 
	`œmebus_öãºu±
(
œmebus
);

266 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

267 
	`öãΩro˚ss‹_öãºu±
();

268 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

270 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

272 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

274 
	`h¨d˛ock
();

277 
	`∑nic
("Unknow¿öãºu±; cau£Ñegi°î i†%08x\n", 
ˇu£
);

279 
	}
}

	@kern/arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@kern/arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@kern/compile/ASST0/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_c⁄
 <= 0) {

282 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

314 i‡(
√xtunô_bìp
 <= 0) {

315 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

319 i‡(
√xtunô_π˛ock
 <= 0) {

320 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

323 
	}
}

326 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

328 ()
bus
; ()
busunô
;

330 
ªsu…
, 
devunô
=
√xtunô_emu
;

332 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

333 
devunô
++;

334 } 
ªsu…
==0);

337 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

339 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

340 
devunô
++;

341 } 
ªsu…
==0);

344 
ªsu…
, 
devunô
=
√xtunô_…imî
;

346 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

347 
devunô
++;

348 } 
ªsu…
==0);

351 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

353 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

354 
devunô
++;

355 } 
ªsu…
==0);

358 
ªsu…
, 
devunô
=
√xtunô_lhd
;

360 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

361 
devunô
++;

362 } 
ªsu…
==0);

365 
ªsu…
, 
devunô
=
√xtunô_l£r
;

367 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

368 
devunô
++;

369 } 
ªsu…
==0);

371 
	}
}

375 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

377 ()
bus
; ()
busunô
;

378 
	}
}

382 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

384 ()
bus
; ()
busunô
;

386 i‡(
√xtunô_øndom
 <= 0) {

387 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

390 
	}
}

394 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@kern/compile/ASST0/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@kern/compile/ASST0/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 1

	)

	@kern/compile/ASST0/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 0

	)

	@kern/compile/ASST0/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 0

	)

	@kern/compile/ASST0/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@kern/compile/ASST0/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@kern/compile/ASST0/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@kern/compile/ASST0/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@kern/compile/ASST0/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@kern/compile/ASST0/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@kern/compile/ASST0/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@kern/compile/ASST0/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@kern/compile/ASST0/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@kern/compile/ASST0/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 4;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST0";

	@kern/compile/ASST1/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_c⁄
 <= 0) {

282 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

314 i‡(
√xtunô_bìp
 <= 0) {

315 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

319 i‡(
√xtunô_π˛ock
 <= 0) {

320 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

323 
	}
}

326 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

328 ()
bus
; ()
busunô
;

330 
ªsu…
, 
devunô
=
√xtunô_emu
;

332 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

333 
devunô
++;

334 } 
ªsu…
==0);

337 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

339 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

340 
devunô
++;

341 } 
ªsu…
==0);

344 
ªsu…
, 
devunô
=
√xtunô_…imî
;

346 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

347 
devunô
++;

348 } 
ªsu…
==0);

351 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

353 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

354 
devunô
++;

355 } 
ªsu…
==0);

358 
ªsu…
, 
devunô
=
√xtunô_lhd
;

360 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

361 
devunô
++;

362 } 
ªsu…
==0);

365 
ªsu…
, 
devunô
=
√xtunô_l£r
;

367 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

368 
devunô
++;

369 } 
ªsu…
==0);

371 
	}
}

375 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

377 ()
bus
; ()
busunô
;

378 
	}
}

382 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

384 ()
bus
; ()
busunô
;

386 i‡(
√xtunô_øndom
 <= 0) {

387 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

390 
	}
}

394 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@kern/compile/ASST1/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@kern/compile/ASST1/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@kern/compile/ASST1/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@kern/compile/ASST1/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 0

	)

	@kern/compile/ASST1/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@kern/compile/ASST1/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@kern/compile/ASST1/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@kern/compile/ASST1/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@kern/compile/ASST1/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@kern/compile/ASST1/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@kern/compile/ASST1/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@kern/compile/ASST1/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@kern/compile/ASST1/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 1

	)

	@kern/compile/ASST1/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 29;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST1";

	@kern/compile/ASST2/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_c⁄
 <= 0) {

282 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

314 i‡(
√xtunô_bìp
 <= 0) {

315 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

319 i‡(
√xtunô_π˛ock
 <= 0) {

320 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

323 
	}
}

326 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

328 ()
bus
; ()
busunô
;

330 
ªsu…
, 
devunô
=
√xtunô_emu
;

332 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

333 
devunô
++;

334 } 
ªsu…
==0);

337 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

339 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

340 
devunô
++;

341 } 
ªsu…
==0);

344 
ªsu…
, 
devunô
=
√xtunô_…imî
;

346 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

347 
devunô
++;

348 } 
ªsu…
==0);

351 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

353 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

354 
devunô
++;

355 } 
ªsu…
==0);

358 
ªsu…
, 
devunô
=
√xtunô_lhd
;

360 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

361 
devunô
++;

362 } 
ªsu…
==0);

365 
ªsu…
, 
devunô
=
√xtunô_l£r
;

367 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

368 
devunô
++;

369 } 
ªsu…
==0);

371 
	}
}

375 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

377 ()
bus
; ()
busunô
;

378 
	}
}

382 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

384 ()
bus
; ()
busunô
;

386 i‡(
√xtunô_øndom
 <= 0) {

387 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

390 
	}
}

394 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@kern/compile/ASST2/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@kern/compile/ASST2/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@kern/compile/ASST2/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@kern/compile/ASST2/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 1

	)

	@kern/compile/ASST2/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 0

	)

	@kern/compile/ASST2/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@kern/compile/ASST2/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@kern/compile/ASST2/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@kern/compile/ASST2/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@kern/compile/ASST2/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@kern/compile/ASST2/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@kern/compile/ASST2/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@kern/compile/ASST2/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@kern/compile/ASST2/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 41;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST2";

	@kern/compile/ASST3/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_c⁄
 <= 0) {

282 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

285 
	}
}

289 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

291 ()
bus
; ()
busunô
;

292 
	}
}

296 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

298 ()
bus
; ()
busunô
;

299 
	}
}

303 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

305 ()
bus
; ()
busunô
;

306 
	}
}

310 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

312 ()
bus
; ()
busunô
;

314 i‡(
√xtunô_bìp
 <= 0) {

315 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

319 i‡(
√xtunô_π˛ock
 <= 0) {

320 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

323 
	}
}

326 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

328 ()
bus
; ()
busunô
;

330 
ªsu…
, 
devunô
=
√xtunô_emu
;

332 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

333 
devunô
++;

334 } 
ªsu…
==0);

337 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

339 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

340 
devunô
++;

341 } 
ªsu…
==0);

344 
ªsu…
, 
devunô
=
√xtunô_…imî
;

346 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

347 
devunô
++;

348 } 
ªsu…
==0);

351 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

353 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

354 
devunô
++;

355 } 
ªsu…
==0);

358 
ªsu…
, 
devunô
=
√xtunô_lhd
;

360 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

361 
devunô
++;

362 } 
ªsu…
==0);

365 
ªsu…
, 
devunô
=
√xtunô_l£r
;

367 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

368 
devunô
++;

369 } 
ªsu…
==0);

371 
	}
}

375 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

377 ()
bus
; ()
busunô
;

378 
	}
}

382 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

384 ()
bus
; ()
busunô
;

386 i‡(
√xtunô_øndom
 <= 0) {

387 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

390 
	}
}

394 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@kern/compile/ASST3/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@kern/compile/ASST3/opt-A0.h

2 #i‚de‡
_OPT_A0_H_


3 
	#_OPT_A0_H_


	)

4 
	#OPT_A0
 0

	)

	@kern/compile/ASST3/opt-A1.h

2 #i‚de‡
_OPT_A1_H_


3 
	#_OPT_A1_H_


	)

4 
	#OPT_A1
 1

	)

	@kern/compile/ASST3/opt-A2.h

2 #i‚de‡
_OPT_A2_H_


3 
	#_OPT_A2_H_


	)

4 
	#OPT_A2
 1

	)

	@kern/compile/ASST3/opt-A3.h

2 #i‚de‡
_OPT_A3_H_


3 
	#_OPT_A3_H_


	)

4 
	#OPT_A3
 1

	)

	@kern/compile/ASST3/opt-A4.h

2 #i‚de‡
_OPT_A4_H_


3 
	#_OPT_A4_H_


	)

4 
	#OPT_A4
 0

	)

	@kern/compile/ASST3/opt-A5.h

2 #i‚de‡
_OPT_A5_H_


3 
	#_OPT_A5_H_


	)

4 
	#OPT_A5
 0

	)

	@kern/compile/ASST3/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@kern/compile/ASST3/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@kern/compile/ASST3/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@kern/compile/ASST3/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@kern/compile/ASST3/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@kern/compile/ASST3/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@kern/compile/ASST3/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 2;

3 c⁄° 
	gbuûdc⁄fig
[] = "ASST3";

	@kern/dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@kern/dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@kern/dev/generic/console.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<thªad.h
>

58 
	~<cuºít.h
>

59 
	~<synch.h
>

60 
	~<gíîic/c⁄sﬁe.h
>

61 
	~<vfs.h
>

62 
	~<devi˚.h
>

63 
	~"autoc⁄f.h
"

68 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

74 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

75 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

84 
	#DELAYBUFSIZE
 1024

	)

85 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

86 
size_t
 
	gdñayed_outbuf_pos
=0;

90 
	$putch_dñayed
(
ch
)

97 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

98 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

99 
	}
}

103 
	$Êush_dñay_buf
()

105 
size_t
 
i
;

106 
i
=0; i<
dñayed_outbuf_pos
; i++) {

107 
	`putch
(
dñayed_outbuf
[
i
]);

109 
dñayed_outbuf_pos
 = 0;

110 
	}
}

120 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

122 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

123 
	}
}

127 
	$putch_¥ï¨e_pﬁÀd
(
c⁄_so·c
 *
cs
)

129 i‡(
cs
->
cs_°¨çﬁlög
 !
NULL
) {

130 
cs
->
	`cs_°¨çﬁlög
(cs->
cs_devd©a
);

132 
	}
}

136 
	$putch_com∂ëe_pﬁÀd
(
c⁄_so·c
 *
cs
)

138 i‡(
cs
->
cs_ídpﬁlög
 !
NULL
) {

139 
cs
->
	`cs_ídpﬁlög
(cs->
cs_devd©a
);

141 
	}
}

150 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

152 
	`P
(
cs
->
cs_w£m
);

153 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

154 
	}
}

161 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

163 
ªt
;

165 
	`P
(
cs
->
cs_r£m
);

166 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

167 
cs
->
cs_gŸch¨s_èû
 =

168 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

169  
ªt
;

170 
	}
}

182 
	$c⁄_öput
(*
vcs
, 
ch
)

184 
c⁄_so·c
 *
cs
 = 
vcs
;

185 
√xthód
;

187 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

188 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

193 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

194 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

196 
	`V
(
cs
->
cs_r£m
);

197 
	}
}

203 
	$c⁄_°¨t
(*
vcs
)

205 
c⁄_so·c
 *
cs
 = 
vcs
;

207 
	`V
(
cs
->
cs_w£m
);

208 
	}
}

221 
	$putch
(
ch
)

223 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

225 i‡(
cs
==
NULL
) {

226 
	`putch_dñayed
(
ch
);

228 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

229 
	`putch_pﬁÀd
(
cs
, 
ch
);

232 
	`putch_öå
(
cs
, 
ch
);

234 
	}
}

237 
	$putch_¥ï¨e
()

239 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

241 i‡(
cs
 =
NULL
) {

244 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

245 
	`putch_¥ï¨e_pﬁÀd
(
cs
);

250 
	}
}

253 
	$putch_com∂ëe
()

255 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

257 i‡(
cs
 =
NULL
) {

260 i‡(
cuπhªad
->
t_ö_öãºu±
 || cuπhªad->
t_ùlhigh_cou¡
 > 0) {

261 
	`putch_com∂ëe_pﬁÀd
(
cs
);

266 
	}
}

269 
	$gëch
()

271 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

272 
	`KASSERT
(
cs
 !
NULL
);

273 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

275  
	`gëch_öå
(
cs
);

276 
	}
}

286 
	$c⁄_›í
(
devi˚
 *
dev
, 
›íÊags
)

288 ()
dev
;

289 ()
›íÊags
;

291 
	}
}

295 
	$c⁄_˛o£
(
devi˚
 *
dev
)

297 ()
dev
;

299 
	}
}

303 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

305 
ªsu…
;

306 
ch
;

307 
lock
 *
lk
;

309 ()
dev
;

311 i‡(
uio
->
uio_rw
==
UIO_READ
) {

312 
lk
 = 
c⁄_u£æock_ªad
;

315 
lk
 = 
c⁄_u£æock_wrôe
;

318 
	`KASSERT
(
lk
 !
NULL
);

319 
	`lock_acquúe
(
lk
);

321 
uio
->
uio_ªsid
 > 0) {

322 i‡(
uio
->
uio_rw
==
UIO_READ
) {

323 
ch
 = 
	`gëch
();

324 i‡(
ch
=='\r') {

325 
ch
 = '\n';

327 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

328 i‡(
ªsu…
) {

329 
	`lock_ªÀa£
(
lk
);

330  
ªsu…
;

332 i‡(
ch
=='\n') {

337 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

338 i‡(
ªsu…
) {

339 
	`lock_ªÀa£
(
lk
);

340  
ªsu…
;

342 i‡(
ch
=='\n') {

343 
	`putch
('\r');

345 
	`putch
(
ch
);

348 
	`lock_ªÀa£
(
lk
);

350 
	}
}

354 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

357 ()
dev
;

358 ()
›
;

359 ()
d©a
;

360  
EINVAL
;

361 
	}
}

365 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

367 
devi˚
 *
dev
;

368 
ªsu…
;

370 
dev
 = 
	`kmÆloc
((*dev));

371 i‡(
dev
==
NULL
) {

372  
ENOMEM
;

375 
dev
->
d_›í
 = 
c⁄_›í
;

376 
dev
->
d_˛o£
 = 
c⁄_˛o£
;

377 
dev
->
d_io
 = 
c⁄_io
;

378 
dev
->
d_io˘l
 = 
c⁄_io˘l
;

379 
dev
->
d_blocks
 = 0;

380 
dev
->
d_blocksize
 = 1;

381 
dev
->
d_d©a
 = 
cs
;

383 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

384 i‡(
ªsu…
) {

385 
	`k‰ì
(
dev
);

386  
ªsu…
;

390 
	}
}

399 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

401 
£m≠h‹e
 *
r£m
, *
w£m
;

402 
lock
 *
æk
, *
wlk
;

411 i‡(
unô
>0) {

412 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

413  
ENODEV
;

415 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

417 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

418 i‡(
r£m
 =
NULL
) {

419  
ENOMEM
;

421 
w£m
 = 
	`£m_¸óã
("console write", 1);

422 i‡(
w£m
 =
NULL
) {

423 
	`£m_de°roy
(
r£m
);

424  
ENOMEM
;

426 
æk
 = 
	`lock_¸óã
("console-lock-read");

427 i‡(
æk
 =
NULL
) {

428 
	`£m_de°roy
(
r£m
);

429 
	`£m_de°roy
(
w£m
);

430  
ENOMEM
;

432 
wlk
 = 
	`lock_¸óã
("console-lock-write");

433 i‡(
wlk
 =
NULL
) {

434 
	`lock_de°roy
(
æk
);

435 
	`£m_de°roy
(
r£m
);

436 
	`£m_de°roy
(
w£m
);

437  
ENOMEM
;

440 
cs
->
cs_r£m
 = 
r£m
;

441 
cs
->
cs_w£m
 = 
w£m
;

442 
cs
->
cs_gŸch¨s_hód
 = 0;

443 
cs
->
cs_gŸch¨s_èû
 = 0;

445 
the_c⁄sﬁe
 = 
cs
;

446 
c⁄_u£æock_ªad
 = 
æk
;

447 
c⁄_u£æock_wrôe
 = 
wlk
;

449 
	`Êush_dñay_buf
();

451  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

452 
	}
}

	@kern/dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

47 (*
	mcs_°¨çﬁlög
)(*
	mdevd©a
);

48 (*
	mcs_ídpﬁlög
)(*
	mdevd©a
);

51 
£m≠h‹e
 *
	mcs_r£m
;

52 
£m≠h‹e
 *
	mcs_w£m
;

53 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

54 
	mcs_gŸch¨s_hód
;

55 
	mcs_gŸch¨s_èû
;

61 
c⁄_öput
–*
cs
, 
ch
);

62 
c⁄_°¨t
–*
cs
);

	@kern/dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$ønd›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$ønd˛o£
(
devi˚
 *
dev
)

76 ()
dev
;

78 
	}
}

85 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

87 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

89 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

90  
EIO
;

93  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

94 
	}
}

101 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

106 ()
dev
;

107 ()
›
;

108 ()
d©a
;

109  
EIOCTL
;

110 
	}
}

116 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

118 
ªsu…
;

121 i‡(
unô
!=0) {

122  
ENODEV
;

125 
	`KASSERT
(
the_øndom
==
NULL
);

126 
the_øndom
 = 
rs
;

128 
rs
->
rs_dev
.
d_›í
 = 
ønd›í
;

129 
rs
->
rs_dev
.
d_˛o£
 = 
ønd˛o£
;

130 
rs
->
rs_dev
.
d_io
 = 
øndio
;

131 
rs
->
rs_dev
.
d_io˘l
 = 
øndio˘l
;

132 
rs
->
rs_dev
.
d_blocks
 = 0;

133 
rs
->
rs_dev
.
d_blocksize
 = 1;

134 
rs
->
rs_dev
.
d_d©a
 =Ñs;

137 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

138 i‡(
ªsu…
) {

139  
ªsu…
;

143 
	}
}

150 
uöt32_t


151 
	$øndom
()

153 i‡(
the_øndom
==
NULL
) {

154 
	`∑nic
("NoÑandom device\n");

156  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

157 
	}
}

159 
uöt32_t


160 
	$øndmax
()

162 i‡(
the_øndom
==
NULL
) {

163 
	`∑nic
("NoÑandom device\n");

165  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

166 
	}
}

	@kern/dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@kern/dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
£cs
, 
n£cs
);

70 
	}
}

	@kern/dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	sπ˛ock_so·c
 {

39 *
	mπc_devd©a
;

41 (*
	mπc_gëtime
)(*
	mdevd©a
, 
time_t
 *
	m£cs
, 
uöt32_t
 *
	mn£cs
);

	@kern/dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@kern/dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

52 
cs
->
cs_°¨çﬁlög
 = 
NULL
;

53 
cs
->
cs_ídpﬁlög
 = 
NULL
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@kern/dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

54 
cs
->
cs_°¨çﬁlög
 = 
l£r_°¨çﬁlög
;

55 
cs
->
cs_ídpﬁlög
 = 
l£r_ídpﬁlög
;

57 
ls
->
ls_devd©a
 = 
cs
;

58 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

59 
ls
->
ls_öput
 = 
c⁄_öput
;

61  
cs
;

62 
	}
}

	@kern/dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<synch.h
>

51 
	~<œmebus/emu.h
>

52 
	~<∂©f‹m/bus.h
>

53 
	~<vfs.h
>

54 
	~<emufs.h
>

55 
	~"autoc⁄f.h
"

58 
	#REG_HANDLE
 0

	)

59 
	#REG_OFFSET
 4

	)

60 
	#REG_IOLEN
 8

	)

61 
	#REG_OPER
 12

	)

62 
	#REG_RESULT
 16

	)

65 
	#EMU_BUFFER
 32768

	)

68 
	#EMU_OP_OPEN
 1

	)

69 
	#EMU_OP_CREATE
 2

	)

70 
	#EMU_OP_EXCLCREATE
 3

	)

71 
	#EMU_OP_CLOSE
 4

	)

72 
	#EMU_OP_READ
 5

	)

73 
	#EMU_OP_READDIR
 6

	)

74 
	#EMU_OP_WRITE
 7

	)

75 
	#EMU_OP_GETSIZE
 8

	)

76 
	#EMU_OP_TRUNC
 9

	)

79 
	#EMU_RES_SUCCESS
 1

	)

80 
	#EMU_RES_BADHANDLE
 2

	)

81 
	#EMU_RES_BADOP
 3

	)

82 
	#EMU_RES_BADPATH
 4

	)

83 
	#EMU_RES_BADSIZE
 5

	)

84 
	#EMU_RES_EXISTS
 6

	)

85 
	#EMU_RES_ISDIR
 7

	)

86 
	#EMU_RES_MEDIA
 8

	)

87 
	#EMU_RES_NOHANDLES
 9

	)

88 
	#EMU_RES_NOSPACE
 10

	)

89 
	#EMU_RES_NOTDIR
 11

	)

90 
	#EMU_RES_UNKNOWN
 12

	)

91 
	#EMU_RES_UNSUPP
 13

	)

102 
ölöe


103 
uöt32_t


104 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

106  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

107 
	}
}

113 
ölöe


115 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

117 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

118 
	}
}

124 
	$emu_úq
(*
dev
)

126 
emu_so·c
 *
sc
 = 
dev
;

128 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

129 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

131 
	`V
(
sc
->
e_£m
);

132 
	}
}

139 
uöt32_t


140 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

142 
code
) {

143 
EMU_RES_SUCCESS
:  0;

144 
EMU_RES_BADHANDLE
:

145 
EMU_RES_BADOP
:

146 
EMU_RES_BADSIZE
:

147 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

148 
EMU_RES_BADPATH
:  
ENOENT
;

149 
EMU_RES_EXISTS
:  
EEXIST
;

150 
EMU_RES_ISDIR
:  
EISDIR
;

151 
EMU_RES_MEDIA
:  
EIO
;

152 
EMU_RES_NOHANDLES
:  
ENFILE
;

153 
EMU_RES_NOSPACE
:  
ENOSPC
;

154 
EMU_RES_NOTDIR
:  
ENOTDIR
;

155 
EMU_RES_UNKNOWN
:  
EIO
;

156 
EMU_RES_UNSUPP
:  
EUNIMP
;

158 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

159  
EAGAIN
;

160 
	}
}

167 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

169 
	`P
(
sc
->
e_£m
);

170  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

171 
	}
}

181 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

182 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

183 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

185 
uöt32_t
 
›
;

186 
ªsu…
;

188 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

189  
ENAMETOOLONG
;

192 i‡(
¸óã
 && 
ex˛
) {

193 
›
 = 
EMU_OP_EXCLCREATE
;

195 i‡(
¸óã
) {

196 
›
 = 
EMU_OP_CREATE
;

199 
›
 = 
EMU_OP_OPEN
;

203 ()
mode
;

205 
	`lock_acquúe
(
sc
->
e_lock
);

207 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

208 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

209 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

210 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

211 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

213 i‡(
ªsu…
==0) {

214 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

215 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

218 
	`lock_ªÀa£
(
sc
->
e_lock
);

219  
ªsu…
;

220 
	}
}

229 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

231 
ªsu…
;

232 
boﬁ
 
möe
;

233 
ªåõs
 = 0;

235 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

236 i‡(!
möe
) {

237 
	`lock_acquúe
(
sc
->
e_lock
);

243 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

244 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

245 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

247 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

248 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

249 
sc
->
e_unô
);

250 
ªåõs
++;

256 i‡(!
möe
) {

257 
	`lock_ªÀa£
(
sc
->
e_lock
);

259  
ªsu…
;

260 
	}
}

267 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

268 
uöt32_t
 
›
, 
uio
 *uio)

270 
ªsu…
;

272 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

274 
	`lock_acquúe
(
sc
->
e_lock
);

276 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

277 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

278 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

279 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

280 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

281 i‡(
ªsu…
) {

282 
out
;

285 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

287 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

289 
out
:

290 
	`lock_ªÀa£
(
sc
->
e_lock
);

291  
ªsu…
;

292 
	}
}

299 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

300 
uio
 *uio)

302  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

303 
	}
}

310 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

311 
uio
 *uio)

313  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

314 
	}
}

321 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

322 
uio
 *uio)

324 
ªsu…
;

326 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

328 
	`lock_acquúe
(
sc
->
e_lock
);

330 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

331 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

332 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

334 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

335 i‡(
ªsu…
) {

336 
out
;

339 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

340 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

342 
out
:

343 
	`lock_ªÀa£
(
sc
->
e_lock
);

344  
ªsu…
;

345 
	}
}

352 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

354 
ªsu…
;

356 
	`lock_acquúe
(
sc
->
e_lock
);

358 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

359 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

360 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

361 i‡(
ªsu…
==0) {

362 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

365 
	`lock_ªÀa£
(
sc
->
e_lock
);

366  
ªsu…
;

367 
	}
}

374 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

376 
ªsu…
;

378 
	`lock_acquúe
(
sc
->
e_lock
);

380 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

381 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

382 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

383 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

385 
	`lock_ªÀa£
(
sc
->
e_lock
);

386  
ªsu…
;

387 
	}
}

399 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

400 
emufs_vnode
 **
ªt
);

407 
	$emufs_›í
(
vnode
 *
v
, 
›íÊags
)

417 i‡(
›íÊags
 & 
O_APPEND
) {

418  
EUNIMP
;

421 ()
v
;

424 
	}
}

431 
	$emufs_›ídú
(
vnode
 *
v
, 
›íÊags
)

433 
›íÊags
 & 
O_ACCMODE
) {

434 
O_RDONLY
:

436 
O_WRONLY
:

437 
O_RDWR
:

439  
EISDIR
;

441 i‡(
›íÊags
 & 
O_APPEND
) {

442  
EISDIR
;

445 ()
v
;

447 
	}
}

454 
	$emufs_˛o£
(
vnode
 *
v
)

456 ()
v
;

458 
	}
}

467 
	$emufs_ª˛aim
(
vnode
 *
v
)

469 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

470 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

471 
ix
, 
i
, 
num
;

472 
ªsu…
;

479 
	`vfs_biglock_acquúe
();

480 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

482 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 != 1) {

483 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

484 
	`vfs_biglock_ªÀa£
();

485  
EBUSY
;

489 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

490 i‡(
ªsu…
) {

491 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

492 
	`vfs_biglock_ªÀa£
();

493  
ªsu…
;

496 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

497 
ix
 = 
num
;

498 
i
=0; i<
num
; i++) {

499 
vnode
 *
vx
;

501 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

502 i‡(
vx
 =
v
) {

503 
ix
 = 
i
;

507 i‡(
ix
 =
num
) {

508 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

509 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

512 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

513 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

515 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

516 
	`vfs_biglock_ªÀa£
();

518 
	`k‰ì
(
ev
);

520 
	}
}

527 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

529 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

530 
uöt32_t
 
amt
;

531 
size_t
 
ﬁdªsid
;

532 
ªsu…
;

534 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

536 
uio
->
uio_ªsid
 > 0) {

537 
amt
 = 
uio
->
uio_ªsid
;

538 i‡(
amt
 > 
EMU_MAXIO
) {

539 
amt
 = 
EMU_MAXIO
;

542 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

544 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

545 i‡(
ªsu…
) {

546  
ªsu…
;

549 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

556 
	}
}

563 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

565 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

566 
uöt32_t
 
amt
;

568 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

570 
amt
 = 
uio
->
uio_ªsid
;

571 i‡(
amt
 > 
EMU_MAXIO
) {

572 
amt
 = 
EMU_MAXIO
;

575  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

576 
	}
}

583 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

585 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

586 
uöt32_t
 
amt
;

587 
size_t
 
ﬁdªsid
;

588 
ªsu…
;

590 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

592 
uio
->
uio_ªsid
 > 0) {

593 
amt
 = 
uio
->
uio_ªsid
;

594 i‡(
amt
 > 
EMU_MAXIO
) {

595 
amt
 = 
EMU_MAXIO
;

598 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

600 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

601 i‡(
ªsu…
) {

602  
ªsu…
;

605 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

612 
	}
}

619 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

625 ()
v
;

626 ()
›
;

627 ()
d©a
;

629  
EINVAL
;

630 
	}
}

637 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

639 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

640 
ªsu…
;

642 
	`bzîo
(
°©buf
, (
°©
));

644 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

645 i‡(
ªsu…
) {

646  
ªsu…
;

649 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

650 i‡(
ªsu…
) {

651  
ªsu…
;

653 
°©buf
->
°_mode
 |= 0644;

654 
°©buf
->
°_∆ök
 = 1;

655 
°©buf
->
°_blocks
 = 0;

658 
	}
}

665 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

667 ()
v
;

668 *
ªsu…
 = 
S_IFREG
;

670 
	}
}

677 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

679 ()
v
;

680 *
ªsu…
 = 
S_IFDIR
;

682 
	}
}

689 
	$emufs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

691 i‡(
pos
<0) {

692  
EINVAL
;

696 ()
v
;

699 
	}
}

706 
	$emufs_fsync
(
vnode
 *
v
)

708 ()
v
;

710 
	}
}

717 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

719 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

720  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

721 
	}
}

728 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

729 
vnode
 **
ªt
)

731 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

732 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

733 
emufs_vnode
 *
√wguy
;

734 
uöt32_t
 
h™dÀ
;

735 
ªsu…
;

736 
isdú
;

738 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

739 &
h™dÀ
, &
isdú
);

740 i‡(
ªsu…
) {

741  
ªsu…
;

744 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

745 i‡(
ªsu…
) {

746 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

747  
ªsu…
;

750 *
ªt
 = &
√wguy
->
ev_v
;

752 
	}
}

759 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

761 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

762 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

763 
emufs_vnode
 *
√wguy
;

764 
uöt32_t
 
h™dÀ
;

765 
ªsu…
;

766 
isdú
;

768 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

769 &
h™dÀ
, &
isdú
);

770 i‡(
ªsu…
) {

771  
ªsu…
;

774 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

775 i‡(
ªsu…
) {

776 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

777  
ªsu…
;

780 *
ªt
 = &
√wguy
->
ev_v
;

782 
	}
}

789 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

790 *
buf
, 
size_t
 
Àn
)

792 *
s
;

794 
s
 = 
	`°ºchr
(
∑th«me
, '/');

795 i‡(
s
==
NULL
) {

797 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

798  
ENAMETOOLONG
;

800 
	`VOP_INCREF
(
dú
);

801 *
ªt
 = 
dú
;

802 
	`°r˝y
(
buf
, 
∑th«me
);

806 *
s
 = 0;

807 
s
++;

808 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

809  
ENAMETOOLONG
;

811 
	`°r˝y
(
buf
, 
s
);

813  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

814 
	}
}

821 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

823 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

824 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

826 i‡(
ev
 =
ef
->
ef_roŸ
) {

833 ()
uio
;

835  
EUNIMP
;

836 
	}
}

843 
	$emufs_mm≠
(
vnode
 *
v
)

845 ()
v
;

846  
EUNIMP
;

847 
	}
}

857 
	$emufs_dú_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

859 ()
v
;

860 ()
pos
;

861  
EUNIMP
;

862 
	}
}

866 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

868 ()
v
;

869 ()
c⁄ã¡s
;

870 ()
«me
;

871  
EUNIMP
;

872 
	}
}

876 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

878 ()
v
;

879 ()
«me
;

880 ()
mode
;

881  
EUNIMP
;

882 
	}
}

886 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

888 ()
v
;

889 ()
«me
;

890 ()
èrgë
;

891  
EUNIMP
;

892 
	}
}

896 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

898 ()
v
;

899 ()
«me
;

900  
EUNIMP
;

901 
	}
}

905 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

907 ()
v
;

908 ()
«me
;

909  
EUNIMP
;

910 
	}
}

914 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

915 
vnode
 *
v2
, c⁄° *
n2
)

917 ()
v1
;

918 ()
n1
;

919 ()
v2
;

920 ()
n2
;

921  
EUNIMP
;

922 
	}
}

941 
	$emufs_void_›_isdú
(
vnode
 *
v
)

943 ()
v
;

944  
EISDIR
;

945 
	}
}

949 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

951 ()
v
;

952 ()
uio
;

953  
EISDIR
;

954 
	}
}

958 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

960 ()
v
;

961 ()
uio
;

962  
ENOTDIR
;

963 
	}
}

967 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

969 ()
v
;

970 ()
«me
;

971  
ENOTDIR
;

972 
	}
}

976 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

978 ()
v
;

979 ()
uio
;

980  
EINVAL
;

981 
	}
}

985 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

986 
vnode
 **
ªtvÆ
)

988 ()
v
;

989 ()
«me
;

990 ()
ex˛
;

991 ()
mode
;

992 ()
ªtvÆ
;

993  
ENOTDIR
;

994 
	}
}

998 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

1000 ()
v
;

1001 ()
c⁄ã¡s
;

1002 ()
«me
;

1003  
ENOTDIR
;

1004 
	}
}

1008 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1010 ()
v
;

1011 ()
«me
;

1012 ()
mode
;

1013  
ENOTDIR
;

1014 
	}
}

1018 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1020 ()
v
;

1021 ()
«me
;

1022 ()
èrgë
;

1023  
ENOTDIR
;

1024 
	}
}

1028 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1029 
vnode
 *
v2
, c⁄° *
n2
)

1031 ()
v1
;

1032 ()
n1
;

1033 ()
v2
;

1034 ()
n2
;

1035  
ENOTDIR
;

1036 
	}
}

1040 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1042 ()
v
;

1043 ()
∑th«me
;

1044 ()
ªsu…
;

1045  
ENOTDIR
;

1046 
	}
}

1050 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1051 *
buf
, 
size_t
 
Àn
)

1053 ()
v
;

1054 ()
∑th«me
;

1055 ()
ªsu…
;

1056 ()
buf
;

1057 ()
Àn
;

1058  
ENOTDIR
;

1059 
	}
}

1064 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1066 ()
v
;

1067 ()
Àn
;

1068  
ENOTDIR
;

1069 
	}
}

1076 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1077 
VOP_MAGIC
,

1079 
emufs_›í
,

1080 
emufs_˛o£
,

1081 
emufs_ª˛aim
,

1083 
emufs_ªad
,

1084 
emufs_ªadlök_nŸlök
,

1085 
emufs_uio_›_nŸdú
,

1086 
emufs_wrôe
,

1087 
emufs_io˘l
,

1088 
emufs_°©
,

1089 
emufs_fûe_gëty≥
,

1090 
emufs_åy£ek
,

1091 
emufs_fsync
,

1092 
emufs_mm≠
,

1093 
emufs_åunˇã
,

1094 
emufs_uio_›_nŸdú
,

1096 
emufs_¸ót_nŸdú
,

1097 
emufs_symlök_nŸdú
,

1098 
emufs_mkdú_nŸdú
,

1099 
emufs_lök_nŸdú
,

1100 
emufs_«me_›_nŸdú
,

1101 
emufs_«me_›_nŸdú
,

1102 
emufs_ª«me_nŸdú
,

1104 
emufs_lookup_nŸdú
,

1105 
emufs_look∑ª¡_nŸdú
,

1111 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1112 
VOP_MAGIC
,

1114 
emufs_›ídú
,

1115 
emufs_˛o£
,

1116 
emufs_ª˛aim
,

1118 
emufs_uio_›_isdú
,

1119 
emufs_uio_›_isdú
,

1120 
emufs_gëdúíåy
,

1121 
emufs_uio_›_isdú
,

1122 
emufs_io˘l
,

1123 
emufs_°©
,

1124 
emufs_dú_gëty≥
,

1125 
emufs_dú_åy£ek
,

1126 
emufs_void_›_isdú
,

1127 
emufs_void_›_isdú
,

1128 
emufs_åunˇã_isdú
,

1129 
emufs_«mefûe
,

1131 
emufs_¸ót
,

1132 
emufs_symlök
,

1133 
emufs_mkdú
,

1134 
emufs_lök
,

1135 
emufs_ªmove
,

1136 
emufs_rmdú
,

1137 
emufs_ª«me
,

1139 
emufs_lookup
,

1140 
emufs_look∑ª¡
,

1148 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1149 
emufs_vnode
 **
ªt
)

1151 
vnode
 *
v
;

1152 
emufs_vnode
 *
ev
;

1153 
i
, 
num
;

1154 
ªsu…
;

1156 
	`vfs_biglock_acquúe
();

1157 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1159 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1160 
i
=0; i<
num
; i++) {

1161 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1162 
ev
 = 
v
->
vn_d©a
;

1163 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1166 
	`VOP_INCREF
(&
ev
->
ev_v
);

1168 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1169 
	`vfs_biglock_ªÀa£
();

1170 *
ªt
 = 
ev
;

1177 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1178 i‡(
ev
==
NULL
) {

1179 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1180  
ENOMEM
;

1183 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1184 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1186 
ªsu…
 = 
	`VOP_INIT
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1187 &
ef
->
ef_fs
, 
ev
);

1188 i‡(
ªsu…
) {

1189 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1190 
	`vfs_biglock_ªÀa£
();

1191 
	`k‰ì
(
ev
);

1192  
ªsu…
;

1195 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1196 i‡(
ªsu…
) {

1198 
	`VOP_CLEANUP
(&
ev
->
ev_v
);

1199 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1200 
	`vfs_biglock_ªÀa£
();

1201 
	`k‰ì
(
ev
);

1202  
ªsu…
;

1205 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1206 
	`vfs_biglock_ªÀa£
();

1208 *
ªt
 = 
ev
;

1210 
	}
}

1225 
	$emufs_sync
(
fs
 *fs)

1227 ()
fs
;

1229 
	}
}

1236 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1239 ()
fs
;

1240  
NULL
;

1241 
	}
}

1247 
vnode
 *

1248 
	$emufs_gëroŸ
(
fs
 *fs)

1250 
emufs_fs
 *
ef
;

1252 
	`KASSERT
(
fs
 !
NULL
);

1254 
ef
 = 
fs
->
fs_d©a
;

1256 
	`KASSERT
(
ef
 !
NULL
);

1257 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1259 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1260  &
ef
->
ef_roŸ
->
ev_v
;

1261 
	}
}

1268 
	$emufs_unmou¡
(
fs
 *fs)

1271 ()
fs
;

1272  
EBUSY
;

1273 
	}
}

1284 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1286 
emufs_fs
 *
ef
;

1287 
ªsu…
;

1289 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1290 i‡(
ef
==
NULL
) {

1291  
ENOMEM
;

1294 
ef
->
ef_fs
.
fs_sync
 = 
emufs_sync
;

1295 
ef
->
ef_fs
.
fs_gëvﬁ«me
 = 
emufs_gëvﬁ«me
;

1296 
ef
->
ef_fs
.
fs_gëroŸ
 = 
emufs_gëroŸ
;

1297 
ef
->
ef_fs
.
fs_unmou¡
 = 
emufs_unmou¡
;

1298 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1300 
ef
->
ef_emu
 = 
sc
;

1301 
ef
->
ef_roŸ
 = 
NULL
;

1302 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1303 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1304 
	`k‰ì
(
ef
);

1305  
ENOMEM
;

1308 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1309 i‡(
ªsu…
) {

1310 
	`k‰ì
(
ef
);

1311  
ªsu…
;

1314 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1316 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1317 i‡(
ªsu…
) {

1318 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1319 
	`k‰ì
(
ef
);

1321  
ªsu…
;

1322 
	}
}

1333 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1335 
«me
[32];

1337 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1338 i‡(
sc
->
e_lock
 =
NULL
) {

1339  
ENOMEM
;

1341 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1342 i‡(
sc
->
e_£m
 =
NULL
) {

1343 
	`lock_de°roy
(
sc
->
e_lock
);

1344 
sc
->
e_lock
 = 
NULL
;

1345  
ENOMEM
;

1347 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1349 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1351  
	`emufs_addtovfs
(
sc
, 
«me
);

1352 
	}
}

	@kern/dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@kern/dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
	#HIGH_VERSION
 1

	)

45 
emu_so·c
 *

46 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

48 
emu_so·c
 *
es
;

49 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

50 
LOW_VERSION
, 
HIGH_VERSION
);

51 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
es
 = 
	`kmÆloc
((
emu_so·c
));

56 i‡(
es
==
NULL
) {

57  
NULL
;

60 
es
->
e_busd©a
 = 
sc
;

61 
es
->
e_bu•os
 = 
¶Ÿ
;

62 
es
->
e_unô
 = 
emuno
;

64 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

65 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

67  
es
;

68 
	}
}

	@kern/dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

39 
	~<œmebus/œmebus.h
>

42 
	#CFGREG_VID
 0

	)

43 
	#CFGREG_DID
 4

	)

44 
	#CFGREG_DRL
 8

	)

47 
	#CTLREG_RAMSZ
 0x200

	)

48 
	#CTLREG_IRQS
 0x204

	)

49 
	#CTLREG_PWR
 0x208

	)

50 
	#CTLREG_IRQE
 0x20c

	)

51 
	#CTLREG_CPUS
 0x210

	)

52 
	#CTLREG_CPUE
 0x214

	)

53 
	#CTLREG_SELF
 0x218

	)

56 
	#CTLCPU_CIRQE
 0x000

	)

57 
	#CTLCPU_CIPI
 0x004

	)

58 
	#CTLCPU_CRAM
 0x300

	)

65 
ölöe


66 
uöt32_t


67 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

70 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

71  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

72 
	}
}

78 
ölöe


80 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

81 
uöt32_t
 
vÆ
)

83 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

84 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

85 
	}
}

91 
ölöe


92 
uöt32_t


93 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

96  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

97 
	}
}

103 
ölöe


105 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

107 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

108 
	}
}

114 
ölöe


116 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

117 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

119 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

120 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

121 
	}
}

127 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

129 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

130 
i
, 
num˝us
, 
boŸ˝u
;

131 
hwnum
[32];

133 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

134 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

136 
num˝us
 = 0;

137 
boŸ˝u
 = 0;

138 
i
=0; i<32; i++) {

139 
bô
 = (
uöt32_t
)1 << 
i
;

140 i‡((
˝umask
 & 
bô
) != 0) {

141 i‡(
£lf
 & 
bô
) {

142 
boŸ˝u
 = 
num˝us
;

143 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

145 
hwnum
[
num˝us
] = 
i
;

146 
num˝us
++;

150 
i
=0; i<
num˝us
; i++) {

151 i‡(
i
 !
boŸ˝u
) {

152 
	`˝u_¸óã
(
hwnum
[
i
]);

162 
i
=0; i<
num˝us
; i++) {

163 i‡(
i
 !
boŸ˝u
) {

164 
vÆ
 = 0;

167 
vÆ
 = 0xffffffff;

169 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

171 
	}
}

184 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

186 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

187 
uöt32_t
 
˘l˝uoff£t
;

188 
uöt32_t
 *
¸am
;

189 
i
;

190 
˝unum
;

192 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

193 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

196 
˝unum
 = 1;

197 
i
=0; i<32; i++) {

198 
bô
 = (
uöt32_t
)1 << 
i
;

199 i‡((
˝umask
 & 
bô
) != 0) {

200 i‡(
£lf
 & 
bô
) {

203 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

204 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

205 
LB_CONTROLLER_SLOT
,

206 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

207 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

208 
¸am
[1] = 
˝unum
++;

213 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

214 
	}
}

228 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

229 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

230 
uöt32_t
 
lowvî
, uöt32_à
highvî
)

232 
¶Ÿ
;

233 
uöt32_t
 
vÆ
;

240 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

242 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

243 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

248 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

249 i‡(
vÆ
!=
víd‹id
) {

254 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

255 i‡(
vÆ
 !
devi˚id
) {

260 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

261 i‡(
vÆ
 < 
lowvî
 || vÆ > 
highvî
) {

268 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

269  
¶Ÿ
;

274 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

276 
	}
}

284 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

286 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

287 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

289 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

291 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

292 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

295 
sc
->
ls_¶Ÿsöu£
 |
mask
;

297 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

298 
	}
}

304 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

306 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

307 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

309 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

311 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

312 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

315 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

317 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

318 
	}
}

325 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

326 *
devd©a
,

327 (*
úqfunc
)(*
devd©a
))

329 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

330 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

332 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

334 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

335 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

336 
¶Ÿ
);

339 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

340 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

342 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

343 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

345 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

346 
	}
}

353 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

367 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

368 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

370 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

371 
	}
}

377 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

379 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

380 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

382 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

383 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

384 
bôs
 &~
mask
;

385 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

386 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

387 
	}
}

390 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

392 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

393 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

395 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

396 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

397 
bôs
 |
mask
;

398 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

399 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

400 
	}
}

407 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

420 
¶Ÿ
;

421 
uöt32_t
 
mask
;

422 
uöt32_t
 
úqs
;

423 (*
h™dÀr
)(*);

424 *
d©a
;

427 
duds
 = 0;

428 
duds_this_time
 = 0;

431 
	`KASSERT
(
œmebus
 !
NULL
);

434 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

440 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

442 i‡(
úqs
 == 0) {

446 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

447 
cur˝u
->
c_numbî
);

448 
duds
++;

449 
duds_this_time
++;

469 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

470 i‡((
úqs
 & 
mask
) == 0) {

479 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

483 
duds
++;

484 
duds_this_time
++;

488 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

493 
duds
++;

494 
duds_this_time
++;

503 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

504 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

505 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

507 
	`h™dÀr
(
d©a
);

509 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

517 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

539 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

540 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

541 
duds
 = 0;

544 i‡(
duds
 > 10000) {

545 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

549 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

550 
	}
}

556 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

562 
	`˝u_úqoff
();

563 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

566 
	`˝u_hÆt
();

567 
	}
}

572 
uöt32_t


573 
	$œmebus_ømsize
()

582  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

583 
	}
}

589 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

591 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

592 
CTLCPU_CIPI
, 1);

593 
	}
}

596 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

598 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

599 
CTLCPU_CIPI
, 0);

600 
	}
}

606 
œmebus_so·c
 *

607 
	$œmebus_öô
()

609 
œmebus_so·c
 *
œmebus
;

610 
i
;

613 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

614 i‡(
œmebus
==
NULL
) {

615 
	`∑nic
("lamebus_init: Out of memory\n");

618 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

623 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

625 
i
=0; i<
LB_NSLOTS
; i++) {

626 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

627 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

630  
œmebus
;

631 
	}
}

	@kern/dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_BUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

58 
	#LB_CONTROLLER_SLOT
 31

	)

61 
	#LB_NSLOTS
 32

	)

64 
	#LB_CONFIG_SIZE
 1024

	)

67 
	#LB_CTLCPU_SIZE
 1024

	)

70 
	#LB_CTLCPU_OFFSET
 32768

	)

73 
	#LB_SLOT_SIZE
 65536

	)

76 (*
	tlb_úqfunc
)(*
	tdevd©a
);

81 
	sœmebus_so·c
 {

82 
•ölock
 
ls_lock
;

85 
uöt32_t
 
ls_¶Ÿsöu£
;

86 *
ls_devd©a
[
LB_NSLOTS
];

87 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

93 
œmebus_so·c
 *
	`œmebus_öô
();

98 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

103 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

112 
	`œmebus_¥obe
(
œmebus_so·c
 *,

113 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

114 
uöt32_t
 
lowvî
, uöt32_à
highvî
);

121 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

122 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

127 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

128 *
devd©a
,

129 (*
úqfunc
)(*
devd©a
));

133 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

138 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

139 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

144 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

149 
	`œmebus_powîoff
(
œmebus_so·c
 *);

154 
size_t
 
	`œmebus_ømsize
();

159 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

160 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

166 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

167 
uöt32_t
 
off£t
);

168 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

169 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

174 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

175 
uöt32_t
 
off£t
);

	@kern/dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<synch.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<vfs.h
>

41 
	~<œmebus/lhd.h
>

42 
	~"autoc⁄f.h
"

45 
	#LHD_REG_NSECT
 0

	)

46 
	#LHD_REG_STAT
 4

	)

47 
	#LHD_REG_SECT
 8

	)

48 
	#LHD_REG_RPM
 12

	)

51 
	#LHD_IDLE
 0

	)

52 
	#LHD_WORKING
 1

	)

53 
	#LHD_OK
 4

	)

54 
	#LHD_INVSECT
 12

	)

55 
	#LHD_MEDIA
 20

	)

56 
	#LHD_ISWRITE
 2

	)

57 
	#LHD_STATEMASK
 0x1d

	)

60 
	#LHD_BUFFER
 32768

	)

66 
ölöe


67 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

69  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

70 
	}
}

76 
ölöe


77 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

79 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

80 
	}
}

86 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

88 
code
 & 
LHD_STATEMASK
) {

89 
LHD_OK
:  0;

90 
LHD_INVSECT
:  
EINVAL
;

91 
LHD_MEDIA
:  
EIO
;

93 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

94  
EAGAIN
;

95 
	}
}

103 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

105 
lh
->
lh_ªsu…
 = 
îr
;

106 
	`V
(
lh
->
lh_d⁄e
);

107 
	}
}

115 
	$lhd_úq
(*
vlh
)

117 
lhd_so·c
 *
lh
 = 
vlh
;

118 
uöt32_t
 
vÆ
;

120 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

122 
vÆ
 & 
LHD_STATEMASK
) {

123 
LHD_IDLE
:

124 
LHD_WORKING
:

126 
LHD_OK
:

127 
LHD_INVSECT
:

128 
LHD_MEDIA
:

129 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

130 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

133 
	}
}

140 
	$lhd_›í
(
devi˚
 *
d
, 
›íÊags
)

145 ()
d
;

146 ()
›íÊags
;

149 
	}
}

156 
	$lhd_˛o£
(
devi˚
 *
d
)

161 ()
d
;

164 
	}
}

171 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

176 ()
d
;

177 ()
›
;

178 ()
d©a
;

179  
EIOCTL
;

180 
	}
}

190 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

192 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

193 
	}
}

201 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

203 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

205 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

206 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

207 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

208 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

209 
uöt32_t
 
i
;

210 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

211 
ªsu…
;

214 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

215  
EINVAL
;

219 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

220  
EINVAL
;

224 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

225 
°©vÆ
 |
LHD_ISWRITE
;

229 
i
=0; i<
Àn
; i++) {

232 
	`P
(
lh
->
lh_˛ór
);

238 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

239 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

240 i‡(
ªsu…
) {

241 
	`V
(
lh
->
lh_˛ór
);

242  
ªsu…
;

247 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

250 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

253 
	`P
(
lh
->
lh_d⁄e
);

256 
ªsu…
 = 
lh
->
lh_ªsu…
;

262 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

263 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

267 
	`V
(
lh
->
lh_˛ór
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

276 
	}
}

282 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

284 
«me
[32];

287 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

290 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

293 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

294 i‡(
lh
->
lh_˛ór
 =
NULL
) {

295  
ENOMEM
;

297 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

298 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

299 
	`£m_de°roy
(
lh
->
lh_˛ór
);

300 
lh
->
lh_˛ór
 = 
NULL
;

301  
ENOMEM
;

305 
lh
->
lh_dev
.
d_›í
 = 
lhd_›í
;

306 
lh
->
lh_dev
.
d_˛o£
 = 
lhd_˛o£
;

307 
lh
->
lh_dev
.
d_io
 = 
lhd_io
;

308 
lh
->
lh_dev
.
d_io˘l
 = 
lhd_io˘l
;

309 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

310 
LHD_REG_NSECT
);

311 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

312 
lh
->
lh_dev
.
d_d©a
 =Üh;

315  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

316 
	}
}

	@kern/dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@kern/dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
	#HIGH_VERSION
 2

	)

44 
lhd_so·c
 *

45 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

47 
lhd_so·c
 *
lh
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

56 i‡(
lh
==
NULL
) {

58  
NULL
;

62 
lh
->
lh_busd©a
 = 
sc
;

63 
lh
->
lh_bu•os
 = 
¶Ÿ
;

64 
lh
->
lh_unô
 = 
lhdno
;

67 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

68 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

70  
lh
;

71 
	}
}

	@kern/dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@kern/dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@kern/dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@kern/dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@kern/dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
Ã™dom_so·c
 *

42 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

44 
Ã™dom_so·c
 *
Ã
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

52 i‡(
Ã
==
NULL
) {

53  
NULL
;

56 ()
Ã™domno
;

58 
Ã
->
Ã_bus
 = 
sc
;

59 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
Ã
;

64 
	}
}

	@kern/dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@kern/dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@kern/dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@kern/dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

47 
	$l£r_úq
(*
vsc
)

49 
l£r_so·c
 *
sc
 = 
vsc
;

50 
uöt32_t
 
x
;

51 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

52 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

53 
uöt32_t
 
ch
 = 0;

55 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

57 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

58 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

59 
x
 = 
LSER_IRQ_ENABLE
;

60 
sc
->
ls_wbusy
 = 0;

61 
˛ór_to_wrôe
 = 
åue
;

62 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

63 
LSER_REG_WIRQ
, 
x
);

66 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

67 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

68 
x
 = 
LSER_IRQ_ENABLE
;

69 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

70 
LSER_REG_CHAR
);

71 
gŸ_a_ªad
 = 
åue
;

72 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

73 
LSER_REG_RIRQ
, 
x
);

76 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

78 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

79 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

81 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

82 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

84 
	}
}

87 
	$l£r_wrôe
(*
vls
, 
ch
)

89 
l£r_so·c
 *
ls
 = 
vls
;

91 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

93 i‡(
ls
->
ls_wbusy
) {

105 
	`∑nic
("lser: Not clearÅo write\n");

107 
ls
->
ls_wbusy
 = 
åue
;

109 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

111 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

112 
	}
}

116 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

118 
uöt32_t
 
vÆ
;

120 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

123 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

124 
LSER_REG_WIRQ
);

126 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

127 
	}
}

130 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

132 
l£r_so·c
 *
sc
 = 
vsc
;

133 
boﬁ
 
úq≥ndög
 = 
Ál£
;

135 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

137 i‡(
sc
->
ls_wbusy
) {

138 
úq≥ndög
 = 
åue
;

139 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

141 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

142 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

146 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

149 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

156 i‡(!
úq≥ndög
) {

157 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

158 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

161 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

162 
	}
}

170 
	$l£r_°¨çﬁlög
(*
vsc
)

172 
l£r_so·c
 *
sc
 = 
vsc
;

173 
sc
->
	`ls_masköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

174 
	}
}

177 
	$l£r_ídpﬁlög
(*
vsc
)

179 
l£r_so·c
 *
sc
 = 
vsc
;

180 
sc
->
	`ls_unmasköãºu±
(sc->
ls_busd©a
, sc->
ls_bu•os
);

181 
	}
}

184 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

186 ()
l£∫o
;

192 
	`•ölock_öô
(&
sc
->
ls_lock
);

193 
sc
->
ls_wbusy
 = 
Ál£
;

195 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

196 
LSER_REG_RIRQ
, 
LSER_IRQ_ENABLE
);

197 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

198 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

201 
	}
}

	@kern/dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

43 (*
	mls_masköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

44 (*
	mls_unmasköãºu±
)(*
	mbusd©a
, 
uöt32_t
 
	mbu•os
);

47 *
	mls_devd©a
;

48 (*
	mls_°¨t
)(*
	mdevd©a
);

49 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

53 
l£r_úq
–*
sc
);

56 
l£r_wrôe
–*
sc
, 
ch
);

57 
l£r_°¨çﬁlög
–*
sc
);

58 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

59 
l£r_ídpﬁlög
–*
sc
);

	@kern/dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

46 
	$do_œmebus_mask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

48 
œmebus_so·c
 *
lb
 = 
bus
;

49 
	`œmebus_mask_öãºu±
(
lb
, 
bu•os
);

50 
	}
}

54 
	$do_œmebus_unmask_öãºu±
(*
bus
, 
uöt32_t
 
bu•os
)

56 
œmebus_so·c
 *
lb
 = 
bus
;

57 
	`œmebus_unmask_öãºu±
(
lb
, 
bu•os
);

58 
	}
}

63 
l£r_so·c
 *

64 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

66 
l£r_so·c
 *
ls
;

67 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

68 
LOW_VERSION
, 
HIGH_VERSION
);

69 i‡(
¶Ÿ
 < 0) {

70  
NULL
;

73 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

74 i‡(
ls
==
NULL
) {

75  
NULL
;

78 ()
l£∫o
;

80 
ls
->
ls_busd©a
 = 
sc
;

81 
ls
->
ls_bu•os
 = 
¶Ÿ
;

82 
ls
->
ls_masköãºu±
 = 
do_œmebus_mask_öãºu±
;

83 
ls
->
ls_unmasköãºu±
 = 
do_œmebus_unmask_öãºu±
;

85 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

86 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

88  
ls
;

89 
	}
}

	@kern/dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 *
n£cs
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(*
n£cs
 < 5000000) {

182 *
£cs
 = 
£cs2
;

185 *
£cs
 = 
£cs1
;

187 
	}
}

	@kern/dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

36 
	s…imî_so·c
 {

38 
	m…_h¨d˛ock
;

39 
	m…_timî˛ock
;

42 *
	m…_bus
;

43 
uöt32_t
 
	m…_bu•os
;

48 
…imî_úq
–*
…
);

51 
…imî_bìp
–*
devd©a
);

52 
…imî_gëtime
–*
devd©a
,

53 
time_t
 *
£cs
, 
uöt32_t
 *
n£cs
);

	@kern/dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
…imî_so·c
 *

45 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

47 
…imî_so·c
 *
…
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
…
 = 
	`kmÆloc
((
…imî_so·c
));

56 i‡(
…
==
NULL
) {

58  
NULL
;

61 ()
…imîno
;

64 
…
->
…_bus
 = 
sc
;

65 
…
->
…_bu•os
 = 
¶Ÿ
;

68 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

69 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

71  
…
;

72 
	}
}

	@kern/dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

42 
…ø˚_so·c
 *
	gthe_åa˚
;

45 
	$…ø˚_⁄
(
uöt32_t
 
code
)

47 i‡(
the_åa˚
 !
NULL
) {

48 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

49 
LTRACE_REG_TRON
, 
code
);

51 
	}
}

54 
	$…ø˚_off
(
uöt32_t
 
code
)

56 i‡(
the_åa˚
 !
NULL
) {

57 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

58 
LTRACE_REG_TROFF
, 
code
);

60 
	}
}

63 
	$…ø˚_debug
(
uöt32_t
 
code
)

65 i‡(
the_åa˚
 !
NULL
) {

66 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

67 
LTRACE_REG_DEBUG
, 
code
);

69 
	}
}

72 
	$…ø˚_dump
(
uöt32_t
 
code
)

74 i‡(
the_åa˚
 !
NULL
) {

75 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

76 
LTRACE_REG_DUMP
, 
code
);

78 
	}
}

81 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

83 ()
…ø˚no
;

84 
the_åa˚
 = 
sc
;

86 
	}
}

	@kern/dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

62 
…ø˚_⁄
(
uöt32_t
 
code
);

63 
…ø˚_off
(
uöt32_t
 
code
);

64 
…ø˚_debug
(
uöt32_t
 
code
);

65 
…ø˚_dump
(
uöt32_t
 
code
);

	@kern/dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#HIGH_VERSION
 1

	)

41 
…ø˚_so·c
 *

42 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

44 
…ø˚_so·c
 *
…
;

45 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

46 
LOW_VERSION
, 
HIGH_VERSION
);

47 i‡(
¶Ÿ
 < 0) {

48  
NULL
;

51 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

52 i‡(
…
==
NULL
) {

53  
NULL
;

56 ()
…ø˚no
;

58 
…
->
…_busd©a
 = 
sc
;

59 
…
->
…_bu•os
 = 
¶Ÿ
;

61 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63  
…
;

64 
	}
}

	@kern/dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@kern/dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@kern/fs/sfs/sfs_fs.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<uio.h
>

42 
	~<vfs.h
>

43 
	~<devi˚.h
>

44 
	~<sfs.h
>

47 
	#SFS_FS_BITMAPSIZE
(
sfs
Ë
	`SFS_BITMAPSIZE
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

48 
	#SFS_FS_BITBLOCKS
(
sfs
Ë
	`SFS_BITBLOCKS
((sfs)->
sfs_su≥r
.
•_nblocks
)

	)

70 
	$sfs_m≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

72 
uöt32_t
 
j
, 
m≠size
;

73 *
bôd©a
;

74 
ªsu…
;

77 
m≠size
 = 
	`SFS_FS_BITBLOCKS
(
sfs
);

80 
bôd©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

83 
j
=0; j<
m≠size
; j++) {

86 *
±r
 = 
bôd©a
 + 
j
*
SFS_BLOCKSIZE
;

89 i‡(
rw
 =
UIO_READ
) {

90 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

93 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
±r
, 
SFS_MAP_LOCATION
+
j
);

97 i‡(
ªsu…
) {

98  
ªsu…
;

102 
	}
}

111 
	$sfs_sync
(
fs
 *fs)

113 
sfs_fs
 *
sfs
;

114 
i
, 
num
;

115 
ªsu…
;

117 
	`vfs_biglock_acquúe
();

149 
sfs
 = 
fs
->
fs_d©a
;

152 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

153 
i
=0; i<
num
; i++) {

154 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

155 
	`VOP_FSYNC
(
v
);

159 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

160 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_WRITE
);

161 i‡(
ªsu…
) {

162 
	`vfs_biglock_ªÀa£
();

163  
ªsu…
;

165 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

169 i‡(
sfs
->
sfs_su≥rdúty
) {

170 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

171 i‡(
ªsu…
) {

172 
	`vfs_biglock_ªÀa£
();

173  
ªsu…
;

175 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

178 
	`vfs_biglock_ªÀa£
();

180 
	}
}

189 
	$sfs_gëvﬁ«me
(
fs
 *fs)

191 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

192 c⁄° *
ªt
;

194 
	`vfs_biglock_acquúe
();

195 
ªt
 = 
sfs
->
sfs_su≥r
.
•_vﬁ«me
;

196 
	`vfs_biglock_ªÀa£
();

198  
ªt
;

199 
	}
}

208 
	$sfs_unmou¡
(
fs
 *fs)

210 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

212 
	`vfs_biglock_acquúe
();

215 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

216 
	`vfs_biglock_ªÀa£
();

217  
EBUSY
;

221 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

222 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

225 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

226 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

229 ()
sfs
->
sfs_devi˚
;

232 
	`k‰ì
(
sfs
);

235 
	`vfs_biglock_ªÀa£
();

237 
	}
}

255 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

257 
ªsu…
;

258 
sfs_fs
 *
sfs
;

260 
	`vfs_biglock_acquúe
();

263 ()
›ti⁄s
;

268 
	`KASSERT
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

269 
	`KASSERT
((
sfs_öode
)==
SFS_BLOCKSIZE
);

270 
	`KASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

280 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

281 
	`vfs_biglock_ªÀa£
();

282  
ENXIO
;

286 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

287 i‡(
sfs
==
NULL
) {

288 
	`vfs_biglock_ªÀa£
();

289  
ENOMEM
;

293 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

294 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

295 
	`k‰ì
(
sfs
);

296 
	`vfs_biglock_ªÀa£
();

297  
ENOMEM
;

301 
sfs
->
sfs_devi˚
 = 
dev
;

304 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &sfs->
sfs_su≥r
, 
SFS_SB_LOCATION
);

305 i‡(
ªsu…
) {

306 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

307 
	`k‰ì
(
sfs
);

308 
	`vfs_biglock_ªÀa£
();

309  
ªsu…
;

314 i‡(
sfs
->
sfs_su≥r
.
•_magic
 !
SFS_MAGIC
) {

315 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

317 
sfs
->
sfs_su≥r
.
•_magic
,

318 
SFS_MAGIC
);

319 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

320 
	`k‰ì
(
sfs
);

321 
	`vfs_biglock_ªÀa£
();

322  
EINVAL
;

325 i‡(
sfs
->
sfs_su≥r
.
•_nblocks
 > 
dev
->
d_blocks
) {

326 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

327 
sfs
->
sfs_su≥r
.
•_nblocks
, 
dev
->
d_blocks
);

331 
sfs
->
sfs_su≥r
.
•_vﬁ«me
[(sfs->sfs_super.sp_volname)-1] = 0;

334 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_BITMAPSIZE
(sfs));

335 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

336 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

337 
	`k‰ì
(
sfs
);

338 
	`vfs_biglock_ªÀa£
();

339  
ENOMEM
;

341 
ªsu…
 = 
	`sfs_m≠io
(
sfs
, 
UIO_READ
);

342 i‡(
ªsu…
) {

343 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

344 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

345 
	`k‰ì
(
sfs
);

346 
	`vfs_biglock_ªÀa£
();

347  
ªsu…
;

351 
sfs
->
sfs_absfs
.
fs_sync
 = 
sfs_sync
;

352 
sfs
->
sfs_absfs
.
fs_gëvﬁ«me
 = 
sfs_gëvﬁ«me
;

353 
sfs
->
sfs_absfs
.
fs_gëroŸ
 = 
sfs_gëroŸ
;

354 
sfs
->
sfs_absfs
.
fs_unmou¡
 = 
sfs_unmou¡
;

355 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

358 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

359 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

362 *
ªt
 = &
sfs
->
sfs_absfs
;

364 
	`vfs_biglock_ªÀa£
();

366 
	}
}

373 
	$sfs_mou¡
(c⁄° *
devi˚
)

375  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

376 
	}
}

	@kern/fs/sfs/sfs_io.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<uio.h
>

34 
	~<vfs.h
>

35 
	~<devi˚.h
>

36 
	~<sfs.h
>

48 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

50 
ªsu…
;

51 
åõs
=0;

53 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

55 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

56 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

57 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

59 
ªåy
:

60 
ªsu…
 = 
sfs
->
sfs_devi˚
->
	`d_io
(sfs->sfs_devi˚, 
uio
);

61 i‡(
ªsu…
 =
EINVAL
) {

67 
	`∑nic
("sfs: d_ioÑeturned EINVAL\n");

69 i‡(
ªsu…
 =
EIO
) {

70 i‡(
åõs
 == 0) {

71 
åõs
++;

72 
	`k¥ötf
("sfs: block %llu I/OÉrror,Ñetrying\n",

73 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

74 
ªåy
;

76 i‡(
åõs
 < 10) {

77 
åõs
++;

78 
ªåy
;

81 
	`k¥ötf
("sfs: block %llu I/OÉrror, giving upáfter "

83 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

86  
ªsu…
;

87 
	}
}

90 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

92 
iovec
 
iov
;

93 
uio
 
ku
;

95 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

96  
	`sfs_rwblock
(
sfs
, &
ku
);

97 
	}
}

100 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
)

102 
iovec
 
iov
;

103 
uio
 
ku
;

105 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

106  
	`sfs_rwblock
(
sfs
, &
ku
);

107 
	}
}

	@kern/fs/sfs/sfs_vnode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<°©.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<bôm≠.h
>

42 
	~<uio.h
>

43 
	~<synch.h
>

44 
	~<vfs.h
>

45 
	~<devi˚.h
>

46 
	~<sfs.h
>

49 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
ty≥
,

50 
sfs_vnode
 **
ªt
);

59 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
block
)

62 
zîos
[
SFS_BLOCKSIZE
];

63  
	`sfs_wblock
(
sfs
, 
zîos
, 
block
);

64 
	}
}

69 
	$sfs_sync_öode
(
sfs_vnode
 *
sv
)

71 i‡(
sv
->
sv_dúty
) {

72 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

73 
ªsu…
 = 
	`sfs_wblock
(
sfs
, &
sv
->
sv_i
, sv->
sv_öo
);

74 i‡(
ªsu…
) {

75  
ªsu…
;

77 
sv
->
sv_dúty
 = 
Ál£
;

80 
	}
}

91 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
uöt32_t
 *
diskblock
)

93 
ªsu…
;

95 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

96 i‡(
ªsu…
) {

97  
ªsu…
;

99 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

101 i‡(*
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

102 
	`∑nic
("sfs: bÆloc: invÆid block %u\n", *
diskblock
);

106  
	`sfs_˛órblock
(
sfs
, *
diskblock
);

107 
	}
}

114 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

116 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

117 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

118 
	}
}

125 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
uöt32_t
 
diskblock
)

127 i‡(
diskblock
 >
sfs
->
sfs_su≥r
.
•_nblocks
) {

128 
	`∑nic
("sfs: sfs_bused called on out ofÑange block %u\n",

129 
diskblock
);

131  
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

132 
	}
}

146 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
dﬂŒoc
,

147 
uöt32_t
 *
diskblock
)

156 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

158 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

159 
uöt32_t
 
block
;

160 
uöt32_t
 
idblock
;

161 
uöt32_t
 
idnum
, 
idoff
;

162 
ªsu…
;

164 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

169 i‡(
fûeblock
 < 
SFS_NDIRECT
) {

173 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
];

178 i‡(
block
==0 && 
dﬂŒoc
) {

179 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

180 i‡(
ªsu…
) {

181  
ªsu…
;

185 
sv
->
sv_i
.
sfi_dúe˘
[
fûeblock
] = 
block
;

186 
sv
->
sv_dúty
 = 
åue
;

192 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

193 
	`∑nic
("sfs: Data block %u (block %u of file %u) "

194 "m¨ked fªe\n", 
block
, 
fûeblock
, 
sv
->
sv_öo
);

196 *
diskblock
 = 
block
;

206 
fûeblock
 -
SFS_NDIRECT
;

209 
idnum
 = 
fûeblock
 / 
SFS_DBPERIDB
;

210 
idoff
 = 
fûeblock
 % 
SFS_DBPERIDB
;

216 i‡(
idnum
 > 0) {

217  
EFBIG
;

221 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

223 i‡(
idblock
==0 && !
dﬂŒoc
) {

229 *
diskblock
 = 0;

232 i‡(
idblock
==0) {

239 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
idblock
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

245 
sv
->
sv_i
.
sfi_ödúe˘
 = 
idblock
;

248 
sv
->
sv_dúty
 = 
åue
;

251 
	`bzîo
(
idbuf
, (idbuf));

257 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

258 i‡(
ªsu…
) {

259  
ªsu…
;

264 
block
 = 
idbuf
[
idoff
];

267 i‡(
block
==0 && 
dﬂŒoc
) {

268 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
);

269 i‡(
ªsu…
) {

270  
ªsu…
;

274 
idbuf
[
idoff
] = 
block
;

277 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

278 i‡(
ªsu…
) {

279  
ªsu…
;

284 i‡(
block
 !0 && !
	`sfs_bu£d
(
sfs
, block)) {

285 
	`∑nic
("sfs: Data block %u (block %u of file %u) marked free\n",

286 
block
, 
fûeblock
, 
sv
->
sv_öo
);

288 *
diskblock
 = 
block
;

290 
	}
}

308 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

309 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

318 
iobuf
[
SFS_BLOCKSIZE
];

320 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

321 
uöt32_t
 
diskblock
;

322 
uöt32_t
 
fûeblock
;

323 
ªsu…
;

326 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

328 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

331 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

334 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

335 i‡(
ªsu…
) {

336  
ªsu…
;

339 i‡(
diskblock
 == 0) {

344 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

345 
	`bzîo
(
iobuf
, (iobuf));

351 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
iobuf
, 
diskblock
);

352 i‡(
ªsu…
) {

353  
ªsu…
;

360 
ªsu…
 = 
	`uiomove
(
iobuf
+
skù°¨t
, 
Àn
, 
uio
);

361 i‡(
ªsu…
) {

362  
ªsu…
;

368 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

369 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
iobuf
, 
diskblock
);

370 i‡(
ªsu…
) {

371  
ªsu…
;

376 
	}
}

383 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

385 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

386 
uöt32_t
 
diskblock
;

387 
uöt32_t
 
fûeblock
;

388 
ªsu…
;

389 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

390 
off_t
 
ßveoff
;

391 
off_t
 
diskoff
;

392 
off_t
 
ßvîes
;

393 
off_t
 
diskªs
;

396 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

399 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

400 i‡(
ªsu…
) {

401  
ªsu…
;

404 i‡(
diskblock
 == 0) {

411 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

412  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

419 
ßveoff
 = 
uio
->
uio_off£t
;

420 
diskoff
 = 
diskblock
 * 
SFS_BLOCKSIZE
;

421 
uio
->
uio_off£t
 = 
diskoff
;

426 
	`KASSERT
(
uio
->
uio_ªsid
 >
SFS_BLOCKSIZE
);

427 
ßvîes
 = 
uio
->
uio_ªsid
;

428 
diskªs
 = 
SFS_BLOCKSIZE
;

429 
uio
->
uio_ªsid
 = 
diskªs
;

431 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, 
uio
);

437 
uio
->
uio_off£t
 = (uio->uio_off£à- 
diskoff
Ë+ 
ßveoff
;

438 
uio
->
uio_ªsid
 = (uio->uio_ªsid - 
diskªs
Ë+ 
ßvîes
;

440  
ªsu…
;

441 
	}
}

448 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

450 
uöt32_t
 
blkoff
;

451 
uöt32_t
 
nblocks
, 
i
;

452 
ªsu…
 = 0;

453 
uöt32_t
 
exå¨esid
 = 0;

460 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

461 
off_t
 
size
 = 
sv
->
sv_i
.
sfi_size
;

462 
off_t
 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

464 i‡(
uio
->
uio_off£t
 >
size
) {

469 i‡(
ídpos
 > 
size
) {

470 
exå¨esid
 = 
ídpos
 - 
size
;

471 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

472 
uio
->
uio_ªsid
 -
exå¨esid
;

479 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

480 i‡(
blkoff
 != 0) {

482 
uöt32_t
 
skù
 = 
blkoff
;

485 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

488 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

489 
Àn
 = 
uio
->
uio_ªsid
;

493 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

494 i‡(
ªsu…
) {

495 
out
;

500 i‡(
uio
->
uio_ªsid
==0) {

501 
out
;

507 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

508 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

509 
i
=0; i<
nblocks
; i++) {

510 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

511 i‡(
ªsu…
) {

512 
out
;

519 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

521 i‡(
uio
->
uio_ªsid
 > 0) {

522 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

523 i‡(
ªsu…
) {

524 
out
;

528 
out
:

531 i‡(
uio
->
uio_rw
 =
UIO_WRITE
 &&

532 
uio
->
uio_off£t
 > (
off_t
)
sv
->
sv_i
.
sfi_size
) {

533 
sv
->
sv_i
.
sfi_size
 = 
uio
->
uio_off£t
;

534 
sv
->
sv_dúty
 = 
åue
;

538 
uio
->
uio_ªsid
 +
exå¨esid
;

541  
ªsu…
;

542 
	}
}

554 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

556 
iovec
 
iov
;

557 
uio
 
ku
;

558 
off_t
 
a˘uÆpos
;

559 
ªsu…
;

562 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

565 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_READ
);

568 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

569 i‡(
ªsu…
) {

570  
ªsu…
;

574 i‡(
ku
.
uio_ªsid
 > 0) {

575 
	`∑nic
("sfs:Ñóddú: Sh‹àíåy (öodê%u)\n", 
sv
->
sv_öo
);

580 
	}
}

588 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
sfs_dú
 *
sd
, 
¶Ÿ
)

590 
iovec
 
iov
;

591 
uio
 
ku
;

592 
off_t
 
a˘uÆpos
;

593 
ªsu…
;

596 
	`KASSERT
(
¶Ÿ
>=0);

597 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dú
);

600 
	`uio_köô
(&
iov
, &
ku
, 
sd
, (
sfs_dú
), 
a˘uÆpos
, 
UIO_WRITE
);

603 
ªsu…
 = 
	`sfs_io
(
sv
, &
ku
);

604 i‡(
ªsu…
) {

605  
ªsu…
;

609 i‡(
ku
.
uio_ªsid
 > 0) {

610 
	`∑nic
("sfs: wrôedú: Sh‹àwrôê(öÿ%u)\n", 
sv
->
sv_öo
);

615 
	}
}

624 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
)

626 
off_t
 
size
;

628 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_DIR
);

630 
size
 = 
sv
->
sv_i
.
sfi_size
;

631 i‡(
size
 % (
sfs_dú
) != 0) {

632 
	`∑nic
("sfs: directory %u: Invalid size %llu\n",

633 
sv
->
sv_öo
, 
size
);

636  
size
 / (
sfs_dú
);

637 
	}
}

647 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

648 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

650 
sfs_dú
 
tsd
;

651 
found
 = 0;

652 
√¡rõs
 = 
	`sfs_dú_√¡rõs
(
sv
);

653 
i
, 
ªsu…
;

656 
i
=0; i<
√¡rõs
; i++) {

659 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, &
tsd
, 
i
);

660 i‡(
ªsu…
) {

661  
ªsu…
;

663 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

665 i‡(
em±y¶Ÿ
 !
NULL
) {

666 *
em±y¶Ÿ
 = 
i
;

671 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

672 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

675 
	`KASSERT
(
found
==0);

677 
found
 = 1;

678 i‡(
¶Ÿ
 !
NULL
) {

679 *
¶Ÿ
 = 
i
;

681 i‡(
öo
 !
NULL
) {

682 *
öo
 = 
tsd
.
sfd_öo
;

688  
found
 ? 0 : 
ENOENT
;

689 
	}
}

697 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

699 
em±y¶Ÿ
 = -1;

700 
ªsu…
;

701 
sfs_dú
 
sd
;

704 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

705 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

706  
ªsu…
;

708 i‡(
ªsu…
==0) {

709  
EEXIST
;

712 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

713  
ENAMETOOLONG
;

717 i‡(
em±y¶Ÿ
 < 0) {

718 
em±y¶Ÿ
 = 
	`sfs_dú_√¡rõs
(
sv
);

722 
	`bzîo
(&
sd
, (sd));

723 
sd
.
sfd_öo
 = 
öo
;

724 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

727 i‡(
¶Ÿ
) {

728 *
¶Ÿ
 = 
em±y¶Ÿ
;

732  
	`sfs_wrôedú
(
sv
, &
sd
, 
em±y¶Ÿ
);

734 
	}
}

741 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

743 
sfs_dú
 
sd
;

746 
	`bzîo
(&
sd
, (sd));

747 
sd
.
sfd_öo
 = 
SFS_NOINO
;

750  
	`sfs_wrôedú
(
sv
, &
sd
, 
¶Ÿ
);

751 
	}
}

759 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

760 
sfs_vnode
 **
ªt
,

761 *
¶Ÿ
)

763 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

764 
uöt32_t
 
öo
;

765 
ªsu…
;

767 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

768 i‡(
ªsu…
) {

769  
ªsu…
;

772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

773 i‡(
ªsu…
) {

774  
ªsu…
;

777 i‡((*
ªt
)->
sv_i
.
sfi_lökcou¡
 == 0) {

778 
	`∑nic
("sfs: Link count of file %u found in dir %u is 0\n",

779 (*
ªt
)->
sv_öo
, 
sv
->sv_ino);

783 
	}
}

794 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

796 
uöt32_t
 
öo
;

797 
ªsu…
;

804 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
);

805 i‡(
ªsu…
) {

806  
ªsu…
;

813  
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

814 
	}
}

825 
	$sfs_›í
(
vnode
 *
v
, 
›íÊags
)

835 i‡(
›íÊags
 & 
O_APPEND
) {

836  
EUNIMP
;

839 ()
v
;

842 
	}
}

850 
	$sfs_›ídú
(
vnode
 *
v
, 
›íÊags
)

852 
›íÊags
 & 
O_ACCMODE
) {

853 
O_RDONLY
:

855 
O_WRONLY
:

856 
O_RDWR
:

858  
EISDIR
;

860 i‡(
›íÊags
 & 
O_APPEND
) {

861  
EISDIR
;

864 ()
v
;

866 
	}
}

876 
	$sfs_˛o£
(
vnode
 *
v
)

879  
	`VOP_FSYNC
(
v
);

880 
	}
}

889 
	$sfs_ª˛aim
(
vnode
 *
v
)

891 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

892 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

893 
ix
, 
i
, 
num
;

894 
ªsu…
;

896 
	`vfs_biglock_acquúe
();

903 i‡(
v
->
vn_ªfcou¡
 != 1) {

906 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

907 
v
->
vn_ªfcou¡
--;

909 
	`vfs_biglock_ªÀa£
();

910  
EBUSY
;

914 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

915 
ªsu…
 = 
	`VOP_TRUNCATE
(&
sv
->
sv_v
, 0);

916 i‡(
ªsu…
) {

917 
	`vfs_biglock_ªÀa£
();

918  
ªsu…
;

923 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

924 i‡(
ªsu…
) {

925 
	`vfs_biglock_ªÀa£
();

926  
ªsu…
;

930 i‡(
sv
->
sv_i
.
sfi_lökcou¡
==0) {

931 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

935 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

936 
ix
 = 
num
;

937 
i
=0; i<
num
; i++) {

938 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

939 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

940 i‡(
sv2
 =
sv
) {

941 
ix
 = 
i
;

945 i‡(
ix
 =
num
) {

946 
	`∑nic
("sfs:Ñeclaim vnode %uÇot in vnodeÖool\n",

947 
sv
->
sv_öo
);

949 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

951 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

953 
	`vfs_biglock_ªÀa£
();

956 
	`k‰ì
(
sv
);

960 
	}
}

967 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

969 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

970 
ªsu…
;

972 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

974 
	`vfs_biglock_acquúe
();

975 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

976 
	`vfs_biglock_ªÀa£
();

978  
ªsu…
;

979 
	}
}

986 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

988 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

989 
ªsu…
;

991 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

993 
	`vfs_biglock_acquúe
();

994 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

995 
	`vfs_biglock_ªÀa£
();

997  
ªsu…
;

998 
	}
}

1005 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

1011 ()
v
;

1012 ()
›
;

1013 ()
d©a
;

1015  
EINVAL
;

1016 
	}
}

1023 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

1025 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1026 
ªsu…
;

1029 
	`bzîo
(
°©buf
, (
°©
));

1031 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

1032 i‡(
ªsu…
) {

1033  
ªsu…
;

1036 
°©buf
->
°_size
 = 
sv
->
sv_i
.
sfi_size
;

1039 
°©buf
->
°_∆ök
 = 0;

1040 
°©buf
->
°_blocks
 = 0;

1045 
	}
}

1052 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

1054 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1056 
	`vfs_biglock_acquúe
();

1058 
sv
->
sv_i
.
sfi_ty≥
) {

1059 
SFS_TYPE_FILE
:

1060 *
ªt
 = 
S_IFREG
;

1061 
	`vfs_biglock_ªÀa£
();

1063 
SFS_TYPE_DIR
:

1064 *
ªt
 = 
S_IFDIR
;

1065 
	`vfs_biglock_ªÀa£
();

1068 
	`∑nic
("sfs: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

1069 
sv
->
sv_öo
, sv->
sv_i
.
sfi_ty≥
);

1070  
EINVAL
;

1071 
	}
}

1082 
	$sfs_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

1084 i‡(
pos
<0) {

1085  
EINVAL
;

1089 ()
v
;

1092 
	}
}

1100 
	$sfs_fsync
(
vnode
 *
v
)

1102 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1103 
ªsu…
;

1105 
	`vfs_biglock_acquúe
();

1106 
ªsu…
 = 
	`sfs_sync_öode
(
sv
);

1107 
	`vfs_biglock_ªÀa£
();

1109  
ªsu…
;

1110 
	}
}

1117 
	$sfs_mm≠
(
vnode
 *
v
 )

1119 ()
v
;

1120  
EUNIMP
;

1121 
	}
}

1128 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

1137 
uöt32_t
 
idbuf
[
SFS_DBPERIDB
];

1139 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1140 
sfs_fs
 *
sfs
 = 
sv
->
sv_v
.
vn_fs
->
fs_d©a
;

1143 
uöt32_t
 
blockÀn
 = 
	`DIVROUNDUP
(
Àn
, 
SFS_BLOCKSIZE
);

1145 
uöt32_t
 
i
, 
j
, 
block
;

1146 
uöt32_t
 
idblock
, 
ba£block
, 
highblock
;

1147 
ªsu…
;

1148 
ha¢⁄zîo
, 
iddúty
;

1150 
	`KASSERT
((
idbuf
)==
SFS_BLOCKSIZE
);

1152 
	`vfs_biglock_acquúe
();

1158 
i
=0; i<
SFS_NDIRECT
; i++) {

1159 
block
 = 
sv
->
sv_i
.
sfi_dúe˘
[
i
];

1160 i‡(
i
 >
blockÀn
 && 
block
 != 0) {

1161 
	`sfs_b‰ì
(
sfs
, 
block
);

1162 
sv
->
sv_i
.
sfi_dúe˘
[
i
] = 0;

1163 
sv
->
sv_dúty
 = 
åue
;

1168 
idblock
 = 
sv
->
sv_i
.
sfi_ödúe˘
;

1171 
ba£block
 = 
SFS_NDIRECT
;

1174 
highblock
 = 
ba£block
 + 
SFS_DBPERIDB
 - 1;

1176 i‡(
blockÀn
 < 
highblock
 && 
idblock
 != 0) {

1180 
ªsu…
 = 
	`sfs_rblock
(
sfs
, 
idbuf
, 
idblock
);

1181 i‡(
ªsu…
) {

1182 
	`vfs_biglock_ªÀa£
();

1183  
ªsu…
;

1186 
ha¢⁄zîo
 = 0;

1187 
iddúty
 = 0;

1188 
j
=0; j<
SFS_DBPERIDB
; j++) {

1190 i‡(
blockÀn
 < 
ba£block
+
j
 && 
idbuf
[j] != 0) {

1191 
	`sfs_b‰ì
(
sfs
, 
idbuf
[
j
]);

1192 
idbuf
[
j
] = 0;

1193 
iddúty
 = 1;

1196 i‡(
idbuf
[
j
]!=0) {

1197 
ha¢⁄zîo
=1;

1201 i‡(!
ha¢⁄zîo
) {

1203 
	`sfs_b‰ì
(
sfs
, 
idblock
);

1204 
sv
->
sv_i
.
sfi_ödúe˘
 = 0;

1205 
sv
->
sv_dúty
 = 
åue
;

1207 i‡(
iddúty
) {

1209 
ªsu…
 = 
	`sfs_wblock
(
sfs
, 
idbuf
, 
idblock
);

1210 i‡(
ªsu…
) {

1211 
	`vfs_biglock_ªÀa£
();

1212  
ªsu…
;

1218 
sv
->
sv_i
.
sfi_size
 = 
Àn
;

1221 
sv
->
sv_dúty
 = 
åue
;

1223 
	`vfs_biglock_ªÀa£
();

1225 
	}
}

1235 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

1237 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

1238 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1242 ()
uio
;

1245 
	}
}

1253 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

1254 
vnode
 **
ªt
)

1256 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

1257 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1258 
sfs_vnode
 *
√wguy
;

1259 
uöt32_t
 
öo
;

1260 
ªsu…
;

1262 
	`vfs_biglock_acquúe
();

1265 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

1266 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

1267 
	`vfs_biglock_ªÀa£
();

1268  
ªsu…
;

1272 i‡(
ªsu…
==0 && 
ex˛
) {

1273 
	`vfs_biglock_ªÀa£
();

1274  
EEXIST
;

1277 i‡(
ªsu…
==0) {

1279 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

1280 i‡(
ªsu…
) {

1281 
	`vfs_biglock_ªÀa£
();

1282  
ªsu…
;

1284 *
ªt
 = &
√wguy
->
sv_v
;

1285 
	`vfs_biglock_ªÀa£
();

1290 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

1291 i‡(
ªsu…
) {

1292 
	`vfs_biglock_ªÀa£
();

1293  
ªsu…
;

1297 ()
mode
;

1300 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

1301 i‡(
ªsu…
) {

1302 
	`VOP_DECREF
(&
√wguy
->
sv_v
);

1303 
	`vfs_biglock_ªÀa£
();

1304  
ªsu…
;

1308 
√wguy
->
sv_i
.
sfi_lökcou¡
++;

1311 
√wguy
->
sv_dúty
 = 
åue
;

1313 *
ªt
 = &
√wguy
->
sv_v
;

1315 
	`vfs_biglock_ªÀa£
();

1317 
	}
}

1326 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

1328 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1329 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

1330 
ªsu…
;

1332 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

1334 
	`vfs_biglock_acquúe
();

1337 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

1338 i‡(
ªsu…
) {

1339 
	`vfs_biglock_ªÀa£
();

1340  
ªsu…
;

1344 
f
->
sv_i
.
sfi_lökcou¡
++;

1345 
f
->
sv_dúty
 = 
åue
;

1347 
	`vfs_biglock_ªÀa£
();

1349 
	}
}

1356 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

1358 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

1359 
sfs_vnode
 *
vi˘im
;

1360 
¶Ÿ
;

1361 
ªsu…
;

1363 
	`vfs_biglock_acquúe
();

1366 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

1367 i‡(
ªsu…
) {

1368 
	`vfs_biglock_ªÀa£
();

1369  
ªsu…
;

1373 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1374 i‡(
ªsu…
==0) {

1376 
	`KASSERT
(
vi˘im
->
sv_i
.
sfi_lökcou¡
 > 0);

1377 
vi˘im
->
sv_i
.
sfi_lökcou¡
--;

1378 
vi˘im
->
sv_dúty
 = 
åue
;

1382 
	`VOP_DECREF
(&
vi˘im
->
sv_v
);

1384 
	`vfs_biglock_ªÀa£
();

1385  
ªsu…
;

1386 
	}
}

1396 
	$sfs_ª«me
(
vnode
 *
d1
, c⁄° *
n1
,

1397 
vnode
 *
d2
, c⁄° *
n2
)

1399 
sfs_vnode
 *
sv
 = 
d1
->
vn_d©a
;

1400 
sfs_vnode
 *
g1
;

1401 
¶Ÿ1
, 
¶Ÿ2
;

1402 
ªsu…
, 
ªsu…2
;

1404 
	`vfs_biglock_acquúe
();

1406 
	`KASSERT
(
d1
==
d2
);

1407 
	`KASSERT
(
sv
->
sv_öo
 =
SFS_ROOT_LOCATION
);

1410 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
n1
, &
g1
, &
¶Ÿ1
);

1411 i‡(
ªsu…
) {

1412 
	`vfs_biglock_ªÀa£
();

1413  
ªsu…
;

1417 
	`KASSERT
(
g1
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

1427 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
n2
, 
g1
->
sv_öo
, &
¶Ÿ2
);

1428 i‡(
ªsu…
) {

1429 
puke
;

1433 
g1
->
sv_i
.
sfi_lökcou¡
++;

1434 
g1
->
sv_dúty
 = 
åue
;

1437 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ1
);

1438 i‡(
ªsu…
) {

1439 
puke_h¨dî
;

1446 
	`KASSERT
(
g1
->
sv_i
.
sfi_lökcou¡
>0);

1447 
g1
->
sv_i
.
sfi_lökcou¡
--;

1448 
g1
->
sv_dúty
 = 
åue
;

1451 
	`VOP_DECREF
(&
g1
->
sv_v
);

1453 
	`vfs_biglock_ªÀa£
();

1456 
puke_h¨dî
:

1460 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ2
);

1461 i‡(
ªsu…2
) {

1462 
	`k¥ötf
("sfs:Ñíame: %s\n", 
	`°ªº‹
(
ªsu…
));

1463 
	`k¥ötf
("sfs:Ñename: while cleaning up: %s\n",

1464 
	`°ªº‹
(
ªsu…2
));

1465 
	`∑nic
("sfs:Ñename: CannotÑecover\n");

1467 
g1
->
sv_i
.
sfi_lökcou¡
--;

1468 
puke
:

1470 
	`VOP_DECREF
(&
g1
->
sv_v
);

1471 
	`vfs_biglock_ªÀa£
();

1472  
ªsu…
;

1473 
	}
}

1484 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1485 *
buf
, 
size_t
 
buÊí
)

1487 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1489 
	`vfs_biglock_acquúe
();

1491 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1492 
	`vfs_biglock_ªÀa£
();

1493  
ENOTDIR
;

1496 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1497 
	`vfs_biglock_ªÀa£
();

1498  
ENAMETOOLONG
;

1500 
	`°r˝y
(
buf
, 
∑th
);

1502 
	`VOP_INCREF
(&
sv
->
sv_v
);

1503 *
ªt
 = &
sv
->
sv_v
;

1505 
	`vfs_biglock_ªÀa£
();

1507 
	}
}

1517 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1519 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1520 
sfs_vnode
 *
föÆ
;

1521 
ªsu…
;

1523 
	`vfs_biglock_acquúe
();

1525 i‡(
sv
->
sv_i
.
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1526 
	`vfs_biglock_ªÀa£
();

1527  
ENOTDIR
;

1530 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
föÆ
, 
NULL
);

1531 i‡(
ªsu…
) {

1532 
	`vfs_biglock_ªÀa£
();

1533  
ªsu…
;

1536 *
ªt
 = &
föÆ
->
sv_v
;

1538 
	`vfs_biglock_ªÀa£
();

1540 
	}
}

1546 
	$sfs_nŸdú
()

1548  
ENOTDIR
;

1549 
	}
}

1553 
	$sfs_isdú
()

1555  
EISDIR
;

1556 
	}
}

1560 
	$sfs_unimp
()

1562  
EUNIMP
;

1563 
	}
}

1571 
	#ISDIR
 ((*)
sfs_isdú
)

	)

1572 
	#NOTDIR
 ((*)
sfs_nŸdú
)

	)

1573 
	#UNIMP
 ((*)
sfs_unimp
)

	)

1578 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1579 
VOP_MAGIC
,

1581 
sfs_›í
,

1582 
sfs_˛o£
,

1583 
sfs_ª˛aim
,

1585 
sfs_ªad
,

1586 
NOTDIR
,

1587 
NOTDIR
,

1588 
sfs_wrôe
,

1589 
sfs_io˘l
,

1590 
sfs_°©
,

1591 
sfs_gëty≥
,

1592 
sfs_åy£ek
,

1593 
sfs_fsync
,

1594 
sfs_mm≠
,

1595 
sfs_åunˇã
,

1596 
NOTDIR
,

1598 
NOTDIR
,

1599 
NOTDIR
,

1600 
NOTDIR
,

1601 
NOTDIR
,

1602 
NOTDIR
,

1603 
NOTDIR
,

1604 
NOTDIR
,

1606 
NOTDIR
,

1607 
NOTDIR
,

1613 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1614 
VOP_MAGIC
,

1616 
sfs_›ídú
,

1617 
sfs_˛o£
,

1618 
sfs_ª˛aim
,

1620 
ISDIR
,

1621 
ISDIR
,

1622 
UNIMP
,

1623 
ISDIR
,

1624 
sfs_io˘l
,

1625 
sfs_°©
,

1626 
sfs_gëty≥
,

1627 
UNIMP
,

1628 
sfs_fsync
,

1629 
ISDIR
,

1630 
ISDIR
,

1631 
sfs_«mefûe
,

1633 
sfs_¸ót
,

1634 
UNIMP
,

1635 
UNIMP
,

1636 
sfs_lök
,

1637 
sfs_ªmove
,

1638 
UNIMP
,

1639 
sfs_ª«me
,

1641 
sfs_lookup
,

1642 
sfs_look∑ª¡
,

1651 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

1652 
sfs_vnode
 **
ªt
)

1654 
vnode
 *
v
;

1655 
sfs_vnode
 *
sv
;

1656 c⁄° 
vnode_›s
 *
›s
 = 
NULL
;

1657 
i
, 
num
;

1658 
ªsu…
;

1661 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

1664 
i
=0; i<
num
; i++) {

1665 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

1666 
sv
 = 
v
->
vn_d©a
;

1669 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

1670 
	`∑nic
("sfs: Found inode %u in unallocated block\n",

1671 
sv
->
sv_öo
);

1674 i‡(
sv
->
sv_öo
==
öo
) {

1678 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

1680 
	`VOP_INCREF
(&
sv
->
sv_v
);

1681 *
ªt
 = 
sv
;

1688 
sv
 = 
	`kmÆloc
((
sfs_vnode
));

1689 i‡(
sv
==
NULL
) {

1690  
ENOMEM
;

1694 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

1695 
	`∑nic
("sfs: TriedÅoÜoad inode %u from unallocated block\n",

1696 
öo
);

1700 
ªsu…
 = 
	`sfs_rblock
(
sfs
, &
sv
->
sv_i
, 
öo
);

1701 i‡(
ªsu…
) {

1702 
	`k‰ì
(
sv
);

1703  
ªsu…
;

1707 
sv
->
sv_dúty
 = 
Ál£
;

1714 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

1715 
	`KASSERT
(
sv
->
sv_i
.
sfi_ty≥
 =
SFS_TYPE_INVAL
);

1716 
sv
->
sv_i
.
sfi_ty≥
 = 
f‹˚ty≥
;

1717 
sv
->
sv_dúty
 = 
åue
;

1723 
sv
->
sv_i
.
sfi_ty≥
) {

1724 
SFS_TYPE_FILE
:

1725 
›s
 = &
sfs_fûe›s
;

1727 
SFS_TYPE_DIR
:

1728 
›s
 = &
sfs_dú›s
;

1731 
	`∑nic
("sfs:Üoadvnode: Invalid inodeÅype "

1733 
öo
, 
sv
->
sv_i
.
sfi_ty≥
);

1737 
ªsu…
 = 
	`VOP_INIT
(&
sv
->
sv_v
, 
›s
, &
sfs
->
sfs_absfs
, sv);

1738 i‡(
ªsu…
) {

1739 
	`k‰ì
(
sv
);

1740  
ªsu…
;

1744 
sv
->
sv_öo
 = 
öo
;

1747 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_v
, 
NULL
);

1748 i‡(
ªsu…
) {

1749 
	`VOP_CLEANUP
(&
sv
->
sv_v
);

1750 
	`k‰ì
(
sv
);

1751  
ªsu…
;

1755 *
ªt
 = 
sv
;

1757 
	}
}

1763 
vnode
 *

1764 
	$sfs_gëroŸ
(
fs
 *fs)

1766 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

1767 
sfs_vnode
 *
sv
;

1768 
ªsu…
;

1770 
	`vfs_biglock_acquúe
();

1772 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOT_LOCATION
, 
SFS_TYPE_INVAL
, &
sv
);

1773 i‡(
ªsu…
) {

1774 
	`∑nic
("sfs: getroot: CannotÜoadÑoot vnode\n");

1777 
	`vfs_biglock_ªÀa£
();

1779  &
sv
->
sv_v
;

1780 
	}
}

	@kern/include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

39 
	~"›t-A3.h
"

40 
	gvnode
;

50 
	saddr•a˚
 {

51 
vaddr_t
 
	mas_vba£1
;

52 
∑ddr_t
 
	mas_pba£1
;

53 
size_t
 
	mas_≈ages1
;

54 
vaddr_t
 
	mas_vba£2
;

55 
∑ddr_t
 
	mas_pba£2
;

56 
size_t
 
	mas_≈ages2
;

57 
∑ddr_t
 
	mas_°ackpba£
;

58 #i‡
OPT_A3


59 
boﬁ
 
	mas_gŸ
;

99 
addr•a˚
 *
as_¸óã
();

100 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

101 
as_a˘iv©e
();

102 
as_dó˘iv©e
();

103 
as_de°roy
(
addr•a˚
 *);

105 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

106 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

107 
ªadabÀ
,

108 
wrôóbÀ
,

109 
execuèbÀ
);

110 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

111 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

112 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

122 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@kern/include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 #ifde‡
UW


34 
	~<lib.h
>

37 
	#ARRAYS_CHECKED


	)

39 #ifde‡
ARRAYS_CHECKED


40 
	#ARRAYASSERT
 
KASSERT


	)

42 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

65 
	s¨øy
 {

66 **
	mv
;

67 
	mnum
, 
	mmax
;

70 
¨øy
 *
¨øy_¸óã
();

71 
¨øy_de°roy
(
¨øy
 *);

72 
¨øy_öô
(
¨øy
 *);

73 
¨øy_˛ónup
(
¨øy
 *);

74 
¨øy_num
(c⁄° 
¨øy
 *);

75 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

76 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

77 
¨øy_£tsize
(
¨øy
 *, 
num
);

78 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

79 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

85 #i‚de‡
ARRAYINLINE


86 
	#ARRAYINLINE
 
INLINE


	)

89 
ARRAYINLINE
 

90 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

92  
a
->
num
;

93 
	}
}

95 
ARRAYINLINE
 *

96 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

98 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

99  
a
->
v
[
ödex
];

100 
	}
}

102 
ARRAYINLINE
 

103 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

105 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

106 
a
->
v
[
ödex
] = 
vÆ
;

107 
	}
}

109 
ARRAYINLINE
 

110 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

112 
ödex
;

113 
ªt
;

115 
ödex
 = 
a
->
num
;

116 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

117 i‡(
ªt
) {

118  
ªt
;

120 
a
->
v
[
ödex
] = 
vÆ
;

121 i‡(
ödex_ªt
 !
NULL
) {

122 *
ödex_ªt
 = 
ödex
;

125 
	}
}

166 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
) \

167 
	sARRAY
 { \

168 
¨øy
 
¨r
; \

171 
ARRAY
 *ARRAY##
	`_¸óã
(); \

172 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

173 
ARRAY
##
	`_öô
(ARRAY *
a
); \

174 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

175 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

176 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

177 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

178 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

179 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

180 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

182 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

183 
INLINE
 
ARRAY
 * \

184 
ARRAY
##
	`_¸óã
() \

186 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

187 i‡(
a
 =
NULL
) { \

188  
NULL
; \

190 
	`¨øy_öô
(&
a
->
¨r
); \

191  
a
; \

194 
INLINE
 \

195 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

197 
	`¨øy_˛ónup
(&
a
->
¨r
); \

198 
	`k‰ì
(
a
); \

201 
INLINE
 \

202 
ARRAY
##
	`_öô
(ARRAY *
a
) \

204 
	`¨øy_öô
(&
a
->
¨r
); \

207 
INLINE
 \

208 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

210 
	`¨øy_˛ónup
(&
a
->
¨r
); \

213 
INLINE
 \

214 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

216  
	`¨øy_num
(&
a
->
¨r
); \

219 
INLINE
 
T
 * \

220 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

222  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

225 
INLINE
 \

226 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

228 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

231 
INLINE
 \

232 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

234  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

237 
INLINE
 \

238 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

240  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

243 
INLINE
 \

244 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

246  
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

247 }

	)

249 
	#DECLARRAY
(
T
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T)

	)

250 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

256 
DECLARRAY_BYTYPE
(
°rög¨øy
, );

257 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@kern/include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@kern/include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 #ifde‡
__GNUC__


49 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

51 
	#__PF
(
a
,
b
)

	)

114 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

116 
	#INLINE
 
ölöe


	)

118 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

120 
	#INLINE
 
ölöe


	)

124 
	#INLINE
 
ölöe


	)

	@kern/include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

33 
	~"›t-synch¥obs.h
"

51 #i‡
OPT_SYNCHPROBS


53 
	#HZ
 10000

	)

56 
	#HZ
 100

	)

59 
h¨d˛ock_boŸ°øp
();

61 
h¨d˛ock
();

62 
timî˛ock
();

64 
gëtime
(
time_t
 *
£c⁄ds
, 
uöt32_t
 *
«no£c⁄ds
);

66 
gëöãrvÆ
(
time_t
 
£cs1
, 
uöt32_t
 
n£cs
,

67 
time_t
 
£cs2
, 
uöt32_t
 
n£cs2
,

68 
time_t
 *
r£cs
, 
uöt32_t
 *
∫£cs
);

74 
˛ock¶ìp
(
£c⁄ds
);

	@kern/include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@kern/include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

68 
boﬁ
 
	mc_isidÀ
;

69 
thªadli°
 
	mc_runqueue
;

70 
•ölock
 
	mc_runqueue_lock
;

86 
uöt32_t
 
	mc_ùi_≥ndög
;

87 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

88 
	mc_numshoŸdown
;

89 
•ölock
 
	mc_ùi_lock
;

92 
	#TLBSHOOTDOWN_ALL
 (-1)

	)

107 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

108 
˝u_machdï_öô
(
˝u
 *);

109  
˝u_°¨t_£c⁄d¨y
();

110 
˝u_h©ch
(
so·w¨e_numbî
);

115 c⁄° *
˝u_idítify
();

122 
˝u_úqoff
();

123 
˝u_úq⁄
();

139 
˝u_idÀ
();

140 
˝u_hÆt
();

161 
	#IPI_PANIC
 0

	)

162 
	#IPI_OFFLINE
 1

	)

163 
	#IPI_UNIDLE
 2

	)

164 
	#IPI_TLBSHOOTDOWN
 3

	)

166 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

167 
ùi_brﬂdˇ°
(
code
);

168 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

170 
öãΩro˚ss‹_öãºu±
();

	@kern/include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

42 
	~<machöe/cuºít.h
>

44 #i‡
deföed
(
__NEED_CURTHREAD
)

46 
	~<˝u.h
>

47 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

48 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

52 #i‡
deföed
(
__NEED_CURCPU
)

54 
	~<thªad.h
>

55 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

56 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

66 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@kern/include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

44 
	sdevi˚
 {

45 (*
	md_›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

46 (*
	md_˛o£
)(
	mdevi˚
 *);

47 (*
	md_io
)(
	mdevi˚
 *, 
	muio
 *);

48 (*
	md_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

50 
blk˙t_t
 
	md_blocks
;

51 
blksize_t
 
	md_blocksize
;

53 
dev_t
 
	md_devnumbî
;

55 *
	md_d©a
;

59 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

63 
devnuŒ_¸óã
();

66 
dev_boŸ°øp
();

	@kern/include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@kern/include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@kern/include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@kern/include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

64 
	sfs
 {

65 (*
	mfs_sync
)(
	mfs
 *);

66 c⁄° *(*
	mfs_gëvﬁ«me
)(
	mfs
 *);

67 
	mvnode
 *(*
	mfs_gëroŸ
)(
	mfs
 *);

68 (*
	mfs_unmou¡
)(
	mfs
 *);

70 *
	mfs_d©a
;

76 
	#FSOP_SYNC
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

77 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
	`fs_gëvﬁ«me
(fs))

	)

78 
	#FSOP_GETROOT
(
fs
Ë((fs)->
	`fs_gëroŸ
(fs))

	)

79 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

	@kern/include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@kern/include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@kern/include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

46 
	#EUNIMP
 2

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@kern/include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@kern/include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@kern/include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@kern/include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

54 
	#__NAME_MAX
 255

	)

57 
	#__PATH_MAX
 1024

	)

60 
	#__ARG_MAX
 (64 * 1024)

	)

68 
	#__PID_MIN
 2

	)

71 
	#__PID_MAX
 32767

	)

74 
	#__PIPE_BUF
 512

	)

85 
	#__NGROUPS_MAX
 32

	)

88 
	#__LOGIN_NAME_MAX
 17

	)

99 
	#__OPEN_MAX
 128

	)

102 
	#__IOV_MAX
 1024

	)

	@kern/include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@kern/include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@kern/include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@kern/include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_DBPERIDB
 128

	)

44 
	#SFS_NAMELEN
 60

	)

45 
	#SFS_SB_LOCATION
 0

	)

46 
	#SFS_ROOT_LOCATION
 1

	)

47 
	#SFS_MAP_LOCATION
 2

	)

48 
	#SFS_NOINO
 0

	)

51 
	#SFS_BLOCKBITS
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

54 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

57 
	#SFS_BITMAPSIZE
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BLOCKBITS
)

	)

60 
	#SFS_BITBLOCKS
(
nblocks
Ë(
	`SFS_BITMAPSIZE
“blocks)/
SFS_BLOCKBITS
)

	)

63 
	#SFS_TYPE_INVAL
 0

	)

64 
	#SFS_TYPE_FILE
 1

	)

65 
	#SFS_TYPE_DIR
 2

	)

70 
	ssfs_su≥r
 {

71 
uöt32_t
 
	m•_magic
;

72 
uöt32_t
 
	m•_nblocks
;

73 
	m•_vﬁ«me
[
SFS_VOLNAME_SIZE
];

74 
uöt32_t
 
	mª£rved
[118];

80 
	ssfs_öode
 {

81 
uöt32_t
 
	msfi_size
;

82 
uöt16_t
 
	msfi_ty≥
;

83 
uöt16_t
 
	msfi_lökcou¡
;

84 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

85 
uöt32_t
 
	msfi_ödúe˘
;

86 
uöt32_t
 
	msfi_wa°e
[128-3-
SFS_NDIRECT
];

92 
	ssfs_dú
 {

93 
uöt32_t
 
	msfd_öo
;

94 
	msfd_«me
[
SFS_NAMELEN
];

	@kern/include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@kern/include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@kern/include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@kern/include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@kern/include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@kern/include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@kern/include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@kern/include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@kern/include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@kern/include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SFS
 0x0100

	)

88 
	#DB_NET
 0x0200

	)

89 
	#DB_NETFS
 0x0400

	)

90 
	#DB_KMALLOC
 0x0800

	)

91 
	#DB_SYNCPROB
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

126 *
kmÆloc
(
size_t
 
size
);

127 
k‰ì
(*
±r
);

128 
khóp_¥öt°©s
();

136 
size_t
 
°æí
(c⁄° *
°r
);

137 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

138 *
°r˝y
(*
de°
, c⁄° *
§c
);

139 *
°rˇt
(*
de°
, c⁄° *
§c
);

140 *
k°rdup
(c⁄° *
°r
);

141 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

142 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

143 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

145 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

146 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

147 
bzîo
(*
±r
, 
size_t
 
Àn
);

148 
©oi
(c⁄° *
°r
);

150 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

152 c⁄° *
	`°ªº‹
(
îrcode
);

161 
	`putch
(
ch
);

162 
	`putch_¥ï¨e
();

163 
	`putch_com∂ëe
();

164 
	`gëch
();

165 
	`bìp
();

180 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

181 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
);

184 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

186 
	`k¥ötf_boŸ°øp
();

192 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

193 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*b)

	)

	@kern/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

43 
	#NAME_MAX
 
__NAME_MAX


	)

44 
	#PATH_MAX
 
__PATH_MAX


	)

45 
	#ARG_MAX
 
__ARG_MAX


	)

46 
	#PID_MIN
 
__PID_MIN


	)

47 
	#PID_MAX
 
__PID_MAX


	)

48 
	#PIPE_BUF
 
__PIPE_BUF


	)

49 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

50 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

51 
	#OPEN_MAX
 
__OPEN_MAX


	)

52 
	#IOV_MAX
 
__IOV_MAX


	)

	@kern/include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@kern/include/pid.h

1 #i‚de‡
_PID_H_


2 
	#_PID_H_


	)

4 
	~"›t-A2.h
"

5 #i‡
OPT_A2


6 
	~<ty≥s.h
>

7 
	~<kîn/î∫o.h
>

8 
	~<limôs.h
>

9 
	~<kîn/waô.h
>

10 
	~<¨øy.h
>

11 
	~<¥oc.h
>

12 
	~<mùs/å≠‰ame.h
>

13 
	~<synch.h
>

14 
	~<addr•a˚.h
>

15 
	~<sysˇŒ.h
>

25 
	spidöfo


27 
pid_t
 
	mpid
;

28 
pid_t
 
	mµid
;

29 
	mexôcode
;

30 
boﬁ
 
	m˚xôed
;

31 
boﬁ
 
	m≥xôed
;

35 
pidöfo
 *
pidöfo_¸óã
(
pid_t
 
pid
,Öid_à
µid
);

36 
pid_boŸ°øp
();

37 
pid_check_pid
(
¥oc
 *proc);

38 
boﬁ
 
pid_waô
(
¥oc
 *¥oc, 
pid_t
 
pid
, *
exô°©us
, *
ªsu…
);

39 
pid_exô
(
¥oc
 *¥oc, 
exôcode
);

40 
pid_f‹k
(
å≠‰ame
 *
tf
, 
pid_t
 *
ªtvÆ
, 
¥oc
 *proc);

	@kern/include/proc.h

30 #i‚de‡
_PROC_H_


31 
	#_PROC_H_


	)

39 
	~<•ölock.h
>

40 
	~<thªad.h
>

42 
	~"›t-A2.h
"

44 
	gaddr•a˚
;

45 
	gvnode
;

46 #ifde‡
UW


47 
	g£m≠h‹e
;

53 
	s¥oc
 {

54 *
	mp_«me
;

55 
•ölock
 
	mp_lock
;

56 
thªad¨øy
 
	mp_thªads
;

59 
addr•a˚
 *
	mp_addr•a˚
;

62 
vnode
 *
	mp_cwd
;

64 #ifde‡
UW


70 
vnode
 *
	mc⁄sﬁe
;

75 #i‡
OPT_A2


76 
pid_t
 
	mpid
;

82 
¥oc
 *
k¥oc
;

85 #ifde‡
UW


86 
£m≠h‹e
 *
no_¥oc_£m
;

90 
¥oc_boŸ°øp
();

93 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

96 
¥oc_de°roy
(
¥oc
 *proc);

99 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

102 
¥oc_ªmthªad
(
thªad
 *
t
);

105 
addr•a˚
 *
cuΩroc_gëas
();

108 
addr•a˚
 *
cuΩroc_£ès
(addrspace *);

	@kern/include/queue.h

1 #i‚de‡
_QUEUE_H_


2 
	#_QUEUE_H_


	)

26 
	gqueue
;

28 
queue
 *
q_¸óã
(
size
);

29 
q_¥óŒoˇã
(
queue
 *, 
size
);

30 
q_em±y
(
queue
 *);

31 
q_addèû
(
queue
 *, *
±r
);

32 *
q_ªmhód
(
queue
 *);

33 
q_de°roy
(
queue
 *);

34 *
q_≥ek
(
queue
 *
q
);

35 
q_Àn
(
queue
 *
theq
);

57 
q_gë°¨t
(
queue
 *);

58 
q_gëíd
(
queue
 *);

59 
q_gësize
(
queue
 *);

60 *
q_gëguy
(
queue
 *, 
ödex
);

	@kern/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@kern/include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	~<kîn/sfs.h
>

51 
	ssfs_vnode
 {

52 
vnode
 
	msv_v
;

53 
sfs_öode
 
	msv_i
;

54 
uöt32_t
 
	msv_öo
;

55 
boﬁ
 
	msv_dúty
;

58 
	ssfs_fs
 {

59 
fs
 
	msfs_absfs
;

60 
sfs_su≥r
 
	msfs_su≥r
;

61 
boﬁ
 
	msfs_su≥rdúty
;

62 
devi˚
 *
	msfs_devi˚
;

63 
vnodóºay
 *
	msfs_vnodes
;

64 
bôm≠
 *
	msfs_‰ìm≠
;

65 
boﬁ
 
	msfs_‰ìm≠dúty
;

71 
sfs_mou¡
(c⁄° *
devi˚
);

79 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

80 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

83 
sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio);

84 
sfs_rblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

85 
sfs_wblock
(
sfs_fs
 *
sfs
, *
d©a
, 
uöt32_t
 
block
);

88 
vnode
 *
sfs_gëroŸ
(
fs
 *fs);

	@kern/include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@kern/include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

41 #i‚de‡
SPINLOCK_INLINE


42 
	#SPINLOCK_INLINE
 
INLINE


	)

46 
	~<machöe/•ölock.h
>

57 
	s•ölock
 {

58 vﬁ©ûê
•ölock_d©a_t
 
	mlk_lock
;

59 
˝u
 *
	mlk_hﬁdî
;

65 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

79 
•ölock_öô
(
•ölock
 *
lk
);

80 
•ölock_˛ónup
(
•ölock
 *
lk
);

82 
•ölock_acquúe
(
•ölock
 *
lk
);

83 
•ölock_ªÀa£
(
•ölock
 *
lk
);

85 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@kern/include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

65 
•l0
();

66 
•lhigh
();

67 
•lx
();

72 
	#IPL_NONE
 0

	)

73 
	#IPL_HIGH
 1

	)

84 
•Ãai£
(
ﬁdùl
, 
√wùl
);

85 
•Œowî
(
ﬁdùl
, 
√wùl
);

90 #i‚de‡
SPL_INLINE


91 
	#SPL_INLINE
 
INLINE


	)

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@kern/include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@kern/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

43 #ifde‡
__GNUC__


44 
__va_li°
 
	tva_li°
;

46 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

47 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

48 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

49 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

59 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

60 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

69 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

70 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@kern/include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

78 
wch™
 *
	mlk_wch™
;

79 
•ölock
 
	mlk_lock
;

85 vﬁ©ûê
thªad
 *
	mlk_hﬁdî
;

92 
lock
 *
lock_¸óã
(c⁄° *
«me
);

93 
lock_acquúe
(
lock
 *);

106 
lock_ªÀa£
(
lock
 *);

107 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

108 
lock_de°roy
(
lock
 *);

125 
	scv
 {

126 *
	mcv_«me
;

129 
wch™
 *
	mcv_wch™
;

133 
cv
 *
cv_¸óã
(c⁄° *
«me
);

134 
cv_de°roy
(
cv
 *);

149 
cv_waô
(
cv
 *cv, 
lock
 *lock);

150 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

151 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@kern/include/synchprobs.h

1 #i‚de‡
_SYNCHPROBS_H_


2 
	#_SYNCHPROBS_H_


	)

5 
	eDúe˘i⁄s


7 
	mn‹th
 = 0,

8 
	mó°
 = 1,

9 
	msouth
 = 2,

10 
	mwe°
 = 3

12 
Dúe˘i⁄s
 
	tDúe˘i⁄
;

16 
öãr£˘i⁄_sync_öô
();

17 
öãr£˘i⁄_sync_˛ónup
();

18 
öãr£˘i⁄_bef‹e_íåy
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
);

19 
öãr£˘i⁄_a·î_exô
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
);

23 
ˇt_bef‹e_ótög
(
bowl
);

24 
ˇt_a·î_ótög
(
bowl
);

25 
mou£_bef‹e_ótög
(
bowl
);

26 
mou£_a·î_ótög
(
bowl
);

27 
ˇtmou£_sync_öô
(
bowls
);

28 
ˇtmou£_sync_˛ónup
(
bowls
);

29 
¥öt_°©e_⁄
();

30 
¥öt_°©e_off
();

	@kern/include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

33 
	~"›t-A2.h
"

34 
	gå≠‰ame
;

40 
sysˇŒ
(
å≠‰ame
 *
tf
);

47 #i‡
OPT_A2


48 
íãr_f‹ked_¥o˚ss
(*
d©a1
, 
d©a2
);

50 
íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
);

54 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, 
vaddr_t
 
°ack±r
,

55 
vaddr_t
 
íåypoöt
);

62 
sys_ªboŸ
(
code
);

63 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

65 #ifde‡
UW


66 
sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
);

67 
sys__exô
(
exôcode
);

68 
sys_gëpid
(
pid_t
 *
ªtvÆ
);

69 
sys_waôpid
(
pid_t
 
pid
, 
u£Ωå_t
 
°©us
, 
›ti⁄s
,Öid_à*
ªtvÆ
);

71 #i‡
OPT_A2


72 
sys_f‹k
(
å≠‰ame
 *
tf
, 
pid_t
 *
ªtvÆ
);

74 
sys_execv
(*
¥og«me
, **
u¨gs
);

	@kern/include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

33 
	~"›t-A2.h
"

42 
whÆem©ög
(, **);

44 #ifde‡
UW


45 
ˇtmou£
(, **);

46 
åaffic_simuœti⁄
(, **);

54 
¨øyã°
(, **);

55 
bôm≠ã°
(, **);

56 
queuëe°
(, **);

59 
thªadã°
(, **);

60 
thªadã°2
(, **);

61 
thªadã°3
(, **);

62 
£mã°
(, **);

63 
lockã°
(, **);

64 
cvã°
(, **);

66 #ifde‡
UW


68 
uwlockã°1
(, **);

70 
uwvm°©°e°
(, **);

74 
f°e°
(, **);

75 
ªad°ªss
(, **);

76 
wrôe°ªss
(, **);

77 
wrôe°ªss2
(, **);

78 
¸óã°ªss
(, **);

79 
¥ötfûe
(, **);

82 
mÆlo˘e°
(, **);

83 
mÆloc°ªss
(, **);

84 
√âe°
(, **);

87 #i‡
OPT_A2


88 
ru≈rogøm
(*
¥og«me
, **
¨gs
, 
«rgs
);

90 
ru≈rogøm
(*
¥og«me
);

94 
míu
(*
¨g°r
);

97 
kmaö
(*
boŸ°rög
);

	@kern/include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

60 
	mS_RUN
,

61 
	mS_READY
,

62 
	mS_SLEEP
,

63 
	mS_ZOMBIE
,

64 } 
	tthªad°©e_t
;

67 
	sthªad
 {

72 *
	mt_«me
;

73 c⁄° *
	mt_wch™_«me
;

74 
thªad°©e_t
 
	mt_°©e
;

79 
thªad_machdï
 
	mt_machdï
;

80 
thªadli°node
 
	mt_li°node
;

81 *
	mt_°ack
;

82 
swôch‰ame
 *
	mt_c⁄ãxt
;

83 
˝u
 *
	mt_˝u
;

84 
¥oc
 *
	mt_¥oc
;

99 
boﬁ
 
	mt_ö_öãºu±
;

100 
	mt_cur•l
;

101 
	mt_ùlhigh_cou¡
;

113 #i‚de‡
THREADINLINE


114 
	#THREADINLINE
 
INLINE


	)

117 
DECLARRAY
(
thªad
);

118 
DEFARRAY
(
thªad
, 
THREADINLINE
);

121 
thªad_boŸ°øp
();

124 
thªad_°¨t_˝us
();

127 
thªad_∑nic
();

130 
thªad_shutdown
();

142 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

143 (*
func
)(*, ),

144 *
d©a1
, 
d©a2
);

150 
	`thªad_exô
();

157 
	`thªad_yõld
();

162 
	`scheduÀ
();

168 
	`thªad_c⁄sidî_migøti⁄
();

	@kern/include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

53 
	sthªadli°node
 {

54 
thªadli°node
 *
	mén_¥ev
;

55 
thªadli°node
 *
	mén_√xt
;

56 
thªad
 *
	mén_£lf
;

59 
	sthªadli°
 {

60 
thªadli°node
 
	mé_hód
;

61 
thªadli°node
 
	mé_èû
;

62 
	mé_cou¡
;

66 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

67 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

70 
thªadli°_öô
(
thªadli°
 *
é
);

71 
thªadli°_˛ónup
(
thªadli°
 *
é
);

74 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

77 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

78 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

79 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

80 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

83 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

84 
thªad
 *
⁄li°
, thªad *
addì
);

85 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

86 
thªad
 *
addì
, thªad *
⁄li°
);

87 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

90 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

91 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

92 (
ôîv¨
)->
t_li°node
.
én_√xt
 !
NULL
; \

93 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

95 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

96 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

97 (
ôîv¨
)->
t_li°node
.
én_¥ev
 !
NULL
; \

98 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@kern/include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@kern/include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@kern/include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

40 
	~<kîn/iovec.h
>

43 
	euio_rw
 {

44 
	mUIO_READ
,

45 
	mUIO_WRITE
,

49 
	euio_£g
 {

50 
	mUIO_USERISPACE
,

51 
	mUIO_USERSPACE
,

52 
	mUIO_SYSSPACE
,

55 
	suio
 {

56 
iovec
 *
	muio_iov
;

57 
	muio_iov˙t
;

58 
off_t
 
	muio_off£t
;

59 
size_t
 
	muio_ªsid
;

60 
uio_£g
 
	muio_£gÊg
;

61 
uio_rw
 
	muio_rw
;

62 
addr•a˚
 *
	muio_•a˚
;

100 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

105 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

119 
uio_köô
(
iovec
 *, 
uio
 *,

120 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@kern/include/uw-vmstats.h

1 #i‚de‡
VM_STATS_H


2 
	#VM_STATS_H


	)

29 
	#VMSTAT_TLB_FAULT
 (0)

	)

30 
	#VMSTAT_TLB_FAULT_FREE
 (1)

	)

31 
	#VMSTAT_TLB_FAULT_REPLACE
 (2)

	)

32 
	#VMSTAT_TLB_INVALIDATE
 (3)

	)

33 
	#VMSTAT_TLB_RELOAD
 (4)

	)

34 
	#VMSTAT_PAGE_FAULT_ZERO
 (5)

	)

35 
	#VMSTAT_PAGE_FAULT_DISK
 (6)

	)

36 
	#VMSTAT_ELF_FILE_READ
 (7)

	)

37 
	#VMSTAT_SWAP_FILE_READ
 (8)

	)

38 
	#VMSTAT_SWAP_FILE_WRITE
 (9)

	)

39 
	#VMSTAT_COUNT
 (10)

	)

44 
vm°©s_öô
();

45 
_vm°©s_öô
();

52 
vm°©s_öc
(
ödex
);

53 
_vm°©s_öc
(
ödex
);

56 
vm°©s_¥öt
();

	@kern/include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "1.99.05"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@kern/include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

162 
vfs_boŸ°øp
();

164 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

165 
vfs_˛órboŸfs
();

167 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

168 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

170 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

171 (*
mou¡func
)(*
d©a
,

172 
devi˚
 *
dev
,

173 
fs
 **
ªsu…
));

174 
	`vfs_unmou¡
(c⁄° *
dev«me
);

175 
	`vfs_unmou¡Æl
();

180 #i‚de‡
VFSINLINE


181 
	#VFSINLINE
 
INLINE


	)

184 
	`DECLARRAY
(
vnode
);

185 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

191 
	`vfs_biglock_acquúe
();

192 
	`vfs_biglock_ªÀa£
();

193 
boﬁ
 
	`vfs_biglock_do_i_hﬁd
();

	@kern/include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown_Æl
();

60 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@kern/include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

34 
	guio
;

35 
	g°©
;

54 
	svnode
 {

55 
	mvn_ªfcou¡
;

56 
	mvn_›ícou¡
;

58 
fs
 *
	mvn_fs
;

60 *
	mvn_d©a
;

62 c⁄° 
vnode_›s
 *
	mvn_›s
;

193 
	#VOP_MAGIC
 0xa2b3c4d5

	)

195 
	svnode_›s
 {

196 
	mv›_magic
;

198 (*
	mv›_›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

199 (*
	mv›_˛o£
)(
vnode
 *
	mobje˘
);

200 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

203 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

204 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

205 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

206 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

207 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

208 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

209 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

210 (*
	mv›_åy£ek
)(
vnode
 *
	mobje˘
, 
off_t
 
	mpos
);

211 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

212 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

213 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

214 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

217 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

218 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

219 
vnode
 **
	mªsu…
);

220 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

221 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

222 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

223 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

224 (*
	mv›_lök
)(
vnode
 *
	mdú
,

225 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

226 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

227 c⁄° *
	m«me
);

228 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

229 c⁄° *
	m«me
);

231 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

232 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

235 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

236 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

237 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

238 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

239 *
	mbuf
, 
size_t
 
	mÀn
);

242 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

244 
	#VOP_OPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
›í
)(vn, fœgs))

	)

245 
	#VOP_CLOSE
(
vn
Ë(
	`__VOP
(vn, 
˛o£
)(vn))

	)

246 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

248 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

249 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

250 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

251 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

252 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

253 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

254 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

255 
	#VOP_TRYSEEK
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åy£ek
)(vn,Öos))

	)

256 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

257 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

258 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

259 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

261 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

262 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

263 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

264 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

265 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

266 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

267 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

269 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

270 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

275 
vnode_check
(
vnode
 *, c⁄° *
›
);

280 
vnode_ö¸ef
(
vnode
 *);

281 
vnode_de¸ef
(
vnode
 *);

283 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

284 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

292 
vnode_öc›í
(
vnode
 *);

293 
vnode_dec›í
(
vnode
 *);

295 
	#VOP_INCOPEN
(
vn
Ë
	`vnode_öc›í
(vn)

	)

296 
	#VOP_DECOPEN
(
vn
Ë
	`vnode_dec›í
(vn)

	)

302 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

303 
fs
 *fs, *
fsd©a
);

305 
	#VOP_INIT
(
vn
, 
›s
, 
fs
, 
d©a
Ë
	`vnode_öô
(vn, ops, fs, d©a)

	)

311 
vnode_˛ónup
(
vnode
 *);

313 
	#VOP_CLEANUP
(
vn
Ë
	`vnode_˛ónup
(vn)

	)

	@kern/include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	gwch™
;

45 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

50 
wch™_de°roy
(
wch™
 *
wc
);

56 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
);

61 
wch™_lock
(
wch™
 *
wc
);

62 
wch™_u∆ock
(
wch™
 *
wc
);

72 
wch™_¶ìp
(
wch™
 *
wc
);

81 
wch™_wake⁄e
(
wch™
 *
wc
);

82 
wch™_wakóŒ
(
wch™
 *
wc
);

	@kern/lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

107 
a
->
num
 =Çum;

110 
	}
}

113 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

115 
num_to_move
;

117 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

118 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

120 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

121 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

122 
a
->
num
--;

123 
	}
}

	@kern/lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@kern/lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@kern/lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@kern/lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<synch.h
>

38 
	~<maöbus.h
>

39 
	~<vfs.h
>

43 
uöt32_t
 
	gdbÊags
 = 0;

46 
lock
 *
	gk¥ötf_lock
;

49 
•ölock
 
	gk¥ötf_•ölock
;

63 
	$k¥ötf_boŸ°øp
()

65 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

67 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

68 i‡(
k¥ötf_lock
 =
NULL
) {

69 
	`∑nic
("CouldÇot create kprintf_lock\n");

71 
	`•ölock_öô
(&
k¥ötf_•ölock
);

72 
	}
}

79 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

81 
size_t
 
i
;

83 ()
junk
;

85 
i
=0; i<
Àn
; i++) {

86 
	`putch
(
d©a
[
i
]);

88 
	}
}

94 
	$k¥ötf
(c⁄° *
fmt
, ...)

96 
ch¨s
;

97 
va_li°
 
≠
;

98 
boﬁ
 
dﬁock
;

100 
dﬁock
 = 
k¥ötf_lock
 !
NULL


101 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


102 && 
cuπhªad
->
t_ùlhigh_cou¡
 == 0;

104 i‡(
dﬁock
) {

105 
	`lock_acquúe
(
k¥ötf_lock
);

108 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

110 
	`putch_¥ï¨e
();

112 
	`va_°¨t
(
≠
, 
fmt
);

113 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

114 
	`va_íd
(
≠
);

116 
	`putch_com∂ëe
();

117 i‡(
dﬁock
) {

118 
	`lock_ªÀa£
(
k¥ötf_lock
);

121 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

124  
ch¨s
;

125 
	}
}

133 
	$∑nic
(c⁄° *
fmt
, ...)

135 
va_li°
 
≠
;

148 vﬁ©ûê
evû
;

150 i‡(
evû
 == 0) {

151 
evû
 = 1;

159 
	`•lhigh
();

162 i‡(
evû
 == 1) {

163 
evû
 = 2;

166 
	`thªad_∑nic
();

169 i‡(
evû
 == 2) {

170 
evû
 = 3;

173 
	`k¥ötf
("panic: ");

174 
	`putch_¥ï¨e
();

175 
	`va_°¨t
(
≠
, 
fmt
);

176 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

177 
	`va_íd
(
≠
);

178 
	`putch_com∂ëe
();

181 i‡(
evû
 == 3) {

182 
evû
 = 4;

185 
	`vfs_sync
();

188 i‡(
evû
 == 4) {

189 
evû
 = 5;

192 
	`maöbus_∑nic
();

200 
	}
}

206 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

208 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

209 
ex¥
, 
fûe
, 
löe
, 
func
);

210 
	}
}

	@kern/lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@kern/lib/queue.c

5 
	~<ty≥s.h
>

6 
	~<kîn/î∫o.h
>

7 
	~<lib.h
>

8 
	~<queue.h
>

10 
	squeue
 {

11 
	msize
;

12 
	m√xtwrôe
;

13 
	m√xåód
;

14 **
	md©a
;

19 
	$q_grow
(
queue
 *
q
, 
èrgësize
)

21 **
ﬁdd©a
 = 
q
->
d©a
;

22 
⁄r
 = 
q
->
√xåód
;

23 
⁄w
 = 
q
->
√xtwrôe
;

24 
osize
 = 
q
->
size
;

26 
nsize
;

27 **
nd©a
;

29 
i
, 
ªsu…
;

31 
nsize
 = 
q
->
size
;

32 
nsize
 < 
èrgësize
) {

33 
nsize
 *= 2;

35 
	`KASSERT
(
nsize
 > 0);

37 
nd©a
 = 
	`kmÆloc
(
nsize
 * (*));

38 i‡(
nd©a
 =
NULL
) {

39  
ENOMEM
;

41 
q
->
size
 = 
nsize
;

42 
q
->
d©a
 = 
nd©a
;

43 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

45 
i
=
⁄r
; i!=
⁄w
; i = (i+1)%
osize
) {

46 
ªsu…
 = 
	`q_addèû
(
q
, 
ﬁdd©a
[
i
]);

47 
	`KASSERT
(
ªsu…
==0);

49 
	`k‰ì
(
ﬁdd©a
);

51 
	}
}

53 
queue
 *

54 
	$q_¸óã
(
size
)

56 
queue
 *
q
 = 
	`kmÆloc
((queue));

57 i‡(
q
==
NULL
) {

58  
NULL
;

60 
q
->
size
 = size;

61 
q
->
d©a
 = 
	`kmÆloc
(
size
 * (*));

62 i‡(
q
->
d©a
==
NULL
) {

63 
	`k‰ì
(
q
);

64  
NULL
;

66 
q
->
√xåód
 = q->
√xtwrôe
 = 0;

67  
q
;

68 
	}
}

71 
	$q_¥óŒoˇã
(
queue
 *
q
, 
size
)

73 
ªsu…
 = 0;

75 
	`KASSERT
(
q
->
size
 > 0);

77 i‡(
size
 > 
q
->size) {

78 
ªsu…
 = 
	`q_grow
(
q
, 
size
);

80  
ªsu…
;

81 
	}
}

83 
ölöe


85 
	$q_em±y
(
queue
 *
q
)

87  
q
->
√xtwrôe
 =q->
√xåód
;

88 
	}
}

91 
	$q_addèû
(
queue
 *
q
, *
±r
)

93 
√xäext
, 
ªsu…
;

95 
	`KASSERT
(
q
->
size
 > 0);

97 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

98 i‡(
√xäext
==
q
->
√xåód
) {

99 
ªsu…
 = 
	`q_grow
(
q
, q->
size
+1);

100 i‡(
ªsu…
) {

101  
ªsu…
;

103 
√xäext
 = (
q
->
√xtwrôe
+1Ë% q->
size
;

105 
q
->
d©a
[q->
√xtwrôe
] = 
±r
;

106 
q
->
√xtwrôe
 = 
√xäext
;

108 
	}
}

111 
	$q_ªmhód
(
queue
 *
q
)

113 *
ªt
;

115 
	`KASSERT
(
q
->
size
 > 0);

117 
	`KASSERT
(!
	`q_em±y
(
q
));

118 
ªt
 = 
q
->
d©a
[q->
√xåód
];

119 
q
->
√xåód
 = (q->√xåód+1)%q->
size
;

120  
ªt
;

121 
	}
}

124 
	$q_de°roy
(
queue
 *
q
)

126 
	`KASSERT
(
	`q_em±y
(
q
));

127 
	`k‰ì
(
q
->
d©a
);

128 
	`k‰ì
(
q
);

129 
	}
}

133 
	$q_gë°¨t
(
queue
 *
q
)

135  
q
->
√xåód
;

136 
	}
}

139 
	$q_gëíd
(
queue
 *
q
)

141  
q
->
√xtwrôe
;

142 
	}
}

145 
	$q_gësize
(
queue
 *
q
)

147  
q
->
size
;

148 
	}
}

151 
	$q_gëguy
(
queue
 *
q
, 
ödex
)

156 
	`KASSERT
(
ödex
>=0 && index<
q
->
size
);

157  
q
->
d©a
[
ödex
];

158 
	}
}

161 
	$q_≥ek
(
queue
 *
q
)

163 *
ªt
;

165 
	`KASSERT
(
q
);

166 
	`KASSERT
(
q
->
size
 > 0);

168 i‡(
	`q_em±y
(
q
)) {

169 
ªt
 = 0;

171 
ªt
 = 
q
->
d©a
[q->
√xåód
];

173  
ªt
;

174 
	}
}

177 
	$q_Àn
(
queue
 *
theq
)

179 
cou¡
 = 0;

180 
tmp
 = 
theq
->
√xåód
;

181 
tmp
 !
theq
->
√xtwrôe
) {

182 
tmp
 = (tmp+1Ë% 
theq
->
size
;

183 
cou¡
++;

185  
cou¡
;

186 
	}
}

	@kern/lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`cuΩroc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 
ªsu…
 = 0;

86 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

87 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

90 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

92 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

94 
UIO_USERSPACE
:

95 
UIO_USERISPACE
:

96 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

97 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

100 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

102 i‡(
ªsu…
) {

103  
ªsu…
;

105 
iov
->
iov_uba£
 +
size
;

108 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

109 ()
uio
->
uio_£gÊg
);

112 
iov
->
iov_Àn
 -
size
;

113 
uio
->
uio_ªsid
 -
size
;

114 
uio
->
uio_off£t
 +
size
;

115 
±r
 = ((*Ìå + 
size
);

116 
n
 -
size
;

120 
	}
}

123 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

126 
zîos
[16];

127 
size_t
 
amt
;

128 
ªsu…
;

131 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

133 
n
 > 0) {

134 
amt
 = (
zîos
);

135 i‡(
amt
 > 
n
) {

136 
amt
 = 
n
;

138 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

139 i‡(
ªsu…
) {

140  
ªsu…
;

142 
n
 -
amt
;

146 
	}
}

153 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

154 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

156 
iov
->
iov_kba£
 = 
kbuf
;

157 
iov
->
iov_Àn
 = 
Àn
;

158 
u
->
uio_iov
 = 
iov
;

159 
u
->
uio_iov˙t
 = 1;

160 
u
->
uio_off£t
 = 
pos
;

161 
u
->
uio_ªsid
 = 
Àn
;

162 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

163 
u
->
uio_rw
 = 
rw
;

164 
u
->
uio_•a˚
 = 
NULL
;

165 
	}
}

	@kern/proc/pid.c

1 
	~<pid.h
>

4 
£m≠h‹e
 *
	gpid_£m
;

5 
lock
 *
	gpid_lock
;

6 
cv
 *
	gpid_cv
;

7 
¨øy
 *
	g¥oc_¨øy
;

8 
¨øy
 *
	gpid_¨øy
;

9 
pid_t
 
	g√xçid
;

12 
pidöfo
 *
	$pidöfo_¸óã
(
pid_t
 
pid
,Öid_à
µid
)

14 
pidöfo
 *pidinfo;

15 
pidöfo
 = 
	`kmÆloc
((*pidinfo));

16 
pidöfo
->
pid
 =Öid;

17 
pidöfo
->
µid
 =Öpid;

18 
pidöfo
->
exôcode
 = 0;

19 
pidöfo
->
˚xôed
 = 
Ál£
;

20 
pidöfo
->
≥xôed
 = 
Ál£
;

22  
pidöfo
;

23 
	}
}

26 
	$pid_boŸ°øp
()

28 
pid_£m
 = 
	`£m_¸óã
("pid_sem", 1);

29 i‡(
pid_£m
 =
NULL
) {

30 
	`∑nic
("couldÇot createÖid_sem semaphore\n");

33 
pid_lock
 = 
	`lock_¸óã
("pid_lock");

34 i‡(
pid_lock
 =
NULL
) {

35 
	`∑nic
("couldÇot createÖid_lockÜock\n");

38 
pid_cv
 = 
	`cv_¸óã
("pid_cv");

39 i‡(
pid_cv
 =
NULL
) {

40 
	`∑nic
("couldÇot createÖid_cv condition variable");

43 
¥oc_¨øy
 = 
	`¨øy_¸óã
();

44 
pid_¨øy
 = 
	`¨øy_¸óã
();

47 
√xçid
 = 1;

48 
	}
}

51 
	$pid_check_pid
(
¥oc
 *proc)

53 
	`P
(
pid_£m
);

55 i‡(
	`¨øy_num
(
pid_¨øy
) == 0) {

57 
√xçid
++;

58 
¥oc
->
pid
 = 
√xçid
;

62 
¥oc
->
pid
 = *((
pid_t
 *Ë
	`¨øy_gë
(
pid_¨øy
, 0));

63 
	`k‰ì
(
	`¨øy_gë
(
pid_¨øy
, 0));

64 
	`¨øy_ªmove
(
pid_¨øy
, 0);

67 
	`V
(
pid_£m
);

68 
	}
}

70 
boﬁ


71 
	$pid_waô
(
¥oc
 *¥oc, 
pid_t
 
pid
, *
exô°©us
, *
ªsu…
)

73 
boﬁ
 
b
;

74 
	`lock_acquúe
(
pid_lock
);

76 
≈
 = 
	`¨øy_num
(
¥oc_¨øy
);

77 
b
 = 
Ál£
;

79 
i
 = 0; i < 
≈
; i++) {

80 
pidöfo
 *pidöfÿ(pidöfÿ*Ë
	`¨øy_gë
(
¥oc_¨øy
, 
i
);

83 i‡(
pidöfo
->
pid
 ==Öid) {

85 i‡(
¥oc
->
pid
 =
pidöfo
->
µid
) {

87 !
pidöfo
->
˚xôed
) {

88 
	`cv_waô
(
pid_cv
, 
pid_lock
);

91 
	`KASSERT
(
pidöfo
->
˚xôed
);

92 *
exô°©us
 = 
pidöfo
->
exôcode
;

93 
b
 = 
åue
;

96 
	`lock_ªÀa£
(
pid_lock
);

97 *
ªsu…
 = 
ECHILD
;

98  
åue
;

103 
	`lock_ªÀa£
(
pid_lock
);

106 i‡(!
b
) {

107 *
ªsu…
 = 
ESRCH
;

108  
åue
;

111  
Ál£
;

113 
	}
}

116 
	$pid_exô
(
¥oc
 *¥oc, 
exôcode
)

118 
	`lock_acquúe
(
pid_lock
);

120 
≈
 = 
	`¨øy_num
(
¥oc_¨øy
);

121 
i
 = 0; i < 
≈
; i++) {

122 
pidöfo
 *pidöfÿ(pidöfÿ*Ë
	`¨øy_gë
(
¥oc_¨øy
, 
i
);

125 i‡(
¥oc
->
pid
 =
pidöfo
->
µid
) {

129 
pidöfo
->
≥xôed
 = 
åue
;

131 i‡(
pidöfo
->
˚xôed
) {

132 
	`P
(
pid_£m
);

134 
pid_t
 *
√wpid
 = 
	`kmÆloc
((pid_t));

135 *
√wpid
 = 
pidöfo
->
pid
;

136 
	`¨øy_add
(
pid_¨øy
, (*Ë
√wpid
, 
NULL
);

138 
	`V
(
pid_£m
);

141 
	`k‰ì
(
pidöfo
);

143 
	`¨øy_ªmove
(
¥oc_¨øy
, 
i
);

144 
≈
--;

146 
i
--;

152 i‡(
¥oc
->
pid
 =
pidöfo
->pid) {

153 
pidöfo
->
˚xôed
 = 
åue
;

155 i‡(
pidöfo
->
≥xôed
) {

156 
	`P
(
pid_£m
);

158 
pid_t
 *
√wpid
 = 
	`kmÆloc
((pid_t));

159 *
√wpid
 = 
pidöfo
->
pid
;

160 
	`¨øy_add
(
pid_¨øy
, (*Ë
√wpid
, 
NULL
);

162 
	`V
(
pid_£m
);

164 
	`k‰ì
(
pidöfo
);

166 
	`¨øy_ªmove
(
¥oc_¨øy
, 
i
);

167 
≈
--;

168 
i
--;

173 
pidöfo
->
exôcode
 = 
	`_MKWAIT_EXIT
(exitcode);

174 
	`cv_brﬂdˇ°
(
pid_cv
, 
pid_lock
);

179 
	`lock_ªÀa£
(
pid_lock
);

180 
	}
}

183 
	$pid_f‹k
(
å≠‰ame
 *
tf
, 
pid_t
 *
ªtvÆ
, 
¥oc
 *proc)

186 
addr•a˚
 *
«s
;

188 
¥oc
 *
≈roc
 = 
	`¥oc_¸óã_ru≈rogøm
’roc->
p_«me
);

191 i‡(
≈roc
 =
NULL
) {

192 (
ENOMEM
);

196 i‡(
≈roc
->
pid
 > 
PID_MAX
) {

197 
	`¥oc_de°roy
(
≈roc
);

198 
	`P
(
pid_£m
);

200 
√xçid
--;

202 
	`V
(
pid_£m
);

205 (
ENPROC
);

209 
å≠‰ame
 *
¡f
 = 
	`kmÆloc
((*ntf));

211 i‡(
¡f
 =
NULL
) {

212 
	`P
(
pid_£m
);

214 
√xçid
--;

216 
	`V
(
pid_£m
);

217 
	`¥oc_de°roy
(
≈roc
);

218 (
ENOMEM
);

220 
	`mem˝y
(
¡f
, 
tf
, (*ntf));

224 
î∫o
 = 
	`as_c›y
(
¥oc
->
p_addr•a˚
, &
«s
);

225 i‡(
î∫o
 =
ENOMEM
) {

226 
	`P
(
pid_£m
);

228 
√xçid
--;

230 
	`V
(
pid_£m
);

231 
	`¥oc_de°roy
(
≈roc
);

232 (
î∫o
);

234 
≈roc
->
p_addr•a˚
 = 
«s
;

237 
	`lock_acquúe
(
pid_lock
);

239 
pidöfo
 *pidöfÿ
	`pidöfo_¸óã
(
≈roc
->
pid
, 
¥oc
->pid);

240 
	`¨øy_add
(
¥oc_¨øy
, 
pidöfo
, 
NULL
);

242 
	`lock_ªÀa£
(
pid_lock
);

245 
î∫o
 = 
	`thªad_f‹k
("thªad_f‹k", 
≈roc
, 
íãr_f‹ked_¥o˚ss
, (*Ë
¡f
, (Ë≈roc->
pid
);

247 i‡(
î∫o
 =
ENOMEM
) {

248 
	`P
(
pid_£m
);

250 
√xçid
--;

252 
	`V
(
pid_£m
);

253 
	`¥oc_de°roy
(
≈roc
);

254 (
î∫o
);

258 *
ªtvÆ
 = 
≈roc
->
pid
;

262 
	}
}

	@kern/proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<¥oc.h
>

47 
	~<cuºít.h
>

48 
	~<addr•a˚.h
>

49 
	~<vnode.h
>

50 
	~<vfs.h
>

51 
	~<synch.h
>

52 
	~<kîn/f˙é.h
>

54 
	~"›t-A2.h
"

56 #i‡
OPT_A2


57 
	~<limôs.h
>

58 
	~<pid.h
>

59 
	~<kîn/î∫o.h
>

60 
	~<kîn/waô.h
>

65 
¥oc
 *
	gk¥oc
;

70 #ifde‡
UW


72 vﬁ©ûê
	g¥oc_cou¡
;

75 
£m≠h‹e
 *
	g¥oc_cou¡_muãx
;

77 
£m≠h‹e
 *
	gno_¥oc_£m
;

85 
¥oc
 *

86 
	$¥oc_¸óã
(c⁄° *
«me
)

88 
¥oc
 *proc;

90 
¥oc
 = 
	`kmÆloc
((*proc));

91 i‡(
¥oc
 =
NULL
) {

92  
NULL
;

94 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

95 i‡(
¥oc
->
p_«me
 =
NULL
) {

96 
	`k‰ì
(
¥oc
);

97  
NULL
;

100 
	`thªad¨øy_öô
(&
¥oc
->
p_thªads
);

101 
	`•ölock_öô
(&
¥oc
->
p_lock
);

104 
¥oc
->
p_addr•a˚
 = 
NULL
;

107 
¥oc
->
p_cwd
 = 
NULL
;

109 #ifde‡
UW


110 
¥oc
->
c⁄sﬁe
 = 
NULL
;

113  
¥oc
;

114 
	}
}

120 
	$¥oc_de°roy
(
¥oc
 *proc)

131 
	`KASSERT
(
¥oc
 !
NULL
);

132 
	`KASSERT
(
¥oc
 !
k¥oc
);

141 i‡(
¥oc
->
p_cwd
) {

142 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

143 
¥oc
->
p_cwd
 = 
NULL
;

146 #i‚de‡
UW


147 i‡(
¥oc
->
p_addr•a˚
) {

158 
addr•a˚
 *
as
;

160 
	`as_dó˘iv©e
();

161 
as
 = 
	`cuΩroc_£ès
(
NULL
);

162 
	`as_de°roy
(
as
);

166 #ifde‡
UW


167 i‡(
¥oc
->
c⁄sﬁe
) {

168 
	`vfs_˛o£
(
¥oc
->
c⁄sﬁe
);

172 
	`thªad¨øy_˛ónup
(&
¥oc
->
p_thªads
);

173 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

175 
	`k‰ì
(
¥oc
->
p_«me
);

176 
	`k‰ì
(
¥oc
);

178 #ifde‡
UW


183 
	`P
(
¥oc_cou¡_muãx
);

184 
	`KASSERT
(
¥oc_cou¡
 > 0);

185 
¥oc_cou¡
--;

187 i‡(
¥oc_cou¡
 == 0) {

188 
	`V
(
no_¥oc_£m
);

190 
	`V
(
¥oc_cou¡_muãx
);

194 
	}
}

200 
	$¥oc_boŸ°øp
()

202 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

203 i‡(
k¥oc
 =
NULL
) {

204 
	`∑nic
("proc_create for kproc failed\n");

206 #ifde‡
UW


207 
¥oc_cou¡
 = 0;

208 
¥oc_cou¡_muãx
 = 
	`£m_¸óã
("proc_count_mutex",1);

209 i‡(
¥oc_cou¡_muãx
 =
NULL
) {

210 
	`∑nic
("couldÇot createÖroc_count_mutex semaphore\n");

212 
no_¥oc_£m
 = 
	`£m_¸óã
("no_proc_sem",0);

213 i‡(
no_¥oc_£m
 =
NULL
) {

214 
	`∑nic
("couldÇot createÇo_proc_sem semaphore\n");

218 #i‡
OPT_A2


219 
	`pid_boŸ°øp
();

221 
	}
}

229 
¥oc
 *

230 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

232 
¥oc
 *proc;

233 *
c⁄sﬁe_∑th
;

235 
¥oc
 = 
	`¥oc_¸óã
(
«me
);

236 i‡(
¥oc
 =
NULL
) {

237  
NULL
;

240 #ifde‡
UW


242 
c⁄sﬁe_∑th
 = 
	`k°rdup
("con:");

243 i‡(
c⁄sﬁe_∑th
 =
NULL
) {

244 
	`∑nic
("unableÅo copy consoleÖathÇame duringÖrocess creation\n");

246 i‡(
	`vfs_›í
(
c⁄sﬁe_∑th
,
O_WRONLY
,0,&(
¥oc
->
c⁄sﬁe
))) {

247 
	`∑nic
("unableÅo openÅhe console duringÖrocess creation\n");

249 
	`k‰ì
(
c⁄sﬁe_∑th
);

254 
¥oc
->
p_addr•a˚
 = 
NULL
;

258 #ifde‡
UW


262 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

263 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

264 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

267 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

268 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

269 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

270 
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

272 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

275 #ifde‡
UW


279 
	`P
(
¥oc_cou¡_muãx
);

280 
¥oc_cou¡
++;

281 
	`V
(
¥oc_cou¡_muãx
);

283 #i‡
OPT_A2


284 
	`pid_check_pid
(
¥oc
);

289  
¥oc
;

290 
	}
}

297 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

299 
ªsu…
;

301 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

303 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

304 
ªsu…
 = 
	`thªad¨øy_add
(&
¥oc
->
p_thªads
, 
t
, 
NULL
);

305 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

306 i‡(
ªsu…
) {

307  
ªsu…
;

309 
t
->
t_¥oc
 = 
¥oc
;

311 
	}
}

318 
	$¥oc_ªmthªad
(
thªad
 *
t
)

320 
¥oc
 *proc;

321 
i
, 
num
;

323 
¥oc
 = 
t
->
t_¥oc
;

324 
	`KASSERT
(
¥oc
 !
NULL
);

326 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

328 
num
 = 
	`thªad¨øy_num
(&
¥oc
->
p_thªads
);

329 
i
=0; i<
num
; i++) {

330 i‡(
	`thªad¨øy_gë
(&
¥oc
->
p_thªads
, 
i
Ë=
t
) {

331 
	`thªad¨øy_ªmove
(&
¥oc
->
p_thªads
, 
i
);

332 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

333 
t
->
t_¥oc
 = 
NULL
;

338 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

339 
	`∑nic
("Thªad (%pËha†esˇ≥d from it†¥o˚s†(%p)\n", 
t
, 
¥oc
);

340 
	}
}

347 
addr•a˚
 *

348 
	$cuΩroc_gëas
()

350 
addr•a˚
 *
as
;

351 #ifde‡
UW


355 i‡(
cuΩroc
 =
NULL
) {

356  
NULL
;

360 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

361 
as
 = 
cuΩroc
->
p_addr•a˚
;

362 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

363  
as
;

364 
	}
}

370 
addr•a˚
 *

371 
	$cuΩroc_£ès
(
addr•a˚
 *
√was
)

373 
addr•a˚
 *
ﬁdas
;

374 
¥oc
 *¥o¯
cuΩroc
;

376 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

377 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

378 
¥oc
->
p_addr•a˚
 = 
√was
;

379 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

380  
ﬁdas
;

381 
	}
}

	@kern/startup/._menu.c

1      OS X        2  ∞     ‚                                    =

2   ‚                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               )     ˇˇ

	@kern/startup/main.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/ªboŸ.h
>

37 
	~<kîn/uni°d.h
>

38 
	~<lib.h
>

39 
	~<•l.h
>

40 
	~<˛ock.h
>

41 
	~<thªad.h
>

42 
	~<¥oc.h
>

43 
	~<cuºít.h
>

44 
	~<synch.h
>

45 
	~<vm.h
>

46 
	~<maöbus.h
>

47 
	~<vfs.h
>

48 
	~<devi˚.h
>

49 
	~<sysˇŒ.h
>

50 
	~<ã°.h
>

51 
	~<vîsi⁄.h
>

52 
	~"autoc⁄f.h
"

64 c⁄° 
buûdvîsi⁄
;

65 c⁄° 
buûdc⁄fig
[];

70 c⁄° 
	gh¨v¨d_c›yright
[] =

80 
	$boŸ
()

99 
	`k¥ötf
("\n");

100 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

101 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

102 
	`k¥ötf
("\n");

104 
	`k¥ötf
("Weifeng Jiang's system version %s (%s #%d)\n",

105 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

106 
	`k¥ötf
("\n");

109 
	`øm_boŸ°øp
();

110 
	`¥oc_boŸ°øp
();

111 
	`thªad_boŸ°øp
();

112 
	`h¨d˛ock_boŸ°øp
();

113 
	`vfs_boŸ°øp
();

116 
	`k¥ötf
("DeviceÖrobe...\n");

117 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

118 
	`maöbus_boŸ°øp
();

119 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

121 
	`p£udoc⁄fig
();

122 
	`k¥ötf
("\n");

125 
	`vm_boŸ°øp
();

126 
	`k¥ötf_boŸ°øp
();

127 
	`thªad_°¨t_˝us
();

130 
	`vfs_£tboŸfs
("emu0");

136 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

137 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

138 
	}
}

145 
	$shutdown
()

148 
	`k¥ötf
("Shutting down.\n");

150 
	`vfs_˛órboŸfs
();

151 
	`vfs_˛órcurdú
();

152 
	`vfs_unmou¡Æl
();

154 
	`thªad_shutdown
();

156 
	`•lhigh
();

157 
	}
}

169 
	$sys_ªboŸ
(
code
)

171 
code
) {

172 
RB_REBOOT
:

173 
RB_HALT
:

174 
RB_POWEROFF
:

177  
EINVAL
;

180 
	`shutdown
();

182 
code
) {

183 
RB_HALT
:

184 
	`k¥ötf
("The system is halted.\n");

185 
	`maöbus_hÆt
();

187 
RB_REBOOT
:

188 
	`k¥ötf
("Rebooting...\n");

189 
	`maöbus_ªboŸ
();

191 
RB_POWEROFF
:

192 
	`k¥ötf
("The system is halted.\n");

193 
	`maöbus_powîoff
();

197 
	`∑nic
("reboot operation failed\n");

199 
	}
}

206 
	$kmaö
(*
¨gumíts
)

208 
	`boŸ
();

210 
	`míu
(
¨gumíts
);

213 
	}
}

	@kern/startup/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<synch.h
>

41 
	~<vfs.h
>

42 
	~<sfs.h
>

43 
	~<sysˇŒ.h
>

44 
	~<ã°.h
>

45 
	~"›t-synch¥obs.h
"

46 
	~"›t-sfs.h
"

47 
	~"›t-√t.h
"

49 
	~"›t-A2.h
"

55 
	#_PATH_SHELL
 "/bö/sh"

	)

57 
	#MAXMENUARGS
 16

	)

61 
	$gëöãrvÆ
(
time_t
 
s1
, 
uöt32_t
 
ns1
,Åime_à
s2
, uöt32_à
ns2
,

62 
time_t
 *
rs
, 
uöt32_t
 *
∫s
)

64 i‡(
ns2
 < 
ns1
) {

65 
ns2
 += 1000000000;

66 
s2
--;

69 *
∫s
 = 
ns2
 - 
ns1
;

70 *
rs
 = 
s2
 - 
s1
;

71 
	}
}

90 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

92 **
¨gs
 = 
±r
;

93 
¥og«me
[128];

94 
ªsu…
;

96 
	`KASSERT
(
«rgs
 >= 1);

97 #i‡
OPT_A2


99 i‡(
«rgs
 > 2) {

100 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

104 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

106 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

108 #i‡
OPT_A2


109 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
,
¨gs
,
«rgs
);

111 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

113 i‡(
ªsu…
) {

114 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

115 
	`°ªº‹
(
ªsu…
));

120 
	}
}

136 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

138 
¥oc
 *proc;

139 
ªsu…
;

141 #i‡
OPT_SYNCHPROBS


142 
	`k¥ötf
("Warning:ÅhisÖrobably won't work withá "

147 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

148 i‡(
¥oc
 =
NULL
) {

149  
ENOMEM
;

152 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

153 
¥oc
 ,

154 
cmd_¥ogthªad
 ,

155 
¨gs
 , 
«rgs
 );

156 i‡(
ªsu…
) {

157 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

158 
	`¥oc_de°roy
(
¥oc
);

159  
ªsu…
;

162 #ifde‡
UW


165 
	`P
(
no_¥oc_£m
);

169 
	}
}

176 
	$cmd_¥og
(
«rgs
, **
¨gs
)

178 i‡(
«rgs
 < 2) {

179 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

180  
EINVAL
;

184 
¨gs
++;

185 
«rgs
--;

187  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

188 
	}
}

195 
	$cmd_shñl
(
«rgs
, **
¨gs
)

197 ()
¨gs
;

198 i‡(
«rgs
 != 1) {

199 
	`k¥ötf
("Usage: s\n");

200  
EINVAL
;

203 
¨gs
[0] = (*)
_PATH_SHELL
;

205  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

206 
	}
}

213 
	$cmd_chdú
(
«rgs
, **
¨gs
)

215 i‡(
«rgs
 != 2) {

216 
	`k¥ötf
("Usage: cd directory\n");

217  
EINVAL
;

220  
	`vfs_chdú
(
¨gs
[1]);

221 
	}
}

228 
	$cmd_pwd
(
«rgs
, **
¨gs
)

230 
buf
[
PATH_MAX
+1];

231 
ªsu…
;

232 
iovec
 
iov
;

233 
uio
 
ku
;

235 ()
«rgs
;

236 ()
¨gs
;

238 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

239 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

240 i‡(
ªsu…
) {

241 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

242  
ªsu…
;

246 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

249 
	`k¥ötf
("%s\n", 
buf
);

252 
	}
}

259 
	$cmd_sync
(
«rgs
, **
¨gs
)

261 ()
«rgs
;

262 ()
¨gs
;

264 
	`vfs_sync
();

267 
	}
}

274 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

276 ()
«rgs
;

277 ()
¨gs
;

279 
	`∑nic
("UserÑequestedÖanic\n");

281 
	}
}

288 
	$cmd_quô
(
«rgs
, **
¨gs
)

290 ()
«rgs
;

291 ()
¨gs
;

293 
	`vfs_sync
();

294 
	`sys_ªboŸ
(
RB_POWEROFF
);

295 
	`thªad_exô
();

297 
	}
}

305 c⁄° *
	m«me
;

306 (*
	mfunc
)(c⁄° *
	mdevi˚
);

307 } 
	gmou¡èbÀ
[] = {

308 #i‡
OPT_SFS


309 { "sfs", 
sfs_mou¡
 },

311 { 
NULL
, NULL }

316 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

318 *
f°y≥
;

319 *
devi˚
;

320 
i
;

322 i‡(
«rgs
 != 3) {

323 
	`k¥ötf
("Usage: mount fstype device:\n");

324  
EINVAL
;

327 
f°y≥
 = 
¨gs
[1];

328 
devi˚
 = 
¨gs
[2];

331 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

332 
devi˚
[
	`°æí
(device)-1] = 0;

335 
i
=0; 
mou¡èbÀ
[i].
«me
; i++) {

336 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

337  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

340 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

341  
EINVAL
;

342 
	}
}

346 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

348 *
devi˚
;

350 i‡(
«rgs
 != 2) {

351 
	`k¥ötf
("Usage: unmount device:\n");

352  
EINVAL
;

355 
devi˚
 = 
¨gs
[1];

358 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

359 
devi˚
[
	`°æí
(device)-1] = 0;

362  
	`vfs_unmou¡
(
devi˚
);

363 
	}
}

375 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

377 *
devi˚
;

379 i‡(
«rgs
 != 2) {

380 
	`k¥ötf
("Usage: bootfs device\n");

381  
EINVAL
;

384 
devi˚
 = 
¨gs
[1];

387 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

388 
devi˚
[
	`°æí
(device)-1] = 0;

391  
	`vfs_£tboŸfs
(
devi˚
);

392 
	}
}

396 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

398 ()
«rgs
;

399 ()
¨gs
;

401 
	`khóp_¥öt°©s
();

404 
	}
}

408 
	$cmd_ouçutdbthªads
(
«rgs
, **
¨gs
)

410 ()
«rgs
;

411 ()
¨gs
;

413 
dbÊags
 = 
DB_THREADS
;

414 
	`k¥ötf
("Done! Enabled debugging messages DB_THREADS!\n");

417 
	}
}

425 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

427 
˘
, 
hÆf
, 
i
;

429 
	`k¥ötf
("\n");

430 
	`k¥ötf
("%s\n", 
«me
);

432 
i
=
˘
=0; 
x
[i]; i++) {

433 
˘
++;

435 
hÆf
 = (
˘
+1)/2;

437 
i
=0; i<
hÆf
; i++) {

438 
	`k¥ötf
(" %-36s", 
x
[
i
]);

439 i‡(
i
+
hÆf
 < 
˘
) {

440 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

442 
	`k¥ötf
("\n");

445 
	`k¥ötf
("\n");

446 
	}
}

448 c⁄° *
	g›smíu
[] = {

461 
NULL


466 
	$cmd_›smíu
(
n
, **
a
)

468 ()
n
;

469 ()
a
;

471 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

473 
	}
}

475 c⁄° *
	gã°míu
[] = {

483 #i‡
OPT_NET


489 #ifde‡
UW


498 
NULL


503 
	$cmd_ã°míu
(
n
, **
a
)

505 ()
n
;

506 ()
a
;

508 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

509 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

511 
	`k¥ötf
(" (4) TheseÅests may fail until you finishÅhe "

513 
	`k¥ötf
("\n");

516 
	}
}

518 c⁄° *
	gmaömíu
[] = {

521 #i‡
OPT_SYNCHPROBS


523 #ifde‡
UW


530 
NULL


535 
	$cmd_maömíu
(
n
, **
a
)

537 ()
n
;

538 ()
a
;

540 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

542 
	}
}

549 c⁄° *
	m«me
;

550 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

551 } 
	gcmdèbÀ
[] = {

553 { "?", 
cmd_maömíu
 },

554 { "h", 
cmd_maömíu
 },

555 { "hñp", 
cmd_maömíu
 },

556 { "?o", 
cmd_›smíu
 },

557 { "?t", 
cmd_ã°míu
 },

560 { "s", 
cmd_shñl
 },

561 { "p", 
cmd_¥og
 },

562 { "mou¡", 
cmd_mou¡
 },

563 { "unmou¡", 
cmd_unmou¡
 },

564 { "boŸfs", 
cmd_boŸfs
 },

565 { "pf", 
¥ötfûe
 },

566 { "cd", 
cmd_chdú
 },

567 { "pwd", 
cmd_pwd
 },

568 { "sync", 
cmd_sync
 },

569 { "∑nic", 
cmd_∑nic
 },

570 { "q", 
cmd_quô
 },

571 { "exô", 
cmd_quô
 },

572 { "hÆt", 
cmd_quô
 },

574 #i‡
OPT_SYNCHPROBS


576 { "•1", 
whÆem©ög
 },

577 #ifde‡
UW


578 { "•2", 
ˇtmou£
 },

579 { "•3", 
åaffic_simuœti⁄
 },

584 { "kh", 
cmd_khóp°©s
 },

585 {"dth", 
cmd_ouçutdbthªads
 },

588 { "©", 
¨øyã°
 },

589 { "bt", 
bôm≠ã°
 },

590 { "km1", 
mÆlo˘e°
 },

591 { "km2", 
mÆloc°ªss
 },

592 #i‡
OPT_NET


593 { "√t", 
√âe°
 },

595 { "â1", 
thªadã°
 },

596 { "â2", 
thªadã°2
 },

597 { "â3", 
thªadã°3
 },

598 { "sy1", 
£mã°
 },

601 { "sy2", 
lockã°
 },

602 { "sy3", 
cvã°
 },

603 #ifde‡
UW


604 { "uw1", 
uwlockã°1
 },

605 { "uw2", 
uwvm°©°e°
 },

609 { "fs1", 
f°e°
 },

610 { "fs2", 
ªad°ªss
 },

611 { "fs3", 
wrôe°ªss
 },

612 { "fs4", 
wrôe°ªss2
 },

613 { "fs5", 
¸óã°ªss
 },

615 { 
NULL
, NULL }

623 
	$cmd_di•©ch
(*
cmd
)

625 
time_t
 
bef‹e£cs
, 
a·î£cs
, 
£cs
;

626 
uöt32_t
 
bef‹í£cs
, 
a·în£cs
, 
n£cs
;

627 *
¨gs
[
MAXMENUARGS
];

628 
«rgs
=0;

629 *
w‹d
;

630 *
c⁄ãxt
;

631 
i
, 
ªsu…
;

633 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

634 
w‹d
 !
NULL
;

635 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

637 i‡(
«rgs
 >
MAXMENUARGS
) {

638 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

639  
E2BIG
;

641 
¨gs
[
«rgs
++] = 
w‹d
;

644 i‡(
«rgs
==0) {

648 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

649 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

650 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

652 
	`gëtime
(&
bef‹e£cs
, &
bef‹í£cs
);

654 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

656 
	`gëtime
(&
a·î£cs
, &
a·în£cs
);

657 
	`gëöãrvÆ
(
bef‹e£cs
, 
bef‹í£cs
,

658 
a·î£cs
, 
a·în£cs
,

659 &
£cs
, &
n£cs
);

661 
	`k¥ötf
("OperationÅook %lu.%09lu seconds\n",

662 (Ë
£cs
,

663 (Ë
n£cs
);

665  
ªsu…
;

669 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

670  
EINVAL
;

671 
	}
}

682 
	$míu_execuã
(*
löe
, 
ißrgs
)

684 *
comm™d
;

685 *
c⁄ãxt
;

686 
ªsu…
;

688 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

689 
comm™d
 !
NULL
;

690 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

692 i‡(
ißrgs
) {

693 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

696 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

697 i‡(
ªsu…
) {

698 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

699 i‡(
ißrgs
) {

700 
	`∑nic
("FailureÖrocessing kernelárguments\n");

704 
	}
}

724 
	$míu
(*
¨gs
)

726 
buf
[64];

728 
	`míu_execuã
(
¨gs
, 1);

731 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

732 
	`kgës
(
buf
, (buf));

733 
	`míu_execuã
(
buf
, 0);

735 
	}
}

	@kern/synchprobs/catmouse.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<ã°.h
>

33 
	~<˛ock.h
>

34 
	~<thªad.h
>

35 
	~<synch.h
>

36 
	~<synch¥obs.h
>

39 
	#INVALID_ANIMAL_NUM
 (999999)

	)

42 
	gdo_¥öt_°©e
 = 0;

45 
öôülize_bowls
();

46 
˛ónup_bowls
();

47 
ˇt_ót
(
bow umbî
, 
ót_time
, 
ˇt_num
);

48 
ˇt_¶ìp
(
¶ìp_time
);

49 
mou£_ót
(
bow umbî
, 
ót_time
, 
mou£_num
);

50 
mou£_¶ìp
(
¶ìp_time
);

51 
ˇt_simuœti⁄
(*
±r
, 
ˇäumbî
);

52 
mou£_simuœti⁄
(*
±r
, 
mou£numbî
);

53 
¥öt_°©e
();

68 
	gNumBowls
;

69 
	gNumC©s
;

70 
	gNumMi˚
;

71 
	gNumLo›s
;

73 
	gC©E©Time
 = 1;

74 
	gC©SÀïTime
 = 2;

75 
	gMou£E©Time
 = 1;

76 
	gMou£SÀïTime
 = 2;

83 
£m≠h‹e
 *
	gC©Mou£Waô
;

110 
	sbowl
 {

111 vﬁ©ûê
	m™imÆ
;

112 vﬁ©ûê
	mwhich
;

115 
bowl
 *
	gbowls
;

121 vﬁ©ûê
	gótög_ˇts_cou¡
;

126 vﬁ©ûê
	gótög_mi˚_cou¡
;

133 
£m≠h‹e
 *
	gmuãx
;

136 vﬁ©ûê
time_t
 
	gˇt_tŸÆ_waô_£cs
;

137 vﬁ©ûê
uöt32_t
 
	gˇt_tŸÆ_waô_n£cs
;

138 vﬁ©ûê
	gˇt_waô_cou¡
;

139 vﬁ©ûê
time_t
 
	gmou£_tŸÆ_waô_£cs
;

140 vﬁ©ûê
uöt32_t
 
	gmou£_tŸÆ_waô_n£cs
;

141 vﬁ©ûê
	gmou£_waô_cou¡
;

144 
£m≠h‹e
 *
	g≥rf_muãx
;

161 
	$öôülize_bowls
()

163 
i
;

165 
	`KASSERT
(
NumBowls
 > 0);

167 
bowls
 = 
	`kmÆloc
(
NumBowls
*(
bowl
));

168 i‡(
bowls
 =
NULL
) {

169 
	`∑nic
("öôülize_bowls: u«bÀÅÿÆloˇã s∑˚ f‹ %d bowls\n",
NumBowls
);

172 
i
=0;i<
NumBowls
;i++) {

173 
bowls
[
i
].
™imÆ
 = '-';

174 
bowls
[
i
].
which
 = 
INVALID_ANIMAL_NUM
;

176 
ótög_ˇts_cou¡
 = 
ótög_mi˚_cou¡
 = 0;

179 
muãx
 = 
	`£m_¸óã
("bowl mutex",1);

180 i‡(
muãx
 =
NULL
) {

181 
	`∑nic
("initialize_bowls: couldÇot create mutex\n");

184 
≥rf_muãx
 = 
	`£m_¸óã
("stats mutex",1);

185 i‡(
≥rf_muãx
 =
NULL
) {

186 
	`∑nic
("initialize_bowls: couldÇot createÖerf_mutex\n");

189 
ˇt_tŸÆ_waô_£cs
 = 0;

190 
ˇt_tŸÆ_waô_n£cs
 = 0;

191 
ˇt_waô_cou¡
 = 0;

192 
mou£_tŸÆ_waô_£cs
 = 0;

193 
mou£_tŸÆ_waô_n£cs
 = 0;

194 
mou£_waô_cou¡
 = 0;

197 
	}
}

214 
	$˛ónup_bowls
()

216 i‡(
muãx
 !
NULL
) {

217 
	`£m_de°roy
–
muãx
 );

218 
muãx
 = 
NULL
;

220 i‡(
≥rf_muãx
 !
NULL
) {

221 
	`£m_de°roy
–
≥rf_muãx
 );

222 
≥rf_muãx
 = 
NULL
;

224 i‡(
bowls
 !
NULL
) {

225 
	`k‰ì
–(*Ë
bowls
 );

226 
bowls
 = 
NULL
;

228 
	}
}

244 
	$¥öt_°©e_⁄
()

246 
do_¥öt_°©e
 = 1;

247 
	}
}

250 
	$¥öt_°©e_off
()

252 
do_¥öt_°©e
 = 0;

253 
	}
}

275 
	$¥öt_°©e
()

277 
i
;

279 i‡(
NumC©s
 > 100 || 
NumMi˚
 > 100) {

280 
	`∑nic
("Formatting is set upÅo only handleÅwo digitÇumbers for catánd miceÇumbers\n");

283 i‡(!
do_¥öt_°©e
) {

287 
	`k¥ötf
(" E©ög C©s: %3d E©ög Mi˚: %3d ",
ótög_ˇts_cou¡
,

288 
ótög_mi˚_cou¡
);

290 
i
=0;i<
NumBowls
;i++) {

291 
	`k¥ötf
("%c",
bowls
[
i
].
™imÆ
);

292 i‡(
bowls
[
i
].
which
 =
INVALID_ANIMAL_NUM
) {

293 
	`k¥ötf
("%2s", "--");

295 
	`k¥ötf
("%02d",
bowls
[
i
].
which
);

297 
	`k¥ötf
(" ");

299 
	`k¥ötf
("\n");

301 
	}
}

323 
	$ˇt_ót
(
bow umbî
, 
ót_time
, 
ˇt_num
)

327 
	`KASSERT
(
bow umbî
 > 0);

328 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

332 
	`P
(
muãx
);

336 i‡(
bowls
[
bow umbî
-1].
™imÆ
 == 'c') {

338 
	`∑nic
("cat_eat:áttemptÅo make cat %dÉat from bowl %d while cat %d isálreadyÉatingÅhere!\n",

339 
ˇt_num
, 
bow umbî
, 
bowls
[bow umbî-1].
which
);

341 i‡(
ótög_mi˚_cou¡
 > 0) {

343 
	`∑nic
("ˇt_ót:áâem±Åÿmakêˇà%dÉ© whûêmi˚áªÉ©ög!\n", 
ˇt_num
);

345 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
 == '-');

346 
	`KASSERT
(
bowls
[
bow umbî
-1].
which
 =
INVALID_ANIMAL_NUM
);

347 
	`KASSERT
(
ótög_mi˚_cou¡
 == 0);

350 
ótög_ˇts_cou¡
 += 1;

351 
bowls
[
bow umbî
-1].
™imÆ
 = 'c';

352 
bowls
[
bow umbî
-1].
which
 = 
ˇt_num
;

353 
	`¥öt_°©e
();

355 
	`DEBUG
(
DB_SYNCPROB
,"cat %d startsÅoÉatát bowl %d [%d:%d]\n",

356 
ˇt_num
, 
bow umbî
, 
ótög_ˇts_cou¡
, 
ótög_mi˚_cou¡
);

357 
	`V
(
muãx
);

361 
	`˛ock¶ìp
(
ót_time
);

365 
	`P
(
muãx
);

366 
	`KASSERT
(
ótög_ˇts_cou¡
 > 0);

367 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
=='c');

368 
ótög_ˇts_cou¡
 -= 1;

369 
bowls
[
bow umbî
-1].
™imÆ
='-';

370 
bowls
[
bow umbî
-1].
which
=
INVALID_ANIMAL_NUM
;

371 
	`¥öt_°©e
();

373 
	`DEBUG
(
DB_SYNCPROB
,"cat %d finishedÉatingát bowl %d [%d:%d]\n",

374 
ˇt_num
,
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

375 
	`V
(
muãx
);

378 
	}
}

392 
	$ˇt_¶ìp
(
¶ìp_time
)

395 
	`˛ock¶ìp
(
¶ìp_time
);

397 
	}
}

419 
	$mou£_ót
(
bow umbî
, 
ót_time
, 
mou£_num
)

422 
	`KASSERT
(
bow umbî
 > 0);

423 
	`KASSERT
(()
bow umbî
 <
NumBowls
);

427 
	`P
(
muãx
);

431 i‡(
bowls
[
bow umbî
-1].
™imÆ
 == 'm') {

433 
	`∑nic
("mouse_eat:áttemptÅo make mouse %dÉat from bowl %d while mouse %d isÅhere!\n",

434 
mou£_num
, 
bow umbî
, 
bowls
[bow umbî-1].
which
);

436 i‡(
ótög_ˇts_cou¡
 > 0) {

438 
	`∑nic
("mou£_ót:áâem±Åÿmakêmou£ %dÉ© whûêˇt†¨êótög!\n", 
mou£_num
);

440 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
=='-');

441 
	`KASSERT
(
bowls
[
bow umbî
-1].
which
==
INVALID_ANIMAL_NUM
);

442 
	`KASSERT
(
ótög_ˇts_cou¡
 == 0);

445 
ótög_mi˚_cou¡
 += 1;

446 
bowls
[
bow umbî
-1].
™imÆ
 = 'm';

447 
bowls
[
bow umbî
-1].
which
 = 
mou£_num
;

448 
	`¥öt_°©e
();

450 
	`DEBUG
(
DB_SYNCPROB
,"mouse %d startsÅoÉatát bowl %d [%d:%d]\n",

451 
mou£_num
,
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

452 
	`V
(
muãx
);

456 
	`˛ock¶ìp
(
ót_time
);

460 
	`P
(
muãx
);

462 
	`KASSERT
(
ótög_mi˚_cou¡
 > 0);

463 
ótög_mi˚_cou¡
 -= 1;

464 
	`KASSERT
(
bowls
[
bow umbî
-1].
™imÆ
=='m');

465 
	`KASSERT
(
bowls
[
bow umbî
-1].
which
==
mou£_num
);

466 
bowls
[
bow umbî
-1].
™imÆ
='-';

467 
bowls
[
bow umbî
-1].
which
=
INVALID_ANIMAL_NUM
;

468 
	`¥öt_°©e
();

470 
	`DEBUG
(
DB_SYNCPROB
,"mouse %d finishesÉatingát bowl %d [%d:%d]\n",

471 
mou£_num
,
bow umbî
,
ótög_ˇts_cou¡
,
ótög_mi˚_cou¡
);

472 
	`V
(
muãx
);

474 
	}
}

488 
	$mou£_¶ìp
(
¶ìp_time
)

491 
	`˛ock¶ìp
(
¶ìp_time
);

493 
	}
}

512 
	$ˇt_simuœti⁄
(* 
unu£dpoöãr
,

513 
ˇäumbî
)

515 
i
;

516 
bowl
;

517 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

518 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

521 (Ë
unu£dpoöãr
;

522 (Ë
ˇäumbî
;

525 
i
=0;i<
NumLo›s
;i++) {

528 
	`ˇt_¶ìp
(
C©SÀïTime
);

531 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

533 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

534 
	`ˇt_bef‹e_ótög
(
bowl
);

535 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

538 
	`ˇt_ót
(
bowl
, 
C©E©Time
, 
ˇäumbî
);

540 
	`ˇt_a·î_ótög
(
bowl
);

543 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

544 
	`P
(
≥rf_muãx
);

545 
ˇt_tŸÆ_waô_£cs
 +
waô_£c
;

546 
ˇt_tŸÆ_waô_n£cs
 +
waô_n£c
;

547 i‡(
ˇt_tŸÆ_waô_n£cs
 > 1000000000) {

548 
ˇt_tŸÆ_waô_n£cs
 -= 1000000000;

549 
ˇt_tŸÆ_waô_£cs
 ++;

551 
ˇt_waô_cou¡
++;

552 
	`V
(
≥rf_muãx
);

556 
	`V
(
C©Mou£Waô
);

557 
	}
}

576 
	$mou£_simuœti⁄
(* 
unu£dpoöãr
,

577 
mou£numbî
)

579 
i
;

580 
bowl
;

581 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

582 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

585 (Ë
unu£dpoöãr
;

586 (Ë
mou£numbî
;

588 
i
=0;i<
NumLo›s
;i++) {

591 
	`mou£_¶ìp
(
Mou£SÀïTime
);

594 
bowl
 = (()
	`øndom
(Ë% 
NumBowls
) + 1;

596 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

597 
	`mou£_bef‹e_ótög
(
bowl
);

598 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

601 
	`mou£_ót
(
bowl
, 
Mou£E©Time
, 
mou£numbî
);

603 
	`mou£_a·î_ótög
(
bowl
);

606 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

607 
	`P
(
≥rf_muãx
);

608 
mou£_tŸÆ_waô_£cs
 +
waô_£c
;

609 
mou£_tŸÆ_waô_n£cs
 +
waô_n£c
;

610 i‡(
mou£_tŸÆ_waô_n£cs
 > 1000000000) {

611 
mou£_tŸÆ_waô_n£cs
 -= 1000000000;

612 
mou£_tŸÆ_waô_£cs
 ++;

614 
mou£_waô_cou¡
++;

615 
	`V
(
≥rf_muãx
);

619 
	`V
(
C©Mou£Waô
);

620 
	}
}

646 
	$ˇtmou£
(
«rgs
,

647 ** 
¨gs
)

649 
ˇtödex
, 
mou£ödex
, 
îr‹
;

650 
i
;

651 
món_ˇt_waô_u£cs
, 
món_mou£_waô_u£cs
;

652 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

653 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

654 
tŸÆ_bowl_mûli£c⁄ds
, 
tŸÆ_ótög_mûli£c⁄ds
, 
utûiz©i⁄_≥r˚¡
;

657 i‡((
«rgs
 != 9) && (nargs != 5)) {

658 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS\n");

659 
	`k¥ötf
("or\n");

660 
	`k¥ötf
("Usage: <command> NUM_BOWLS NUM_CATS NUM_MICE NUM_LOOPS ");

661 
	`k¥ötf
("CAT_EATING_TIME CAT_SLEEPING_TIME MOUSE_EATING_TIME MOUSE_SLEEPING_TIME\n");

666 
NumBowls
 = 
	`©oi
(
¨gs
[1]);

667 i‡(
NumBowls
 <= 0) {

668 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡bowls: %d\n",
NumBowls
);

671 
NumC©s
 = 
	`©oi
(
¨gs
[2]);

672 i‡(
NumC©s
 < 0) {

673 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡ˇts: %d\n",
NumC©s
);

676 
NumMi˚
 = 
	`©oi
(
¨gs
[3]);

677 i‡(
NumMi˚
 < 0) {

678 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡mi˚: %d\n",
NumMi˚
);

681 
NumLo›s
 = 
	`©oi
(
¨gs
[4]);

682 i‡(
NumLo›s
 <= 0) {

683 
	`k¥ötf
("ˇtmou£: invÆidÇumbî o‡lo›s: %d\n",
NumLo›s
);

687 i‡(
«rgs
 == 9) {

688 
C©E©Time
 = 
	`©oi
(
¨gs
[5]);

689 i‡(
C©E©Time
 < 0) {

690 
	`k¥ötf
("ˇtmou£: invÆid c©É©ögÅime: %d\n",
C©E©Time
);

694 
C©SÀïTime
 = 
	`©oi
(
¨gs
[6]);

695 i‡(
C©SÀïTime
 < 0) {

696 
	`k¥ötf
("ˇtmou£: invÆid c© sÀïögÅime: %d\n",
C©SÀïTime
);

700 
Mou£E©Time
 = 
	`©oi
(
¨gs
[7]);

701 i‡(
Mou£E©Time
 < 0) {

702 
	`k¥ötf
("ˇtmou£: invÆid mou£É©ögÅime: %d\n",
Mou£E©Time
);

706 
Mou£SÀïTime
 = 
	`©oi
(
¨gs
[8]);

707 i‡(
Mou£SÀïTime
 < 0) {

708 
	`k¥ötf
("ˇtmou£: invÆid mou£ sÀïögÅime: %d\n",
Mou£SÀïTime
);

713 i‡((
NumMi˚
 >
INVALID_ANIMAL_NUM
Ë|| (
NumC©s
 >= INVALID_ANIMAL_NUM)) {

714 
	`∑nic
("TryögÅÿu£Åoÿm™y c©†‹ mi˚:Üimô = %d\n", 
INVALID_ANIMAL_NUM
);

717 
	`k¥ötf
("Using %d bowls, %d cats,ánd %d mice. Looping %dÅimes.\n",

718 
NumBowls
,
NumC©s
,
NumMi˚
,
NumLo›s
);

719 
	`k¥ötf
("Usög c©É©ögÅimê%d, c© sÀïögÅimê%d\n", 
C©E©Time
, 
C©SÀïTime
);

720 
	`k¥ötf
("Usög mou£É©ögÅimê%d, mou£ sÀïögÅimê%d\n", 
Mou£E©Time
, 
Mou£SÀïTime
);

724 
C©Mou£Waô
 = 
	`£m_¸óã
("CatMouseWait",0);

725 i‡(
C©Mou£Waô
 =
NULL
) {

726 
	`∑nic
("catmouse: couldÇot create semaphore\n");

730 
	`öôülize_bowls
();

733 
	`ˇtmou£_sync_öô
(
NumBowls
);

736 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

742 
ˇtödex
 = 0; c©ödex < 
NumC©s
; catindex++) {

743 
îr‹
 = 
	`thªad_f‹k
("ˇt_simuœti⁄Åhªad", 
NULL
, 
ˇt_simuœti⁄
, NULL, 
ˇtödex
);

744 i‡(
îr‹
) {

745 
	`∑nic
("ˇt_simuœti⁄:Åhªad_f‹k faûed: %s\n", 
	`°ªº‹
(
îr‹
));

747 i‡(
ˇtödex
 < 
NumMi˚
) {

748 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
ˇtödex
);

749 i‡(
îr‹
) {

750 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

755 
mou£ödex
 = 
ˇtödex
; mou£ödex < 
NumMi˚
; mouseindex++) {

756 
îr‹
 = 
	`thªad_f‹k
("mou£_simuœti⁄Åhªad", 
NULL
, 
mou£_simuœti⁄
, NULL, 
mou£ödex
);

757 i‡(
îr‹
) {

758 
	`∑nic
("mou£_simuœti⁄:Åhªad_f‹k faûed: %s\n",
	`°ªº‹
(
îr‹
));

764 
i
=0;i<(
NumC©s
+
NumMi˚
);i++) {

765 
	`P
(
C©Mou£Waô
);

769 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

771 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

773 
tŸÆ_bowl_mûli£c⁄ds
 = (
waô_£c
*1000 + 
waô_n£c
/1000000)*
NumBowls
;

774 
tŸÆ_ótög_mûli£c⁄ds
 = (
NumC©s
*
C©E©Time
 + 
NumMi˚
*
Mou£E©Time
)*
NumLo›s
*1000;

775 i‡(
tŸÆ_bowl_mûli£c⁄ds
 > 0) {

776 
utûiz©i⁄_≥r˚¡
 = 
tŸÆ_ótög_mûli£c⁄ds
*100/
tŸÆ_bowl_mûli£c⁄ds
;

777 
	`k¥ötf
("STATS: Bow»utûiz©i⁄: %d%%\n",
utûiz©i⁄_≥r˚¡
);

781 
	`£m_de°roy
(
C©Mou£Waô
);

784 
	`ˇtmou£_sync_˛ónup
(
NumBowls
);

787 
	`˛ónup_bowls
();

789 i‡(
ˇt_waô_cou¡
 > 0) {

791 
món_ˇt_waô_u£cs
 = (
ˇt_tŸÆ_waô_£cs
*1000000+
ˇt_tŸÆ_waô_n£cs
/1000)/
ˇt_waô_cou¡
;

792 
	`k¥ötf
("STATS: Mean cat waitingÅime: %d.%d seconds\n",

793 
món_ˇt_waô_u£cs
/1000000,mean_cat_wait_usecs%1000000);

795 i‡(
mou£_waô_cou¡
 > 0) {

797 
món_mou£_waô_u£cs
 = (
mou£_tŸÆ_waô_£cs
*1000000+
mou£_tŸÆ_waô_n£cs
/1000)/
mou£_waô_cou¡
;

798 
	`k¥ötf
("STATS: Mean mouse waitingÅime: %d.%d seconds\n",

799 
món_mou£_waô_u£cs
/1000000,mean_mouse_wait_usecs%1000000);

803 
	}
}

	@kern/synchprobs/catmouse_synch.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<synch¥obs.h
>

4 
	~<synch.h
>

22 
£m≠h‹e
 *
	gglobÆC©Mou£Sem
;

34 
	$ˇtmou£_sync_öô
(
bowls
)

38 ()
bowls
;

39 
globÆC©Mou£Sem
 = 
	`£m_¸óã
("globalCatMouseSem",1);

40 i‡(
globÆC©Mou£Sem
 =
NULL
) {

41 
	`∑nic
("couldÇot create global CatMouse synchronization semaphore");

44 
	}
}

55 
	$ˇtmou£_sync_˛ónup
(
bowls
)

58 ()
bowls
;

59 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

60 
	`£m_de°roy
(
globÆC©Mou£Sem
);

61 
	}
}

77 
	$ˇt_bef‹e_ótög
(
bowl
)

80 ()
bowl
;

81 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

82 
	`P
(
globÆC©Mou£Sem
);

83 
	}
}

99 
	$ˇt_a·î_ótög
(
bowl
)

102 ()
bowl
;

103 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

104 
	`V
(
globÆC©Mou£Sem
);

105 
	}
}

120 
	$mou£_bef‹e_ótög
(
bowl
)

123 ()
bowl
;

124 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

125 
	`P
(
globÆC©Mou£Sem
);

126 
	}
}

142 
	$mou£_a·î_ótög
(
bowl
)

145 ()
bowl
;

146 
	`KASSERT
(
globÆC©Mou£Sem
 !
NULL
);

147 
	`V
(
globÆC©Mou£Sem
);

148 
	}
}

	@kern/synchprobs/traffic.c

23 
	~<ty≥s.h
>

24 
	~<lib.h
>

25 
	~<ã°.h
>

26 
	~<˛ock.h
>

27 
	~<thªad.h
>

28 
	~<synch.h
>

29 
	~<synch¥obs.h
>

30 
	~<kîn/î∫o.h
>

44 
	#MAX_THREADS
 10

	)

46 
	gNumIãøti⁄s
 = 10;

47 
	gNumThªads
 = 5;

48 
	gI¡îAºivÆTime
 = 1;

49 
	gSîvi˚Time
 = 1;

56 
£m≠h‹e
 *
	gSimuœti⁄Waô
;

70 
	sVehi˛es


72 
Dúe˘i⁄
 
	m‹igö
;

73 
Dúe˘i⁄
 
	mde°ö©i⁄
;

74 } 
	tVehi˛e
;

78 
Vehi˛e
 * vﬁ©ûê
	gvehi˛es
[
MAX_THREADS
];

80 
£m≠h‹e
 *
	gmuãx
;

83 vﬁ©ûê
time_t
 
	gtŸÆ_waô_£cs
[4];

84 vﬁ©ûê
uöt32_t
 
	gtŸÆ_waô_n£cs
[4];

85 vﬁ©ûê
	gwaô_cou¡
[4];

87 
£m≠h‹e
 *
	g≥rf_muãx
;

90 
time_t
 
	g°¨t_£c
, 
	gíd_£c
;

91 
uöt32_t
 
	g°¨t_n£c
, 
	gíd_n£c
;

94 
öôülize_°©e
();

95 
˛ónup_°©e
();

96 
¥öt_dúe˘i⁄
(
Dúe˘i⁄
 
d
);

97 
¥öt_≥rf_°©s
();

98 
vehi˛e_simuœti⁄
(*
±r
, 
thªad_num
);

99 
boﬁ
 
right_tu∫
(
Vehi˛e
 *
v
);

100 
check_c⁄°øöts
(
thªad_num
);

116 
	$¥öt_dúe˘i⁄
(
Dúe˘i⁄
 
d
) {

117 
d
)

119 
n‹th
:

120 
	`k¥ötf
("N");

122 
ó°
:

123 
	`k¥ötf
("E");

125 
south
:

126 
	`k¥ötf
("S");

128 
we°
:

129 
	`k¥ötf
("W");

132 
	}
}

148 
	$¥öt_≥rf_°©s
() {

149 
i
;

150 
waô_m£cs
,
món_waô_m£cs
;

151 
tŸÆ_waô_m£cs
 = 0;

152 
tŸÆ_cou¡
 = 0;

153 
sim_m£c
;

154 
time_t
 
run_£c
;

155 
uöt32_t
 
run_n£c
;

158 
i
=0;i<4;i++) {

159 
	`¥öt_dúe˘i⁄
((
Dúe˘i⁄
)
i
);

160 
	`k¥ötf
(":\t");

161 i‡(
waô_cou¡
[
i
] > 0) {

162 
waô_m£cs
 = (
tŸÆ_waô_£cs
[
i
]*1000+
tŸÆ_waô_n£cs
[i]/1000000);

163 
tŸÆ_waô_m£cs
 +
waô_m£cs
;

165 
món_waô_m£cs
 = 
waô_m£cs
/
waô_cou¡
[
i
];

166 
tŸÆ_cou¡
 +
waô_cou¡
[
i
];

167 
	`k¥ötf
("%d vehi˛es,ávîagê%d.%03d sec⁄d†waôög\n",
waô_cou¡
[
i
], 
món_waô_m£cs
/1000,mean_wait_msecs%1000);

169 
	`k¥ötf
("0 vehicles,áverage 0.000 seconds\n");

173 i‡(
tŸÆ_cou¡
 > 0) {

174 
	`k¥ötf
("Æl:\t%d vehi˛es,ávîagê%d.%03d sec⁄d†waôög\n",
tŸÆ_cou¡
,

175 (
tŸÆ_waô_m£cs
/
tŸÆ_cou¡
)/1000,

176 (
tŸÆ_waô_m£cs
/
tŸÆ_cou¡
)%1000);

178 
	`k¥ötf
("all:\t0 vehicles,áverage 0.000 seconds waiting\n");

181 
	`gëöãrvÆ
(
°¨t_£c
,
°¨t_n£c
,
íd_£c
,
íd_n£c
,&
run_£c
,&
run_n£c
);

182 
sim_m£c
 = 
run_£c
*1000;

183 
sim_m£c
 +
run_n£c
/1000000;

184 
	`k¥ötf
("Simulation: %d.%03d seconds, %d vehicles\n",

185 
sim_m£c
/1000,

186 
sim_m£c
%1000,

187 
tŸÆ_cou¡
);

188 
	}
}

206 
boﬁ


207 
	$right_tu∫
(
Vehi˛e
 *
v
) {

208 
	`KASSERT
(
v
 !
NULL
);

209 i‡(((
v
->
‹igö
 =
we°
Ë&& (v->
de°ö©i⁄
 =
south
)) ||

210 ((
v
->
‹igö
 =
south
Ë&& (v->
de°ö©i⁄
 =
ó°
)) ||

211 ((
v
->
‹igö
 =
ó°
Ë&& (v->
de°ö©i⁄
 =
n‹th
)) ||

212 ((
v
->
‹igö
 =
n‹th
Ë&& (v->
de°ö©i⁄
 =
we°
))) {

213  
åue
;

215  
Ál£
;

217 
	}
}

236 
	$check_c⁄°øöts
(
thªad_num
) {

237 
i
;

238 
	`KASSERT
(
thªad_num
 < 
NumThªads
);

240 
i
=0;i<
NumThªads
;i++) {

241 i‡((
i
==
thªad_num
Ë|| (
vehi˛es
[i] =
NULL
)) ;

243 i‡(
vehi˛es
[
i
]->
‹igö
 =vehi˛es[
thªad_num
]->origin) ;

245 i‡((
vehi˛es
[
i
]->
‹igö
 =vehi˛es[
thªad_num
]->
de°ö©i⁄
) &&

246 (
vehi˛es
[
i
]->
de°ö©i⁄
 =vehi˛es[
thªad_num
]->
‹igö
)) ;

249 i‡((
	`right_tu∫
(
vehi˛es
[
i
]Ë||Ñight_tu∫(vehi˛es[
thªad_num
])) &&

250 (
vehi˛es
[
thªad_num
]->
de°ö©i⁄
 !vehi˛es[
i
]->destination)) ;

254 
	`k¥ötf
("Vehicle A: ");

255 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
i
]->
‹igö
);

256 
	`k¥ötf
("->");

257 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
i
]->
de°ö©i⁄
);

258 
	`k¥ötf
("\n");

259 
	`k¥ötf
("Vehicle B: ");

260 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
thªad_num
]->
‹igö
);

261 
	`k¥ötf
("->");

262 
	`¥öt_dúe˘i⁄
(
vehi˛es
[
thªad_num
]->
de°ö©i⁄
);

263 
	`k¥ötf
("\n");

264 
	`∑nic
("intersection synchronization constraint violation!\n");

266 
	}
}

282 
	$öôülize_°©e
()

284 
i
;

285 
i
=0;i<
MAX_THREADS
;i++) {

286 
vehi˛es
[
i
] = (
Vehi˛e
 * vﬁ©ûe)
NULL
;

288 
i
=0;i<4;i++) {

289 
tŸÆ_waô_£cs
[
i
] = 
tŸÆ_waô_n£cs
[i] = 
waô_cou¡
[i] = 0;

291 
muãx
 = 
	`£m_¸óã
("Vehicle Mutex",1);

292 i‡(
muãx
 =
NULL
) {

293 
	`∑nic
("couldÇot create vehicle mutex semaphore\n");

295 
≥rf_muãx
 = 
	`£m_¸óã
("PerfMutex",1);

296 i‡(
≥rf_muãx
 =
NULL
) {

297 
	`∑nic
("couldÇot createÖerf_mutex semaphore\n");

299 
Simuœti⁄Waô
 = 
	`£m_¸óã
("SimulationWait",0);

300 i‡(
Simuœti⁄Waô
 =
NULL
) {

301 
	`∑nic
("couldÇot create SimulationWait semaphore\n");

304 
	`öãr£˘i⁄_sync_öô
();

306 
	}
}

323 
	$˛ónup_°©e
()

325 
	`£m_de°roy
(
muãx
);

326 
	`£m_de°roy
(
≥rf_muãx
);

327 
	`£m_de°roy
(
Simuœti⁄Waô
);

328 
	`öãr£˘i⁄_sync_˛ónup
();

329 
	}
}

344 
	$ö_öãr£˘i⁄
() {

345 
	`˛ock¶ìp
(
Sîvi˚Time
);

346 
	}
}

369 
	$vehi˛e_simuœti⁄
(* 
unu£dpoöãr
,

370 
thªad_num
)

372 
i
;

373 
Vehi˛e
 
v
;

374 
time_t
 
bef‹e_£c
, 
a·î_£c
, 
waô_£c
;

375 
uöt32_t
 
bef‹e_n£c
, 
a·î_n£c
, 
waô_n£c
;

376 
¶ì±ime
;

378 (Ë
unu£dpoöãr
;

380 
	`KASSERT
(()
thªad_num
 < 
NumThªads
);

381 
i
=0;i<
NumIãøti⁄s
;i++) {

385 
¶ì±ime
 = 
I¡îAºivÆTime
 + 
	`øndom
()%3 - 1;

386 
	`KASSERT
(
¶ì±ime
 >
I¡îAºivÆTime
-1);

387 
	`KASSERT
(
¶ì±ime
 <
I¡îAºivÆTime
+1);

389 
	`˛ock¶ìp
(
¶ì±ime
);

391 i‡(
	`øndom
()%
NumThªads
 < 
thªad_num
) {

392 
	`thªad_yõld
();

396 
v
.
‹igö
 = 
	`øndom
()%4;

398 
v
.
de°ö©i⁄
 = v.
‹igö
 + (
	`øndom
()%3) + 1;

399 i‡(
v
.
de°ö©i⁄
 >= 4) {

400 
v
.
de°ö©i⁄
 = v.destination % 4;

402 
	`KASSERT
(4 > 
v
.
‹igö
);

403 
	`KASSERT
(4 > 
v
.
de°ö©i⁄
);

404 
	`KASSERT
(
v
.
‹igö
 !v.
de°ö©i⁄
);

410 
	`gëtime
(&
bef‹e_£c
,&
bef‹e_n£c
);

411 
	`öãr£˘i⁄_bef‹e_íåy
(
v
.
‹igö
, v.
de°ö©i⁄
);

412 
	`gëtime
(&
a·î_£c
,&
a·î_n£c
);

419 
	`P
(
muãx
);

420 
	`KASSERT
(
vehi˛es
[
thªad_num
] =
NULL
);

421 
vehi˛es
[
thªad_num
] = &
v
;

426 
	`check_c⁄°øöts
(
thªad_num
);

427 
	`V
(
muãx
);

430 
	`ö_öãr£˘i⁄
();

434 
	`P
(
muãx
);

435 
	`KASSERT
(
vehi˛es
[
thªad_num
] =&
v
);

436 
vehi˛es
[
thªad_num
] = 
NULL
;

437 
	`V
(
muãx
);

440 
	`öãr£˘i⁄_a·î_exô
(
v
.
‹igö
, v.
de°ö©i⁄
);

442 
	`gëöãrvÆ
(
bef‹e_£c
,
bef‹e_n£c
,
a·î_£c
,
a·î_n£c
,&
waô_£c
,&
waô_n£c
);

443 
	`P
(
≥rf_muãx
);

444 
tŸÆ_waô_£cs
[
v
.
‹igö
] +
waô_£c
;

445 
tŸÆ_waô_n£cs
[
v
.
‹igö
] +
waô_n£c
;

446 i‡(
tŸÆ_waô_n£cs
[
v
.
‹igö
] > 1000000000) {

447 
tŸÆ_waô_n£cs
[
v
.
‹igö
] -= 1000000000;

448 
tŸÆ_waô_£cs
[
v
.
‹igö
] ++;

450 
waô_cou¡
[
v
.
‹igö
]++;

451 
	`V
(
≥rf_muãx
);

455 
	`V
(
Simuœti⁄Waô
);

456 
	}
}

478 
	$åaffic_simuœti⁄
(
«rgs
,

479 ** 
¨gs
)

481 
i
;

482 
îr‹
;

484 i‡((
«rgs
 != 1) && (nargs != 5)) {

485 
	`k¥ötf
("Usage: <command> [threads iterations interarrivaltime servicetime\n");

486  
EINVAL
;

489 i‡(
«rgs
 == 5) {

490 
NumThªads
 = 
	`©oi
(
¨gs
[1]);

491 i‡(
NumThªads
 <0 || NumThªad†> 
MAX_THREADS
) {

492 
	`k¥ötf
("övÆidÇumbî o‡thªads: %d\n",
NumThªads
);

493  
EINVAL
;

495 
NumIãøti⁄s
 = 
	`©oi
(
¨gs
[2]);

496 i‡(
NumIãøti⁄s
 < 0) {

497 
	`k¥ötf
("övÆidÇumbî o‡ôî©i⁄†≥∏thªad: %d\n",
NumIãøti⁄s
);

498  
EINVAL
;

500 
I¡îAºivÆTime
 = 
	`©oi
(
¨gs
[3]);

501 i‡(
I¡îAºivÆTime
 < 0) {

502 
	`k¥ötf
("övÆid i¡î¨rivÆÅime: %d\n",
I¡îAºivÆTime
);

503  
EINVAL
;

505 
Sîvi˚Time
 = 
	`©oi
(
¨gs
[4]);

506 i‡(
Sîvi˚Time
 < 0) {

507 
	`k¥ötf
("övÆid sîvi˚Åime: %d\n",
Sîvi˚Time
);

508  
EINVAL
;

512 
	`k¥ötf
("Threads: %d Iterations: %d InterarrivalÅime: %d ServiceÅime: %d\n",

513 
NumThªads
,
NumIãøti⁄s
,
I¡îAºivÆTime
,
Sîvi˚Time
);

516 
	`öôülize_°©e
();

519 
	`gëtime
(&
°¨t_£c
,&
°¨t_n£c
);

521 
i
 = 0; i < 
NumThªads
; i++) {

522 
îr‹
 = 
	`thªad_f‹k
("vehi˛e_simuœti⁄Åhªad", 
NULL
, 
vehi˛e_simuœti⁄
, NULL, 
i
);

523 i‡(
îr‹
) {

524 
	`∑nic
("åaffic_simuœti⁄:Åhªad_f‹k faûed: %s\n", 
	`°ªº‹
(
îr‹
));

529 
i
=0;i<
NumThªads
;i++) {

530 
	`P
(
Simuœti⁄Waô
);

534 
	`gëtime
(&
íd_£c
,&
íd_n£c
);

537 
	`˛ónup_°©e
();

540 
	`¥öt_≥rf_°©s
();

543 
	}
}

	@kern/synchprobs/traffic_synch.c

1 
	~<ty≥s.h
>

2 
	~<lib.h
>

3 
	~<synch¥obs.h
>

4 
	~<synch.h
>

5 
	~<›t-A1.h
>

25 
lock
 *
	göãr£˘i⁄Lock
;

28 
cv
 *
	gnw
;

29 
cv
 *
	gns
;

30 
cv
 *
	g√
;

31 
cv
 *
	gws
;

32 
cv
 *
	gwe
;

33 
cv
 *
	gwn
;

34 
cv
 *
	g£
;

35 
cv
 *
	g¢
;

36 
cv
 *
	gsw
;

37 
cv
 *
	gí
;

38 
cv
 *
	gew
;

39 
cv
 *
	ges
;

43 vﬁ©ûê
	gwcou¡
[12];

53 
	$öãr£˘i⁄_sync_öô
()

56 
öãr£˘i⁄Lock
 = 
	`lock_¸óã
("intersectionLock");

57 
nw
 = 
	`cv_¸óã
("nw");

58 
ns
 = 
	`cv_¸óã
("ns");

59 
√
 = 
	`cv_¸óã
("ne");

60 
ws
 = 
	`cv_¸óã
("ws");

61 
we
 = 
	`cv_¸óã
("we");

62 
wn
 = 
	`cv_¸óã
("wn");

63 
£
 = 
	`cv_¸óã
("se");

64 
¢
 = 
	`cv_¸óã
("sn");

65 
sw
 = 
	`cv_¸óã
("sw");

66 
í
 = 
	`cv_¸óã
("en");

67 
ew
 = 
	`cv_¸óã
("ew");

68 
es
 = 
	`cv_¸óã
("es");

69 
i
 = 0; i < 12; i++) {

70 
wcou¡
[
i
] = 0;

73 i‡(
öãr£˘i⁄Lock
 =
NULL
) {

74 
	`∑nic
("couldÇot create Lock");

76 i‡(
nw
 =
NULL
 || 
ns
 =NULL || 
√
 == NULL ||

77 
ws
 =
NULL
 || 
we
 =NULL || 
wn
 == NULL ||

78 
£
 =
NULL
 || 
¢
 =NULL || 
sw
 == NULL ||

79 
í
 =
NULL
 || 
ew
 =NULL || 
es
 == NULL) {

80 
	`∑nic
("couldÇot creat CVs");

83 
	}
}

93 
	$öãr£˘i⁄_sync_˛ónup
()

96 
	`KASSERT
(
öãr£˘i⁄Lock
 !
NULL
);

97 
	`KASSERT
(
nw
 !
NULL
);

98 
	`KASSERT
(
ns
 !
NULL
);

99 
	`KASSERT
(
√
 !
NULL
);

100 
	`KASSERT
(
ws
 !
NULL
);

101 
	`KASSERT
(
we
 !
NULL
);

102 
	`KASSERT
(
wn
 !
NULL
);

103 
	`KASSERT
(
£
 !
NULL
);

104 
	`KASSERT
(
¢
 !
NULL
);

105 
	`KASSERT
(
sw
 !
NULL
);

106 
	`KASSERT
(
í
 !
NULL
);

107 
	`KASSERT
(
ew
 !
NULL
);

108 
	`KASSERT
(
es
 !
NULL
);

110 
	`lock_de°roy
(
öãr£˘i⁄Lock
);

111 
	`cv_de°roy
(
nw
);

112 
	`cv_de°roy
(
ns
);

113 
	`cv_de°roy
(
√
);

114 
	`cv_de°roy
(
ws
);

115 
	`cv_de°roy
(
we
);

116 
	`cv_de°roy
(
wn
);

117 
	`cv_de°roy
(
£
);

118 
	`cv_de°roy
(
¢
);

119 
	`cv_de°roy
(
sw
);

120 
	`cv_de°roy
(
í
);

121 
	`cv_de°roy
(
ew
);

122 
	`cv_de°roy
(
es
);

123 
	}
}

146 
	$öãr£˘i⁄_bef‹e_íåy
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
)

149 
	`KASSERT
(
öãr£˘i⁄Lock
 !
NULL
);

150 
	`KASSERT
(
‹igö
 !
de°ö©i⁄
);

152 
	`lock_acquúe
(
öãr£˘i⁄Lock
);

155 i‡(
‹igö
 =
n‹th
) {

156 i‡(
de°ö©i⁄
 =
we°
) {

157 
wcou¡
[0] != 0) {

158 
	`cv_waô
(
nw
, 
öãr£˘i⁄Lock
);

160 
wcou¡
[8]++;

161 
wcou¡
[10]++;

163 } i‡(
de°ö©i⁄
 =
south
) {

164 
wcou¡
[1] != 0) {

165 
	`cv_waô
(
ns
, 
öãr£˘i⁄Lock
);

167 
wcou¡
[3]++;

168 
wcou¡
[4]++;

169 
wcou¡
[5]++;

170 
wcou¡
[8]++;

171 
wcou¡
[10]++;

172 
wcou¡
[11]++;

174 
wcou¡
[2] != 0) {

175 
	`cv_waô
(
√
, 
öãr£˘i⁄Lock
);

178 
wcou¡
[4]++;

179 
wcou¡
[5]++;

180 
wcou¡
[6]++;

181 
wcou¡
[7]++;

182 
wcou¡
[8]++;

183 
wcou¡
[10]++;

184 
wcou¡
[11]++;

188 i‡(
‹igö
 =
we°
) {

189 i‡(
de°ö©i⁄
 =
south
) {

190 
wcou¡
[3] != 0) {

191 
	`cv_waô
(
ws
, 
öãr£˘i⁄Lock
);

193 
wcou¡
[1]++;

195 
wcou¡
[11]++;

196 } i‡(
de°ö©i⁄
 =
ó°
) {

197 
wcou¡
[4] != 0) {

198 
	`cv_waô
(
we
, 
öãr£˘i⁄Lock
);

200 
wcou¡
[1]++;

201 
wcou¡
[2]++;

202 
wcou¡
[6]++;

203 
wcou¡
[7]++;

204 
wcou¡
[8]++;

205 
wcou¡
[11]++;

207 
wcou¡
[5] != 0) {

208 
	`cv_waô
(
wn
, 
öãr£˘i⁄Lock
);

210 
wcou¡
[1]++;

211 
wcou¡
[2]++;

213 
wcou¡
[7]++;

214 
wcou¡
[8]++;

215 
wcou¡
[9]++;

216 
wcou¡
[10]++;

217 
wcou¡
[11]++;

221 i‡(
‹igö
 =
south
) {

222 i‡(
de°ö©i⁄
 =
ó°
) {

223 
wcou¡
[6] != 0) {

224 
	`cv_waô
(
£
, 
öãr£˘i⁄Lock
);

226 
wcou¡
[2]++;

227 
wcou¡
[4]++;

229 } i‡(
de°ö©i⁄
 =
n‹th
) {

230 
wcou¡
[7] != 0) {

231 
	`cv_waô
(
¢
, 
öãr£˘i⁄Lock
);

233 
wcou¡
[2]++;

234 
wcou¡
[4]++;

235 
wcou¡
[5]++;

236 
wcou¡
[9]++;

237 
wcou¡
[10]++;

238 
wcou¡
[11]++;

240 
wcou¡
[8] != 0) {

241 
	`cv_waô
(
sw
, 
öãr£˘i⁄Lock
);

243 
wcou¡
[0]++;

244 
wcou¡
[1]++;

245 
wcou¡
[2]++;

246 
wcou¡
[4]++;

247 
wcou¡
[5]++;

249 
wcou¡
[10]++;

250 
wcou¡
[11]++;

255 i‡(
de°ö©i⁄
 =
n‹th
) {

256 
wcou¡
[9] != 0) {

257 
	`cv_waô
(
í
, 
öãr£˘i⁄Lock
);

259 
wcou¡
[5]++;

260 
wcou¡
[7]++;

262 } i‡(
de°ö©i⁄
 =
we°
) {

263 
wcou¡
[10] != 0) {

264 
	`cv_waô
(
ew
, 
öãr£˘i⁄Lock
);

266 
wcou¡
[0]++;

267 
wcou¡
[1]++;

268 
wcou¡
[2]++;

269 
wcou¡
[5]++;

270 
wcou¡
[7]++;

271 
wcou¡
[8]++;

273 
wcou¡
[11] != 0) {

274 
	`cv_waô
(
es
, 
öãr£˘i⁄Lock
);

277 
wcou¡
[1]++;

278 
wcou¡
[2]++;

279 
wcou¡
[3]++;

280 
wcou¡
[4]++;

281 
wcou¡
[5]++;

282 
wcou¡
[7]++;

283 
wcou¡
[8]++;

287 
	`lock_ªÀa£
(
öãr£˘i⁄Lock
);

288 
	}
}

304 
	$öãr£˘i⁄_a·î_exô
(
Dúe˘i⁄
 
‹igö
, Dúe˘i⁄ 
de°ö©i⁄
)

307 
	`KASSERT
(
öãr£˘i⁄Lock
 !
NULL
);

308 
	`KASSERT
(
‹igö
 !
de°ö©i⁄
);

310 
	`lock_acquúe
(
öãr£˘i⁄Lock
);

312 i‡(
‹igö
 =
n‹th
) {

313 i‡(
de°ö©i⁄
 =
we°
) {

314 
wcou¡
[8]--;

315 
wcou¡
[10]--;

317 i‡(
wcou¡
[8] == 0) {

318 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

320 i‡(
wcou¡
[10] == 0) {

321 
	`cv_brﬂdˇ°
(
ew
, 
öãr£˘i⁄Lock
);

326 } i‡(
de°ö©i⁄
 =
south
) {

327 
wcou¡
[3]--;

328 
wcou¡
[4]--;

329 
wcou¡
[5]--;

330 
wcou¡
[8]--;

331 
wcou¡
[10]--;

332 
wcou¡
[11]--;

333 i‡(
wcou¡
[3] == 0) {

334 
	`cv_brﬂdˇ°
(
ws
, 
öãr£˘i⁄Lock
);

336 i‡(
wcou¡
[4] == 0) {

337 
	`cv_brﬂdˇ°
(
we
, 
öãr£˘i⁄Lock
);

339 i‡(
wcou¡
[5] == 0) {

340 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

342 i‡(
wcou¡
[8] == 0) {

343 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

345 i‡(
wcou¡
[10] == 0) {

346 
	`cv_brﬂdˇ°
(
ew
, 
öãr£˘i⁄Lock
);

348 i‡(
wcou¡
[11] == 0) {

349 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

353 
wcou¡
[4]--;

354 
wcou¡
[5]--;

355 
wcou¡
[6]--;

356 
wcou¡
[7]--;

357 
wcou¡
[8]--;

358 
wcou¡
[10]--;

359 
wcou¡
[11]--;

363 i‡(
wcou¡
[4] == 0) {

364 
	`cv_brﬂdˇ°
(
we
, 
öãr£˘i⁄Lock
);

366 i‡(
wcou¡
[5] == 0) {

367 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

369 i‡(
wcou¡
[6] == 0) {

370 
	`cv_brﬂdˇ°
(
£
, 
öãr£˘i⁄Lock
);

372 i‡(
wcou¡
[7] == 0) {

373 
	`cv_brﬂdˇ°
(
¢
, 
öãr£˘i⁄Lock
);

375 i‡(
wcou¡
[8] == 0) {

376 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

378 i‡(
wcou¡
[10] == 0) {

379 
	`cv_brﬂdˇ°
(
ew
, 
öãr£˘i⁄Lock
);

381 i‡(
wcou¡
[11] == 0) {

382 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

385 } i‡(
‹igö
 =
we°
) {

386 i‡(
de°ö©i⁄
 =
south
) {

387 
wcou¡
[1]--;

389 
wcou¡
[11]--;

390 i‡(
wcou¡
[1] == 0) {

391 
	`cv_brﬂdˇ°
(
ns
, 
öãr£˘i⁄Lock
);

396 i‡(
wcou¡
[11] == 0) {

397 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

399 } i‡(
de°ö©i⁄
 =
ó°
) {

400 
wcou¡
[1]--;

401 
wcou¡
[2]--;

402 
wcou¡
[6]--;

403 
wcou¡
[7]--;

404 
wcou¡
[8]--;

405 
wcou¡
[11]--;

406 i‡(
wcou¡
[1] == 0) {

407 
	`cv_brﬂdˇ°
(
ns
, 
öãr£˘i⁄Lock
);

409 i‡(
wcou¡
[2] == 0) {

410 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

412 i‡(
wcou¡
[6] == 0) {

413 
	`cv_brﬂdˇ°
(
£
, 
öãr£˘i⁄Lock
);

415 i‡(
wcou¡
[7] == 0) {

416 
	`cv_brﬂdˇ°
(
¢
, 
öãr£˘i⁄Lock
);

418 i‡(
wcou¡
[8] == 0) {

419 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

421 i‡(
wcou¡
[11] == 0) {

422 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

425 
wcou¡
[1]--;

426 
wcou¡
[2]--;

428 
wcou¡
[7]--;

429 
wcou¡
[8]--;

430 
wcou¡
[9]--;

431 
wcou¡
[10]--;

432 
wcou¡
[11]--;

433 i‡(
wcou¡
[1] == 0) {

434 
	`cv_brﬂdˇ°
(
ns
, 
öãr£˘i⁄Lock
);

436 i‡(
wcou¡
[2] == 0) {

437 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

442 i‡(
wcou¡
[7] == 0) {

443 
	`cv_brﬂdˇ°
(
¢
, 
öãr£˘i⁄Lock
);

445 i‡(
wcou¡
[8] == 0) {

446 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

448 i‡(
wcou¡
[9] == 0) {

449 
	`cv_brﬂdˇ°
(
í
, 
öãr£˘i⁄Lock
);

451 i‡(
wcou¡
[10] == 0) {

452 
	`cv_brﬂdˇ°
(
ew
, 
öãr£˘i⁄Lock
);

454 i‡(
wcou¡
[11] == 0) {

455 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

459 } i‡(
‹igö
 =
south
) {

460 i‡(
de°ö©i⁄
 =
ó°
) {

461 
wcou¡
[2]--;

462 
wcou¡
[4]--;

464 i‡(
wcou¡
[2] == 0) {

465 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

467 i‡(
wcou¡
[4] == 0) {

468 
	`cv_brﬂdˇ°
(
we
, 
öãr£˘i⁄Lock
);

473 } i‡(
de°ö©i⁄
 =
n‹th
) {

474 
wcou¡
[2]--;

475 
wcou¡
[4]--;

476 
wcou¡
[5]--;

477 
wcou¡
[9]--;

478 
wcou¡
[10]--;

479 
wcou¡
[11]--;

480 i‡(
wcou¡
[2] == 0) {

481 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

483 i‡(
wcou¡
[4] == 0) {

484 
	`cv_brﬂdˇ°
(
we
, 
öãr£˘i⁄Lock
);

486 i‡(
wcou¡
[5] == 0) {

487 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

489 i‡(
wcou¡
[9] == 0) {

490 
	`cv_brﬂdˇ°
(
í
, 
öãr£˘i⁄Lock
);

492 i‡(
wcou¡
[10] == 0) {

493 
	`cv_brﬂdˇ°
(
ew
, 
öãr£˘i⁄Lock
);

495 i‡(
wcou¡
[11] == 0) {

496 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

499 
wcou¡
[0]--;

500 
wcou¡
[1]--;

501 
wcou¡
[2]--;

502 
wcou¡
[4]--;

503 
wcou¡
[5]--;

505 
wcou¡
[10]--;

506 
wcou¡
[11]--;

507 i‡(
wcou¡
[0] == 0) {

508 
	`cv_brﬂdˇ°
(
nw
, 
öãr£˘i⁄Lock
);

510 i‡(
wcou¡
[1] == 0) {

511 
	`cv_brﬂdˇ°
(
ns
, 
öãr£˘i⁄Lock
);

513 i‡(
wcou¡
[2] == 0) {

514 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

516 i‡(
wcou¡
[4] == 0) {

517 
	`cv_brﬂdˇ°
(
we
, 
öãr£˘i⁄Lock
);

519 i‡(
wcou¡
[5] == 0) {

520 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

525 i‡(
wcou¡
[10] == 0) {

526 
	`cv_brﬂdˇ°
(
ew
, 
öãr£˘i⁄Lock
);

528 i‡(
wcou¡
[11] == 0) {

529 
	`cv_brﬂdˇ°
(
es
, 
öãr£˘i⁄Lock
);

533 i‡(
de°ö©i⁄
 =
n‹th
) {

534 
wcou¡
[5]--;

535 
wcou¡
[7]--;

537 i‡(
wcou¡
[5] == 0) {

538 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

540 i‡(
wcou¡
[7] == 0) {

541 
	`cv_brﬂdˇ°
(
¢
, 
öãr£˘i⁄Lock
);

546 } i‡(
de°ö©i⁄
 =
we°
) {

547 
wcou¡
[0]--;

548 
wcou¡
[1]--;

549 
wcou¡
[2]--;

550 
wcou¡
[5]--;

551 
wcou¡
[7]--;

552 
wcou¡
[8]--;

553 i‡(
wcou¡
[0] == 0) {

554 
	`cv_brﬂdˇ°
(
nw
, 
öãr£˘i⁄Lock
);

556 i‡(
wcou¡
[1] == 0) {

557 
	`cv_brﬂdˇ°
(
ns
, 
öãr£˘i⁄Lock
);

559 i‡(
wcou¡
[2] == 0) {

560 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

562 i‡(
wcou¡
[5] == 0) {

563 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

565 i‡(
wcou¡
[7] == 0) {

566 
	`cv_brﬂdˇ°
(
¢
, 
öãr£˘i⁄Lock
);

568 i‡(
wcou¡
[8] == 0) {

569 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

574 
wcou¡
[1]--;

575 
wcou¡
[2]--;

576 
wcou¡
[3]--;

577 
wcou¡
[4]--;

578 
wcou¡
[5]--;

579 
wcou¡
[7]--;

580 
wcou¡
[8]--;

584 i‡(
wcou¡
[1] == 0) {

585 
	`cv_brﬂdˇ°
(
ns
, 
öãr£˘i⁄Lock
);

587 i‡(
wcou¡
[2] == 0) {

588 
	`cv_brﬂdˇ°
(
√
, 
öãr£˘i⁄Lock
);

590 i‡(
wcou¡
[3] == 0) {

591 
	`cv_brﬂdˇ°
(
ws
, 
öãr£˘i⁄Lock
);

593 i‡(
wcou¡
[4] == 0) {

594 
	`cv_brﬂdˇ°
(
we
, 
öãr£˘i⁄Lock
);

596 i‡(
wcou¡
[5] == 0) {

597 
	`cv_brﬂdˇ°
(
wn
, 
öãr£˘i⁄Lock
);

599 i‡(
wcou¡
[7] == 0) {

600 
	`cv_brﬂdˇ°
(
¢
, 
öãr£˘i⁄Lock
);

602 i‡(
wcou¡
[8] == 0) {

603 
	`cv_brﬂdˇ°
(
sw
, 
öãr£˘i⁄Lock
);

608 
	`lock_ªÀa£
(
öãr£˘i⁄Lock
);

609 
	}
}

	@kern/synchprobs/whalemating.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<ã°.h
>

38 
	#NMATING
 10

	)

42 
	$mÆe
(*
p
, 
which
)

44 ()
p
;

45 
	`k¥ötf
("mÆêwhÆê#%ld sèπög\n", 
which
);

48 
	}
}

52 
	$„mÆe
(*
p
, 
which
)

54 ()
p
;

55 
	`k¥ötf
("„mÆêwhÆê#%ld sèπög\n", 
which
);

58 
	}
}

62 
	$m©chmakî
(*
p
, 
which
)

64 ()
p
;

65 
	`k¥ötf
("m©chmakî whÆê#%ld sèπög\n", 
which
);

68 
	}
}

73 
	$whÆem©ög
(
«rgs
, **
¨gs
)

76 
i
, 
j
, 
îr
=0;

78 ()
«rgs
;

79 ()
¨gs
;

81 
i
 = 0; i < 3; i++) {

82 
j
 = 0; j < 
NMATING
; j++) {

83 #ifde‡
UW


84 
i
) {

86 
îr
 = 
	`thªad_f‹k
("MÆêWhÆêThªad", 
NULL
,

87 
mÆe
, 
NULL
, 
j
);

90 
îr
 = 
	`thªad_f‹k
("FemÆêWhÆêThªad", 
NULL
,

91 
„mÆe
, 
NULL
, 
j
);

94 
îr
 = 
	`thªad_f‹k
("M©chmakî WhÆêThªad", 
NULL
,

95 
m©chmakî
, 
NULL
, 
j
);

99 
i
) {

101 
îr
 = 
	`thªad_f‹k
("Male Whale Thread",

102 
mÆe
, 
NULL
, 
j
, NULL);

105 
îr
 = 
	`thªad_f‹k
("Female Whale Thread",

106 
„mÆe
, 
NULL
, 
j
, NULL);

109 
îr
 = 
	`thªad_f‹k
("Matchmaker Whale Thread",

110 
m©chmakî
, 
NULL
, 
j
, NULL);

114 i‡(
îr
) {

115 
	`∑nic
("whalemating:Åhread_fork failed: %s)\n",

116 
	`°ªº‹
(
îr
));

122 
	}
}

	@kern/syscall/file_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<lib.h
>

5 
	~<uio.h
>

6 
	~<sysˇŒ.h
>

7 
	~<vnode.h
>

8 
	~<vfs.h
>

9 
	~<cuºít.h
>

10 
	~<¥oc.h
>

24 
	$sys_wrôe
(
fdesc
,
u£Ωå_t
 
ubuf
,
nbyãs
,*
ªtvÆ
)

26 
iovec
 
iov
;

27 
uio
 
u
;

28 
ªs
;

30 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: wrôe(%d,%x,%d)\n",
fdesc
,()
ubuf
,
nbyãs
);

33 i‡(!((
fdesc
==
STDOUT_FILENO
)||(fdesc==
STDERR_FILENO
))) {

34  
EUNIMP
;

36 
	`KASSERT
(
cuΩroc
 !
NULL
);

37 
	`KASSERT
(
cuΩroc
->
c⁄sﬁe
 !
NULL
);

38 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

41 
iov
.
iov_uba£
 = 
ubuf
;

42 
iov
.
iov_Àn
 = 
nbyãs
;

43 
u
.
uio_iov
 = &
iov
;

44 
u
.
uio_iov˙t
 = 1;

45 
u
.
uio_off£t
 = 0;

46 
u
.
uio_ªsid
 = 
nbyãs
;

47 
u
.
uio_£gÊg
 = 
UIO_USERSPACE
;

48 
u
.
uio_rw
 = 
UIO_WRITE
;

49 
u
.
uio_•a˚
 = 
cuΩroc
->
p_addr•a˚
;

51 
ªs
 = 
	`VOP_WRITE
(
cuΩroc
->
c⁄sﬁe
,&
u
);

52 i‡(
ªs
) {

53  
ªs
;

57 *
ªtvÆ
 = 
nbyãs
 - 
u
.
uio_ªsid
;

58 
	`KASSERT
(*
ªtvÆ
 >= 0);

60 
	}
}

	@kern/syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`cuΩroc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@kern/syscall/proc_syscalls.c

1 
	~<ty≥s.h
>

2 
	~<kîn/î∫o.h
>

3 
	~<kîn/uni°d.h
>

4 
	~<kîn/waô.h
>

5 
	~<lib.h
>

6 
	~<sysˇŒ.h
>

7 
	~<cuºít.h
>

8 
	~<¥oc.h
>

9 
	~<thªad.h
>

10 
	~<addr•a˚.h
>

11 
	~<c›yöout.h
>

13 
	~"›t-A2.h
"

14 #i‡
OPT_A2


15 
	~<limôs.h
>

16 
	~<¨øy.h
>

17 
	~<mùs/å≠‰ame.h
>

18 
	~<synch.h
>

19 
	~<pid.h
>

20 
	~<vfs.h
>

21 
	~<kîn/f˙é.h
>

27 
	$sys__exô
(
exôcode
) {

29 
addr•a˚
 *
as
;

30 
¥oc
 *
p
 = 
cuΩroc
;

33 ()
exôcode
;

35 #i‡
OPT_A2


36 
	`pid_exô
(
p
, 
exôcode
);

39 
	`DEBUG
(
DB_SYSCALL
,"SysˇŒ: _exô(%d)\n",
exôcode
);

41 
	`KASSERT
(
cuΩroc
->
p_addr•a˚
 !
NULL
);

42 
	`as_dó˘iv©e
();

50 
as
 = 
	`cuΩroc_£ès
(
NULL
);

51 
	`as_de°roy
(
as
);

55 
	`¥oc_ªmthªad
(
cuπhªad
);

59 
	`¥oc_de°roy
(
p
);

61 
	`thªad_exô
();

63 
	`∑nic
("return fromÅhread_exit in sys_exit\n");

64 
	}
}

69 
	$sys_gëpid
(
pid_t
 *
ªtvÆ
)

73 *
ªtvÆ
 = 1;

75 #i‡
OPT_A2


76 *
ªtvÆ
 = 
cuΩroc
->
pid
;

80 
	}
}

85 
	$sys_waôpid
(
pid_t
 
pid
,

86 
u£Ωå_t
 
°©us
,

87 
›ti⁄s
,

88 
pid_t
 *
ªtvÆ
)

90 
exô°©us
;

91 
ªsu…
;

102 #i‡
OPT_A2


105 i‡(
›ti⁄s
 != 0) {

106 (
EINVAL
);

109 #i‡
OPT_A2


111 i‡(
°©us
 =
NULL
) {

112 (
EFAULT
);

116 
boﬁ
 
b
 = 
	`pid_waô
(
cuΩroc
, 
pid
, &
exô°©us
, &
ªsu…
);

117 i‡(
b
) {

118 (
ªsu…
);

122 
exô°©us
 = 0;

124 
ªsu…
 = 
	`c›yout
((*)&
exô°©us
,
°©us
,());

125 i‡(
ªsu…
) {

126 (
ªsu…
);

128 *
ªtvÆ
 = 
pid
;

130 
	}
}

132 #i‡
OPT_A2


134 
	$sys_f‹k
(
å≠‰ame
 *
tf
, 
pid_t
 *
ªtvÆ
)

136  
	`pid_f‹k
(
tf
, 
ªtvÆ
, 
cuΩroc
);

137 
	}
}

145 
	$sys_execv
(*
¥og«me
, **
u¨gs
)

147 
addr•a˚
 *
as
;

148 
vnode
 *
v
;

149 
vaddr_t
 
íåypoöt
, 
°ack±r
;

150 
ªsu…
;

151 
¨gc
 = 0;

156 **
cu¨gs
;

157 
i
 = 0; 
u¨gs
[i] !
NULL
; i++) {

158 
ªsu…
 = 
	`c›yö
((
c⁄°_u£Ωå_t
)
u¨gs
[
i
],(*)&
cu¨gs
,(
	`°æí
(uargs[i])+1)*());

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 
¨gc
++;

164 
¨gc
++;

165 i‡(
¨gc
 > 
ARG_MAX
) {

166  
E2BIG
;

172 **
k¨gv
 = 
	`kmÆloc
(
¨gc
 * (*));

173 
i
 = 0; i < 
¨gc
-1; i++) {

174 
kÀn
 = 
	`°æí
(
u¨gs
[
i
]) + 1;

175 
k¨gv
[
i
] = 
	`kmÆloc
(
kÀn
 * ());

176 
ªsu…
 = 
	`c›yö°r
((
c⁄°_u£Ωå_t
)
u¨gs
[
i
],
k¨gv
[i],
kÀn
 * (),
NULL
);

177 i‡(
ªsu…
) {

178  
ªsu…
;

181 
k¨gv
[
¨gc
-1] = 
NULL
;

186 
k∂í
 = 
	`°æí
(
¥og«me
)+1;

187 *
kp
 = 
	`kmÆloc
(
k∂í
 * ());

188 
ªsu…
 = 
	`c›yö°r
((
c⁄°_u£Ωå_t
)
¥og«me
,
kp
,
k∂í
*(),
NULL
);

189 i‡(
ªsu…
) {

190  
ªsu…
;

196 
ªsu…
 = 
	`vfs_›í
(
kp
, 
O_RDONLY
, 0, &
v
);

197 i‡(
ªsu…
) {

198  
ªsu…
;

202 
as
 = 
	`as_¸óã
();

203 i‡(
as
 ==
NULL
) {

204 
	`vfs_˛o£
(
v
);

205  
ENOMEM
;

209 
	`cuΩroc_£ès
(
as
);

210 
	`as_a˘iv©e
();

213 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

214 i‡(
ªsu…
) {

216 
	`vfs_˛o£
(
v
);

217  
ªsu…
;

221 
	`vfs_˛o£
(
v
);

226 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

227 i‡(
ªsu…
) {

229  
ªsu…
;

232 
u£Ωå_t
 
˝å
[
¨gc
];

234 
i
 = 0; i < 
¨gc
-1; i++) {

236 
∆í
 = 
	`ROUNDUP
(
	`°æí
(
k¨gv
[
i
])+1,8);

237 
°ack±r
 -
∆í
;

238 
˝å
[
i
] = (
u£Ωå_t
)
°ack±r
;

239 
ªsu…
 = 
	`c›yout°r
(
k¨gv
[
i
],(
u£Ωå_t
)
°ack±r
,
∆í
 * (),
NULL
);

240 i‡(
ªsu…
) {

241  
ªsu…
;

244 
˝å
[
¨gc
-1] = 
NULL
;

247 
•size
 = 
	`ROUNDUP
(
¨gc
*(**),8);

248 
°ack±r
 -
•size
;

250 
ªsu…
 = 
	`c›yout
(
˝å
, (
u£Ωå_t
)
°ack±r
, 
•size
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

257 
	`íãr_√w_¥o˚ss
(
¨gc
-1,(
u£Ωå_t
)
°ack±r
,°ack±r, 
íåypoöt
);

258 
	`∑nic
("enter_new_processÑeturned\n");

259  
EINVAL
;

260 
	}
}

	@kern/syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

48 
	~"›t-A2.h
"

49 #i‡
OPT_A2


50 
	~<c›yöout.h
>

59 #i‡
OPT_A2


60 
	$ru≈rogøm
(*
¥og«me
, **
¨gs
, 
«rgs
)

62 
	$ru≈rogøm
(*
¥og«me
)

65 
addr•a˚
 *
as
;

66 
vnode
 *
v
;

67 
vaddr_t
 
íåypoöt
, 
°ack±r
;

68 
ªsu…
;

71 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

72 i‡(
ªsu…
) {

73  
ªsu…
;

77 
	`KASSERT
(
	`cuΩroc_gëas
(Ë=
NULL
);

80 
as
 = 
	`as_¸óã
();

81 i‡(
as
 ==
NULL
) {

82 
	`vfs_˛o£
(
v
);

83  
ENOMEM
;

87 
	`cuΩroc_£ès
(
as
);

88 
	`as_a˘iv©e
();

91 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

92 i‡(
ªsu…
) {

94 
	`vfs_˛o£
(
v
);

95  
ªsu…
;

99 
	`vfs_˛o£
(
v
);

102 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

103 i‡(
ªsu…
) {

105  
ªsu…
;

108 #i‡
OPT_A2


109 
u£Ωå_t
 
˝å
[
«rgs
+1];

110 
i
 = 0; i < 
«rgs
; i++) {

111 
∆í
 = 
	`ROUNDUP
((
	`°æí
(
¨gs
[
i
])+1)*(),8);

112 
°ack±r
 -
∆í
;

113 
˝å
[
i
] = (
u£Ωå_t
)
°ack±r
;

114 
ªsu…
 = 
	`c›yout°r
(
¨gs
[
i
],(
u£Ωå_t
)
°ack±r
,
∆í
,
NULL
);

115 i‡(
ªsu…
) {

116  
ªsu…
;

119 
˝å
[
«rgs
] = 
NULL
;

121 
•size
 = 
	`ROUNDUP
((
«rgs
+1)*(**),8);

122 
°ack±r
 -
•size
;

123 
ªsu…
 = 
	`c›yout
(
˝å
,(
u£Ωå_t
)
°ack±r
,
•size
);

124 i‡(
ªsu…
) {

125  
ªsu…
;

127 
	`íãr_√w_¥o˚ss
(
«rgs
,(
u£Ωå_t
)
°ack±r
,°ack±r,
íåypoöt
);

130 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

131 
°ack±r
, 
íåypoöt
);

135 
	`∑nic
("enter_new_processÑeturned\n");

136  
EINVAL
;

137 
	}
}

	@kern/syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time_t
 
£c⁄ds
;

42 
uöt32_t
 
«no£c⁄ds
;

43 
ªsu…
;

45 
	`gëtime
(&
£c⁄ds
, &
«no£c⁄ds
);

47 
ªsu…
 = 
	`c›yout
(&
£c⁄ds
, 
u£r_£c⁄ds_±r
, (
time_t
));

48 i‡(
ªsu…
) {

49  
ªsu…
;

52 
ªsu…
 = 
	`c›yout
(&
«no£c⁄ds
, 
u£r_«no£c⁄ds_±r
, (
uöt32_t
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@kern/test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

39 
	$ã°a
(
¨øy
 *
a
)

41 
ã°¨øy
[
TESTSIZE
];

42 
i
, 
j
, 
n
, 
r
, *
p
;

44 
i
=0; i<
TESTSIZE
; i++) {

45 
ã°¨øy
[
i
]=i;

48 
n
 = 
	`¨øy_num
(
a
);

49 
	`KASSERT
(
n
==0);

51 
i
=0; i<
TESTSIZE
; i++) {

52 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

53 
	`KASSERT
(
r
==0);

54 
n
 = 
	`¨øy_num
(
a
);

55 
	`KASSERT
(
n
==
i
+1);

57 
n
 = 
	`¨øy_num
(
a
);

58 
	`KASSERT
(
n
==
TESTSIZE
);

60 
i
=0; i<
TESTSIZE
; i++) {

61 
p
 = 
	`¨øy_gë
(
a
, 
i
);

62 
	`KASSERT
(*
p
 =
i
);

64 
n
 = 
	`¨øy_num
(
a
);

65 
	`KASSERT
(
n
==
TESTSIZE
);

67 
j
=0; j<
TESTSIZE
*4; j++) {

68 
i
 = 
	`øndom
()%
TESTSIZE
;

69 
p
 = 
	`¨øy_gë
(
a
, 
i
);

70 
	`KASSERT
(*
p
 =
i
);

72 
n
 = 
	`¨øy_num
(
a
);

73 
	`KASSERT
(
n
==
TESTSIZE
);

75 
i
=0; i<
TESTSIZE
; i++) {

76 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

79 
i
=0; i<
TESTSIZE
; i++) {

80 
p
 = 
	`¨øy_gë
(
a
, 
i
);

81 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

84 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

85 
	`KASSERT
(
r
==0);

87 
i
=0; i<
TESTSIZE
/2; i++) {

88 
p
 = 
	`¨øy_gë
(
a
, 
i
);

89 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

92 
	`¨øy_ªmove
(
a
, 1);

94 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

95 
p
 = 
	`¨øy_gë
(
a
, 
i
);

96 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

98 
p
 = 
	`¨øy_gë
(
a
, 0);

99 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

101 
	`¨øy_£tsize
(
a
, 2);

102 
p
 = 
	`¨øy_gë
(
a
, 0);

103 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

104 
p
 = 
	`¨øy_gë
(
a
, 1);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

107 
	`¨øy_£t
(
a
, 1, 
NULL
);

108 
	`¨øy_£tsize
(
a
, 2);

109 
p
 = 
	`¨øy_gë
(
a
, 0);

110 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

111 
p
 = 
	`¨øy_gë
(
a
, 1);

112 
	`KASSERT
(
p
==
NULL
);

114 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

115 
p
 = 
	`¨øy_gë
(
a
, 0);

116 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

117 
p
 = 
	`¨øy_gë
(
a
, 1);

118 
	`KASSERT
(
p
==
NULL
);

119 
	}
}

122 
	$¨øyã°
(
«rgs
, **
¨gs
)

124 
¨øy
 *
a
;

126 ()
«rgs
;

127 ()
¨gs
;

129 
	`k¥ötf
("BeginningárrayÅest...\n");

130 
a
 = 
	`¨øy_¸óã
();

131 
	`KASSERT
(
a
 !
NULL
);

133 
	`ã°a
(
a
);

135 
	`¨øy_£tsize
(
a
, 0);

137 
	`ã°a
(
a
);

139 
	`¨øy_£tsize
(
a
, 0);

140 
	`¨øy_de°roy
(
a
);

142 
	`k¥ötf
("ArrayÅest complete\n");

144 
	}
}

	@kern/test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@kern/test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NCREATES
 32

	)

59 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

63 
	$öô_thªad£m
()

65 i‡(
thªad£m
==
NULL
) {

66 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

67 i‡(
thªad£m
 =
NULL
) {

68 
	`∑nic
("fstest: sem_create failed\n");

71 
	}
}

79 
	$rŸ©e
(*
°r
, 
amt
)

81 
i
, 
ch
;

83 
amt
 = (amt+2600)%26;

84 
	`KASSERT
(
amt
>=0);

86 
i
=0; 
°r
[i]; i++) {

87 
ch
 = 
°r
[
i
];

88 i‡(
ch
>='A' && ch<='Z') {

89 
ch
 = ch - 'A';

90 
ch
 +
amt
;

91 
ch
 %= 26;

92 
ch
 = ch + 'A';

93 
	`KASSERT
(
ch
>='A' && ch<='Z');

95 
°r
[
i
] = 
ch
;

97 
	}
}

103 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

104 c⁄° *
fs
, c⁄° *
«mesuffix
)

106 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

107 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

108 
	}
}

110 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

114 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

116 
«me
[32];

117 
buf
[32];

118 
îr
;

120 
	`MAKENAME
();

122 
	`°r˝y
(
buf
, 
«me
);

123 
îr
 = 
	`vfs_ªmove
(
buf
);

124 i‡(
îr
) {

125 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

130 
	}
}

134 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

135 
°ridesize
, 
°ridïos
)

137 
vnode
 *
vn
;

138 
îr
;

139 
i
;

140 
size_t
 
shouldbyãs
=0;

141 
size_t
 
byãs
=0;

142 
off_t
 
pos
=0;

143 
«me
[32];

144 
buf
[32];

145 
iovec
 
iov
;

146 
uio
 
ku
;

147 
Êags
;

149 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

151 
	`MAKENAME
();

153 
Êags
 = 
O_WRONLY
|
O_CREAT
;

154 i‡(
°ridesize
 == 1) {

155 
Êags
 |
O_TRUNC
;

159 
	`°r˝y
(
buf
, 
«me
);

160 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

161 i‡(
îr
) {

162 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

163 
«me
, 
	`°ªº‹
(
îr
));

167 
i
=0; i<
NCHUNKS
; i++) {

168 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

169 
pos
 +
	`°æí
(
SLOGAN
);

172 
	`°r˝y
(
buf
, 
SLOGAN
);

173 
	`rŸ©e
(
buf
, 
i
);

174 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

175 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

176 i‡(
îr
) {

177 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

178 
	`vfs_˛o£
(
vn
);

179 
	`vfs_ªmove
(
«me
);

183 i‡(
ku
.
uio_ªsid
 > 0) {

184 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

185 
«me
, (Ë
ku
.
uio_ªsid
);

186 
	`vfs_˛o£
(
vn
);

187 
	`vfs_ªmove
(
«me
);

191 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

192 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

193 
pos
 = 
ku
.
uio_off£t
;

196 
	`vfs_˛o£
(
vn
);

198 i‡(
byãs
 !
shouldbyãs
) {

199 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

200 
«me
, (Ë
byãs
,

201 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

202 
	`vfs_ªmove
(
«me
);

205 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

208 
	}
}

212 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

214 
vnode
 *
vn
;

215 
îr
;

216 
i
;

217 
size_t
 
byãs
=0;

218 
«me
[32];

219 
buf
[32];

220 
iovec
 
iov
;

221 
uio
 
ku
;

223 
	`MAKENAME
();

226 
	`°r˝y
(
buf
, 
«me
);

227 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

228 i‡(
îr
) {

229 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

230 
	`°ªº‹
(
îr
));

234 
i
=0; i<
NCHUNKS
; i++) {

235 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

236 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

237 i‡(
îr
) {

238 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

239 
	`vfs_˛o£
(
vn
);

243 i‡(
ku
.
uio_ªsid
 > 0) {

244 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

245 (Ë
ku
.
uio_ªsid
);

246 
	`vfs_˛o£
(
vn
);

249 
buf
[
	`°æí
(
SLOGAN
)] = 0;

250 
	`rŸ©e
(
buf
, -
i
);

251 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

252 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

253 
«me
, 
i
+1, 
buf
);

254 
	`vfs_˛o£
(
vn
);

258 
byãs
 = 
ku
.
uio_off£t
;

261 
	`vfs_˛o£
(
vn
);

263 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

264 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

265 
«me
, (Ë
byãs
,

266 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

269 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

271 
	}
}

277 
	$dof°e°
(c⁄° *
fûesys
)

279 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

281 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

282 
	`k¥ötf
("*** Test failed\n");

286 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

287 
	`k¥ötf
("*** Test failed\n");

291 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

292 
	`k¥ötf
("*** Test failed\n");

296 
	`k¥ötf
("*** FilesystemÅest done\n");

297 
	}
}

303 
	$ªad°ªss_thªad
(*
fs
, 
num
)

305 c⁄° *
fûesys
 = 
fs
;

306 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

307 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

309 
	`V
(
thªad£m
);

310 
	}
}

314 
	$d‹ód°ªss
(c⁄° *
fûesys
)

316 
i
, 
îr
;

318 
	`öô_thªad£m
();

320 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

322 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

323 
	`k¥ötf
("*** Test failed\n");

327 
i
=0; i<
NTHREADS
; i++) {

328 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

329 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

330 i‡(
îr
) {

331 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

332 
	`°ªº‹
(
îr
));

336 
i
=0; i<
NTHREADS
; i++) {

337 
	`P
(
thªad£m
);

340 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

341 
	`k¥ötf
("*** Test failed\n");

345 
	`k¥ötf
("*** fsÑead stressÅest done\n");

346 
	}
}

352 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

354 c⁄° *
fûesys
 = 
fs
;

355 
num°r
[8];

356 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

358 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

359 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

360 
	`V
(
thªad£m
);

364 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

365 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

366 
	`V
(
thªad£m
);

370 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

371 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

374 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

376 
	`V
(
thªad£m
);

377 
	}
}

381 
	$dowrôe°ªss
(c⁄° *
fûesys
)

383 
i
, 
îr
;

385 
	`öô_thªad£m
();

387 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

389 
i
=0; i<
NTHREADS
; i++) {

390 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

391 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

392 i‡(
îr
) {

393 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

397 
i
=0; i<
NTHREADS
; i++) {

398 
	`P
(
thªad£m
);

401 
	`k¥ötf
("*** fs write stressÅest done\n");

402 
	}
}

408 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

410 c⁄° *
fûesys
 = 
fs
;

412 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

413 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

414 
	`V
(
thªad£m
);

418 
	`V
(
thªad£m
);

419 
	}
}

423 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

425 
i
, 
îr
;

426 
«me
[32];

427 
vnode
 *
vn
;

429 
	`öô_thªad£m
();

431 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

434 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

435 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

436 i‡(
îr
) {

437 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

438 
	`k¥ötf
("*** Test failed\n");

441 
	`vfs_˛o£
(
vn
);

443 
i
=0; i<
NTHREADS
; i++) {

444 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

445 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

446 i‡(
îr
) {

447 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

448 
	`°ªº‹
(
îr
));

452 
i
=0; i<
NTHREADS
; i++) {

453 
	`P
(
thªad£m
);

456 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

457 
	`k¥ötf
("*** Test failed\n");

461 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

462 
	`k¥ötf
("*** Test failed\n");

466 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

467 
	}
}

473 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

475 c⁄° *
fûesys
 = 
fs
;

476 
i
;

477 
num°r
[16];

479 
i
=0; i<
NCREATES
; i++) {

481 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

483 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

484 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

485 
	`V
(
thªad£m
);

489 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

490 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

491 
	`V
(
thªad£m
);

495 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

496 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

497 
	`V
(
thªad£m
);

503 
	`V
(
thªad£m
);

504 
	}
}

508 
	$do¸óã°ªss
(c⁄° *
fûesys
)

510 
i
, 
îr
;

512 
	`öô_thªad£m
();

514 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

516 
i
=0; i<
NTHREADS
; i++) {

517 #ifde‡
UW


518 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

519 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

521 
îr
 = 
	`thªad_f‹k
("createstress",

522 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
,

523 
NULL
);

525 i‡(
îr
) {

526 
	`∑nic
("createstress:Åhread_fork failed %s\n",

527 
	`°ªº‹
(
îr
));

531 
i
=0; i<
NTHREADS
; i++) {

532 
	`P
(
thªad£m
);

535 
	`k¥ötf
("*** fs create stressÅest done\n");

536 
	}
}

542 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

544 *
devi˚
;

546 i‡(
«rgs
 != 2) {

547 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

548  
EINVAL
;

551 
devi˚
 = 
¨gs
[1];

554 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

555 
devi˚
[
	`°æí
(device)-1] = 0;

559 
	}
}

561 
	#DEFTEST
(
ã°«me
) \

563 
	`ã°«me
(
«rgs
, **
¨gs
) \

565 
ªsu…
; \

566 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

567 i‡(
ªsu…
) { \

568  
ªsu…
; \

570 do##
	`ã°«me
(
¨gs
[1]); \

572 }

	)

574 
DEFTEST
(
f°e°
);

575 
DEFTEST
(
ªad°ªss
);

576 
DEFTEST
(
wrôe°ªss
);

577 
DEFTEST
(
wrôe°ªss2
);

578 
DEFTEST
(
¸óã°ªss
);

583 
	$¥ötfûe
(
«rgs
, **
¨gs
)

585 
vnode
 *
rv
, *
wv
;

586 
iovec
 
iov
;

587 
uio
 
ku
;

588 
off_t
 
Ωos
=0, 
wpos
=0;

589 
buf
[128];

590 
outfûe
[16];

591 
ªsu…
;

592 
d⁄e
=0;

594 i‡(
«rgs
 != 2) {

595 
	`k¥ötf
("Usage:Öf filename\n");

596  
EINVAL
;

600 
	`°r˝y
(
outfûe
, "con:");

602 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

603 i‡(
ªsu…
) {

604 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

605  
ªsu…
;

608 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

609 i‡(
ªsu…
) {

610 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

611 
	`vfs_˛o£
(
rv
);

612  
ªsu…
;

615 !
d⁄e
) {

616 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

617 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

618 i‡(
ªsu…
) {

619 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

622 
Ωos
 = 
ku
.
uio_off£t
;

624 i‡(
ku
.
uio_ªsid
 > 0) {

625 
d⁄e
 = 1;

628 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

629 
UIO_WRITE
);

630 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

631 i‡(
ªsu…
) {

632 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

635 
wpos
 = 
ku
.
uio_off£t
;

637 i‡(
ku
.
uio_ªsid
 > 0) {

638 
	`k¥ötf
("Warning: short write\n");

642 
	`vfs_˛o£
(
wv
);

643 
	`vfs_˛o£
(
rv
);

646 
	}
}

	@kern/test/malloctest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

50 
	#NTRIES
 1200

	)

51 
	#ITEMSIZE
 997

	)

52 
	#NTHREADS
 8

	)

56 
	$mÆlo˘hªad
(*
sm
, 
num
)

58 
£m≠h‹e
 *
£m
 = 
sm
;

59 *
±r
;

60 *
ﬁd±r
=
NULL
;

61 *
ﬁd±r2
=
NULL
;

62 
i
;

64 
i
=0; i<
NTRIES
; i++) {

65 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

66 i‡(
±r
==
NULL
) {

67 i‡(
£m
) {

68 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

69 
num
);

70 
	`V
(
£m
);

73 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

76 i‡(
ﬁd±r2
) {

77 
	`k‰ì
(
ﬁd±r2
);

79 
ﬁd±r2
 = 
ﬁd±r
;

80 
ﬁd±r
 = 
±r
;

82 i‡(
ﬁd±r2
) {

83 
	`k‰ì
(
ﬁd±r2
);

85 i‡(
ﬁd±r
) {

86 
	`k‰ì
(
ﬁd±r
);

88 i‡(
£m
) {

89 
	`V
(
£m
);

91 
	}
}

94 
	$mÆlo˘e°
(
«rgs
, **
¨gs
)

96 ()
«rgs
;

97 ()
¨gs
;

99 
	`k¥ötf
("Starting kmallocÅest...\n");

100 
	`mÆlo˘hªad
(
NULL
, 0);

101 
	`k¥ötf
("kmallocÅest done\n");

104 
	}
}

107 
	$mÆloc°ªss
(
«rgs
, **
¨gs
)

109 
£m≠h‹e
 *
£m
;

110 
i
, 
ªsu…
;

112 ()
«rgs
;

113 ()
¨gs
;

115 
£m
 = 
	`£m_¸óã
("mallocstress", 0);

116 i‡(
£m
 =
NULL
) {

117 
	`∑nic
("mallocstress: sem_create failed\n");

120 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

122 
i
=0; i<
NTHREADS
; i++) {

123 
ªsu…
 = 
	`thªad_f‹k
("mÆloc°ªss", 
NULL
,

124 
mÆlo˘hªad
, 
£m
, 
i
);

125 i‡(
ªsu…
) {

126 
	`∑nic
("mallocstress:Åhread_fork failed: %s\n",

127 
	`°ªº‹
(
ªsu…
));

131 
i
=0; i<
NTHREADS
; i++) {

132 
	`P
(
£m
);

135 
	`£m_de°roy
(
£m
);

136 
	`k¥ötf
("kmalloc stressÅest done\n");

139 
	}
}

	@kern/test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@kern/test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 #ifde‡
UW


50 
£m≠h‹e
 *
	gã°£m
 = 0;

51 
lock
 *
	gã°lock
 = 0;

52 
cv
 *
	gã°cv
 = 0;

53 
£m≠h‹e
 *
	gd⁄e£m
 = 0;

55 
£m≠h‹e
 *
	gã°£m
;

56 
lock
 *
	gã°lock
;

57 
cv
 *
	gã°cv
;

58 
£m≠h‹e
 *
	gd⁄e£m
;

61 #ifde‡
UW


64 
	$˛ónôems
()

66 
	`k¥ötf
("cleanitems: Destroying sems,Üocks,ánd cvs\n");

67 
	`£m_de°roy
(
ã°£m
);

68 
	`lock_de°roy
(
ã°lock
);

69 
	`cv_de°roy
(
ã°cv
);

70 
	`£m_de°roy
(
d⁄e£m
);

71 
	}
}

76 
	$öôôems
()

78 i‡(
ã°£m
==
NULL
) {

79 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

80 i‡(
ã°£m
 =
NULL
) {

81 
	`∑nic
("synchtest: sem_create failed\n");

84 i‡(
ã°lock
==
NULL
) {

85 
ã°lock
 = 
	`lock_¸óã
("testlock");

86 i‡(
ã°lock
 =
NULL
) {

87 
	`∑nic
("synchtest:Üock_create failed\n");

90 i‡(
ã°cv
==
NULL
) {

91 #ifde‡
UW


92 
ã°cv
 = 
	`cv_¸óã
("testcv");

94 
ã°cv
 = 
	`cv_¸óã
("testlock");

96 i‡(
ã°cv
 =
NULL
) {

97 
	`∑nic
("synchtest: cv_create failed\n");

100 i‡(
d⁄e£m
==
NULL
) {

101 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

102 i‡(
d⁄e£m
 =
NULL
) {

103 
	`∑nic
("synchtest: sem_create failed\n");

106 
	}
}

110 
	$£mã°thªad
(*
junk
, 
num
)

112 
i
;

113 ()
junk
;

118 
	`P
(
ã°£m
);

119 
	`k¥ötf
("Thªad %2lu: ", 
num
);

120 
i
=0; i<
NSEMLOOPS
; i++) {

121 
	`k¥ötf
("%c", ()
num
+64);

123 
	`k¥ötf
("\n");

124 
	`V
(
d⁄e£m
);

125 #ifde‡
UW


126 
	`thªad_exô
();

128 
	}
}

131 
	$£mã°
(
«rgs
, **
¨gs
)

133 
i
, 
ªsu…
;

135 ()
«rgs
;

136 ()
¨gs
;

138 
	`öôôems
();

139 
	`k¥ötf
("Starting semaphoreÅest...\n");

140 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

141 
	`P
(
ã°£m
);

142 
	`P
(
ã°£m
);

143 
	`k¥ötf
("ok\n");

145 
i
=0; i<
NTHREADS
; i++) {

146 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTHREADS
; i++) {

154 
	`V
(
ã°£m
);

155 
	`P
(
d⁄e£m
);

159 
	`V
(
ã°£m
);

160 
	`V
(
ã°£m
);

162 #ifde‡
UW


163 
	`˛ónôems
();

165 
	`k¥ötf
("SemaphoreÅest done.\n");

167 
	}
}

171 
	$Áû
(
num
, c⁄° *
msg
)

173 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

174 
	`k¥ötf
("Test failed\n");

176 
	`lock_ªÀa£
(
ã°lock
);

178 
	`V
(
d⁄e£m
);

179 
	`thªad_exô
();

180 
	}
}

184 
	$lockã°thªad
(*
junk
, 
num
)

186 
i
;

187 ()
junk
;

189 
i
=0; i<
NLOCKLOOPS
; i++) {

190 
	`lock_acquúe
(
ã°lock
);

191 
ã°vÆ1
 = 
num
;

192 
ã°vÆ2
 = 
num
*num;

193 
ã°vÆ3
 = 
num
%3;

195 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

196 
	`Áû
(
num
, "testval2/testval1");

199 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

200 
	`Áû
(
num
, "testval2/testval3");

203 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

204 
	`Áû
(
num
, "testval3/testval1");

207 i‡(
ã°vÆ1
 !
num
) {

208 
	`Áû
(
num
, "testval1/num");

211 i‡(
ã°vÆ2
 !
num
*num) {

212 
	`Áû
(
num
, "testval2/num");

215 i‡(
ã°vÆ3
 !
num
%3) {

216 
	`Áû
(
num
, "testval3/num");

219 
	`lock_ªÀa£
(
ã°lock
);

221 
	`V
(
d⁄e£m
);

222 #ifde‡
UW


223 
	`thªad_exô
();

225 
	}
}

229 
	$lockã°
(
«rgs
, **
¨gs
)

231 
i
, 
ªsu…
;

233 ()
«rgs
;

234 ()
¨gs
;

236 
	`öôôems
();

237 
	`k¥ötf
("StartingÜockÅest...\n");

239 
i
=0; i<
NTHREADS
; i++) {

240 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

241 
NULL
, 
i
);

242 i‡(
ªsu…
) {

243 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

244 
	`°ªº‹
(
ªsu…
));

247 
i
=0; i<
NTHREADS
; i++) {

248 
	`P
(
d⁄e£m
);

251 #ifde‡
UW


252 
	`˛ónôems
();

254 
	`k¥ötf
("LockÅest done.\n");

257 
	}
}

261 
	$cvã°thªad
(*
junk
, 
num
)

263 
i
;

264 vﬁ©ûê
j
;

265 
time_t
 
£cs1
, 
£cs2
;

266 
uöt32_t
 
n£cs1
, 
n£cs2
;

268 ()
junk
;

270 
i
=0; i<
NCVLOOPS
; i++) {

271 
	`lock_acquúe
(
ã°lock
);

272 
ã°vÆ1
 !
num
) {

273 
	`gëtime
(&
£cs1
, &
n£cs1
);

274 
	`cv_waô
(
ã°cv
, 
ã°lock
);

275 
	`gëtime
(&
£cs2
, &
n£cs2
);

277 i‡(
n£cs2
 < 
n£cs1
) {

278 
£cs2
--;

279 
n£cs2
 += 1000000000;

282 
n£cs2
 -
n£cs1
;

283 
£cs2
 -
£cs1
;

286 i‡(
£cs2
==0 && 
n£cs2
 < 40*2000) {

287 
	`k¥ötf
("cv_waôÅook o∆y %uÇs\n", 
n£cs2
);

288 
	`k¥ötf
("That'sÅoo fast... you must be "

290 
	`V
(
d⁄e£m
);

291 
	`thªad_exô
();

295 
	`k¥ötf
("Thªad %lu\n", 
num
);

296 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

302 
j
=0; j<3000; j++);

304 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

305 
	`lock_ªÀa£
(
ã°lock
);

307 
	`V
(
d⁄e£m
);

308 #ifde‡
UW


309 
	`thªad_exô
();

311 
	}
}

314 
	$cvã°
(
«rgs
, **
¨gs
)

317 
i
, 
ªsu…
;

319 ()
«rgs
;

320 ()
¨gs
;

322 
	`öôôems
();

323 
	`k¥ötf
("Starting CVÅest...\n");

324 #ifde‡
UW


325 
	`k¥ötf
("%dÅhªad†shouldÖröàouàöÑevî£ ordî %dÅimes.\n", 
NTHREADS
, 
NCVLOOPS
);

327 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

330 
ã°vÆ1
 = 
NTHREADS
-1;

332 
i
=0; i<
NTHREADS
; i++) {

333 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

334 i‡(
ªsu…
) {

335 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

336 
	`°ªº‹
(
ªsu…
));

339 
i
=0; i<
NTHREADS
; i++) {

340 
	`P
(
d⁄e£m
);

343 #ifde‡
UW


344 
	`˛ónôems
();

346 
	`k¥ötf
("CVÅest done\n");

349 
	}
}

	@kern/test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest...\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@kern/test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

40 
	~"›t-synch¥obs.h
"

44 #i‡
OPT_SYNCHPROBS


45 
	#DIM
 10

	)

47 
	#DIM
 70

	)

51 
	#SLEEPALOT_PRINTS
 20

	)

52 
	#SLEEPALOT_ITERS
 4

	)

54 
	#WAKER_WAKES
 100

	)

56 
	#COMPUTE_ITERS
 10

	)

58 
	#NWAITCHANS
 12

	)

59 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

61 vﬁ©ûê
	gwakîd⁄e
;

62 
£m≠h‹e
 *
	gwakî£m
;

63 
£m≠h‹e
 *
	gd⁄e£m
;

67 
	$£tup
()

69 
tmp
[16];

70 
i
;

72 i‡(
wakî£m
 =
NULL
) {

73 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

74 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

75 
i
=0; i<
NWAITCHANS
; i++) {

76 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

77 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

80 
wakîd⁄e
 = 0;

81 
	}
}

85 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

87 
i
, 
j
;

89 ()
junk
;

91 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

92 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

93 
wch™
 *
w
;

95 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

96 
	`wch™_lock
(
w
);

97 
	`wch™_¶ìp
(
w
);

99 
	`k¥ötf
("[%lu]", 
num
);

101 
	`V
(
d⁄e£m
);

102 
	}
}

106 
	$wakî_thªad
(*
junk1
, 
junk2
)

108 
i
, 
d⁄e
;

110 ()
junk1
;

111 ()
junk2
;

114 
	`P
(
wakî£m
);

115 
d⁄e
 = 
wakîd⁄e
;

116 
	`V
(
wakî£m
);

117 i‡(
d⁄e
) {

121 
i
=0; i<
WAKER_WAKES
; i++) {

122 
wch™
 *
w
;

124 
w
 = 
waôch™s
[
	`øndom
()%
NWAITCHANS
];

125 
	`wch™_wakóŒ
(
w
);

127 
	`thªad_yõld
();

130 
	`V
(
d⁄e£m
);

131 
	}
}

135 
	$make_¶ì∑lŸs
(
howm™y
)

137 
«me
[16];

138 
i
, 
ªsu…
;

140 
i
=0; i<
howm™y
; i++) {

141 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

142 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

143 i‡(
ªsu…
) {

144 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

147 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

148 i‡(
ªsu…
) {

149 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

151 
	}
}

155 
	$compuã_thªad
(*
junk1
, 
num
)

157 
	sm©rix
 {

158 
m
[
DIM
][DIM];

160 
m©rix
 *
m1
, *
m2
, *
m3
;

161 
tŸ
;

162 
i
, 
j
, 
k
, 
m
;

163 
uöt32_t
 
ønd
;

165 ()
junk1
;

167 
m1
 = 
	`kmÆloc
((
m©rix
));

168 
	`KASSERT
(
m1
 !
NULL
);

169 
m2
 = 
	`kmÆloc
((
m©rix
));

170 
	`KASSERT
(
m2
 !
NULL
);

171 
m3
 = 
	`kmÆloc
((
m©rix
));

172 
	`KASSERT
(
m3
 !
NULL
);

174 
m
=0; m<
COMPUTE_ITERS
; m++) {

176 
i
=0; i<
DIM
; i++) {

177 
j
=0; j<
DIM
; j++) {

178 
ønd
 = 
	`øndom
();

179 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

180 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

184 
i
=0; i<
DIM
; i++) {

185 
j
=0; j<
DIM
; j++) {

186 
tŸ
 = 0;

187 
k
=0; k<
DIM
; k++) {

188 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

190 
m3
->
m
[
i
][
j
] = 
tŸ
;

194 
tŸ
 = 0;

195 
i
=0; i<
DIM
; i++) {

196 
tŸ
 +
m3
->
m
[
i
][i];

199 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

200 
	`thªad_yõld
();

203 
	`k‰ì
(
m1
);

204 
	`k‰ì
(
m2
);

205 
	`k‰ì
(
m3
);

207 
	`V
(
d⁄e£m
);

208 
	}
}

212 
	$make_compuãs
(
howm™y
)

214 
«me
[16];

215 
i
, 
ªsu…
;

217 
i
=0; i<
howm™y
; i++) {

218 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

219 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

220 i‡(
ªsu…
) {

221 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

224 
	}
}

228 
	$föish
(
howm™ytŸÆ
)

230 
i
;

231 
i
=0; i<
howm™ytŸÆ
; i++) {

232 
	`P
(
d⁄e£m
);

234 
	`P
(
wakî£m
);

235 
wakîd⁄e
 = 1;

236 
	`V
(
wakî£m
);

237 
	`P
(
d⁄e£m
);

238 
	}
}

242 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

244 
	`£tup
();

245 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

247 
n¶ìps
, 
ncompuãs
);

248 
	`make_¶ì∑lŸs
(
n¶ìps
);

249 
	`make_compuãs
(
ncompuãs
);

250 
	`föish
(
n¶ìps
+
ncompuãs
);

251 
	`k¥ötf
("\nThreadÅest 3 done\n");

252 
	}
}

255 
	$thªadã°3
(
«rgs
, **
¨gs
)

257 i‡(
«rgs
==1) {

258 
	`ru¡e°3
(5, 2);

260 i‡(
«rgs
==3) {

261 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

264 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

268 
	}
}

	@kern/test/uw-tests.c

9 
	~<ty≥s.h
>

10 
	~<synch.h
>

11 
	~<thªad.h
>

12 
	~<ã°.h
>

13 
	~<uw-vm°©s.h
>

15 
	#NAME_LEN
 (30)

	)

17 
lock
 *
	gã°lock
 = 
NULL
;

18 
£m≠h‹e
 *
	gd⁄e£m
 = 
NULL
;

20 
	#NTESTLOOPS
 (5000Ë

	)

21 
	#NTESTTHREADS
 (8)

	)

22 
	#START_VALUE
 (0)

	)

23 vﬁ©ûê
	gã°_vÆue
 = 
START_VALUE
;

24 
	gu£_locks
 = 1;

28 
	$˛ónôems
()

30 
	`k¥ötf
("cleanitems: Destroying semsándÜocks\n");

31 
	`lock_de°roy
(
ã°lock
);

32 
ã°lock
 = 
NULL
;

33 
	`£m_de°roy
(
d⁄e£m
);

34 
d⁄e£m
 = 
NULL
;

35 
ã°_vÆue
 = 
START_VALUE
;

36 
	}
}

40 
	$öôôems
()

42 i‡(
ã°lock
==
NULL
) {

43 
ã°lock
 = 
	`lock_¸óã
("testlock");

44 i‡(
ã°lock
 =
NULL
) {

45 
	`∑nic
("synchtest:Üock_create failed\n");

49 i‡(
d⁄e£m
==
NULL
) {

50 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

51 i‡(
d⁄e£m
 =
NULL
) {

52 
	`∑nic
("synchtest: sem_create failed\n");

55 
	}
}

60 
	$add_thªad
(*
junk
, 
num
)

62 
i
;

63 (Ë
num
;

64 (Ë
junk
;

66 
i
=0; i<
NTESTLOOPS
; i++) {

67 i‡(
u£_locks
) {

68 
	`lock_acquúe
(
ã°lock
);

75 
ã°_vÆue
 =Åest_value + 1;

76 
ã°_vÆue
 =Åest_value + 1;

77 
ã°_vÆue
 =Åest_value + 1;

78 
ã°_vÆue
 =Åest_value + 1;

79 
ã°_vÆue
 =Åest_value + 1;

81 i‡(
u£_locks
) {

82 
	`lock_ªÀa£
(
ã°lock
);

86 
	`V
(
d⁄e£m
);

87 
	`thªad_exô
();

88 
	}
}

93 
	$sub_thªad
(*
junk
, 
num
)

95 
i
;

96 ()
num
;

97 ()
junk
;

99 
i
=0; i<
NTESTLOOPS
; i++) {

100 i‡(
u£_locks
) {

101 
	`lock_acquúe
(
ã°lock
);

108 
ã°_vÆue
 =Åest_value - 1;

109 
ã°_vÆue
 =Åest_value - 1;

110 
ã°_vÆue
 =Åest_value - 1;

111 
ã°_vÆue
 =Åest_value - 1;

112 
ã°_vÆue
 =Åest_value - 1;

114 i‡(
u£_locks
) {

115 
	`lock_ªÀa£
(
ã°lock
);

119 
	`V
(
d⁄e£m
);

120 
	`thªad_exô
();

121 
	}
}

124 
	$uwlockã°1
(
«rgs
, **
¨gs
)

126 
i
, 
ªsu…
;

127 
«me
[
NAME_LEN
];

129 ()
«rgs
;

130 ()
¨gs
;

132 
	`öôôems
();

133 
	`k¥ötf
("Starting uwlocktest1...\n");

135 
i
=0; i<
NTESTTHREADS
; i++) {

136 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "add_thªad %d", 
i
);

137 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
add_thªad
, NULL, 
i
);

138 i‡(
ªsu…
) {

139 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

140 
	`°ªº‹
(
ªsu…
));

144 
i
=0; i<
NTESTTHREADS
; i++) {

145 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "sub_thªad %d", 
i
);

146 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
sub_thªad
, NULL, 
i
);

147 i‡(
ªsu…
) {

148 
	`∑nic
("uwlocktest1:Åhread_fork failed: %s\n",

149 
	`°ªº‹
(
ªsu…
));

153 
i
=0; i<
NTESTTHREADS
*2; i++) {

154 
	`P
(
d⁄e£m
);

157 
	`k¥ötf
("vÆuêo‡ã°_vÆuê%d should bê%d\n", 
ã°_vÆue
, 
START_VALUE
);

158 i‡(
ã°_vÆue
 =
START_VALUE
) {

159 
	`k¥ötf
("TEST SUCCEEDED\n");

161 
	`k¥ötf
("TEST FAILED\n");

163 
	`KASSERT
(
ã°_vÆue
 =
START_VALUE
);

165 
	`˛ónôems
();

166 
	`k¥ötf
("uwlocktest1 done.\n");

169 
	}
}

176 
	$vm°©s_thªad
(*
junk
, 
num
)

178 
i
;

179 
j
;

180 ()
num
;

181 ()
junk
;

183 
i
=0; i<
NTESTLOOPS
; i++) {

184 
j
=0; j<
VMSTAT_COUNT
; j++) {

188 
j
) {

190 
VMSTAT_TLB_FAULT
:

191 
	`vm°©s_öc
(
j
);

192 
	`vm°©s_öc
(
j
);

195 
VMSTAT_TLB_FAULT_FREE
:

196 
	`vm°©s_öc
(
j
);

199 
VMSTAT_TLB_FAULT_REPLACE
:

200 
	`vm°©s_öc
(
j
);

204 
VMSTAT_TLB_INVALIDATE
:

205 i‡(
i
 % 2 == 0) {

206 
	`vm°©s_öc
(
j
);

210 
VMSTAT_TLB_RELOAD
:

211 
	`vm°©s_öc
(
j
);

215 
VMSTAT_PAGE_FAULT_ZERO
:

216 i‡(
i
 % 2 == 0) {

217 
	`vm°©s_öc
(
j
);

222 
VMSTAT_PAGE_FAULT_DISK
:

223 i‡(
i
 % 2 == 0) {

224 
	`vm°©s_öc
(
j
);

228 
VMSTAT_ELF_FILE_READ
:

229 i‡(
i
 % 4 == 0) {

230 
	`vm°©s_öc
(
j
);

234 
VMSTAT_SWAP_FILE_READ
:

235 i‡(
i
 % 4 == 0) {

236 
	`vm°©s_öc
(
j
);

240 
VMSTAT_SWAP_FILE_WRITE
:

241 i‡(
i
 % 8 == 0) {

242 
	`vm°©s_öc
(
j
);

247 
	`k¥ötf
("Unknow¿°© %d\n", 
j
);

253 
	`V
(
d⁄e£m
);

254 
	`thªad_exô
();

255 
	}
}

258 
	$uwvm°©°e°
(
«rgs
, **
¨gs
)

260 
i
, 
ªsu…
;

261 
«me
[
NAME_LEN
];

263 ()
«rgs
;

264 ()
¨gs
;

266 
	`öôôems
();

267 
	`k¥ötf
("Starting uwvmstatstest...\n");

269 
	`k¥ötf
("Initializing vmstats\n");

270 
	`vm°©s_öô
();

272 
i
=0; i<
NTESTTHREADS
; i++) {

273 
	`¢¥ötf
(
«me
, 
NAME_LEN
, "vm°©°hªad %d", 
i
);

274 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
vm°©s_thªad
, NULL, 
i
);

275 i‡(
ªsu…
) {

276 
	`∑nic
("uwvmstatstest:Åhread_fork failed: %s\n",

277 
	`°ªº‹
(
ªsu…
));

281 
i
=0; i<
NTESTTHREADS
; i++) {

282 
	`P
(
d⁄e£m
);

285 
	`vm°©s_¥öt
();

287 
	`˛ónôems
();

288 
	`k¥ötf
("uwvmstatstest done.\n");

291 
	}
}

	@kern/thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

65 
	$h¨d˛ock_boŸ°øp
()

67 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

68 i‡(
lbﬁt
 =
NULL
) {

69 
	`∑nic
("Couldn't createÜbolt\n");

71 
	}
}

78 
	$timî˛ock
()

81 
	`wch™_wakóŒ
(
lbﬁt
);

82 
	}
}

89 
	$h¨d˛ock
()

95 
cur˝u
->
c_h¨d˛ocks
++;

96 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

97 
	`scheduÀ
();

99 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

100 
	`thªad_c⁄sidî_migøti⁄
();

102 
	`thªad_yõld
();

103 
	}
}

109 
	$˛ock¶ìp
(
num_£cs
)

111 
num_£cs
 > 0) {

112 
	`wch™_lock
(
lbﬁt
);

113 
	`wch™_¶ìp
(
lbﬁt
);

114 
num_£cs
--;

116 
	}
}

	@kern/thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<•ölock.h
>

38 
	~<cuºít.h
>

49 
	$•ölock_öô
(
•ölock
 *
lk
)

51 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

52 
lk
->
lk_hﬁdî
 = 
NULL
;

53 
	}
}

59 
	$•ölock_˛ónup
(
•ölock
 *
lk
)

61 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
NULL
);

62 
	`KASSERT
(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) == 0);

63 
	}
}

73 
	$•ölock_acquúe
(
•ölock
 *
lk
)

75 
˝u
 *
my˝u
;

77 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

80 i‡(
	`CURCPU_EXISTS
()) {

81 
my˝u
 = 
cur˝u
->
c_£lf
;

82 i‡(
lk
->
lk_hﬁdî
 =
my˝u
) {

83 
	`∑nic
("Dódlock o¿•ölock %p\n", 
lk
);

87 
my˝u
 = 
NULL
;

101 i‡(
	`•ölock_d©a_gë
(&
lk
->
lk_lock
) != 0) {

104 i‡(
	`•ölock_d©a_ã°™d£t
(&
lk
->
lk_lock
) != 0) {

110 
lk
->
lk_hﬁdî
 = 
my˝u
;

111 
	}
}

117 
	$•ölock_ªÀa£
(
•ölock
 *
lk
)

120 i‡(
	`CURCPU_EXISTS
()) {

121 
	`KASSERT
(
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

124 
lk
->
lk_hﬁdî
 = 
NULL
;

125 
	`•ölock_d©a_£t
(&
lk
->
lk_lock
, 0);

126 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

127 
	}
}

132 
boﬁ


133 
	$•ölock_do_i_hﬁd
(
•ölock
 *
lk
)

135 i‡(!
	`CURCPU_EXISTS
()) {

136  
åue
;

140  (
lk
->
lk_hﬁdî
 =
cur˝u
->
c_£lf
);

141 
	}
}

	@kern/thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(
cur
->
t_cur•l
 < 
•l
) {

139 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

140 
ªt
 = 
cur
->
t_cur•l
;

141 
cur
->
t_cur•l
 = 
•l
;

143 i‡(
cur
->
t_cur•l
 > 
•l
) {

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

147 
	`•Œowî
(
ªt
, 
•l
);

151 
ªt
 = 
•l
;

154  
ªt
;

155 
	}
}

	@kern/thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

47 
£m≠h‹e
 *

48 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

50 
£m≠h‹e
 *
£m
;

52 
	`KASSERT
(
öôül_cou¡
 >= 0);

54 
£m
 = 
	`kmÆloc
((
£m≠h‹e
));

55 i‡(
£m
 =
NULL
) {

56  
NULL
;

59 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

60 i‡(
£m
->
£m_«me
 =
NULL
) {

61 
	`k‰ì
(
£m
);

62  
NULL
;

65 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

66 i‡(
£m
->
£m_wch™
 =
NULL
) {

67 
	`k‰ì
(
£m
->
£m_«me
);

68 
	`k‰ì
(
£m
);

69  
NULL
;

72 
	`•ölock_öô
(&
£m
->
£m_lock
);

73 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

75  
£m
;

76 
	}
}

79 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

81 
	`KASSERT
(
£m
 !
NULL
);

84 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

85 
	`wch™_de°roy
(
£m
->
£m_wch™
);

86 
	`k‰ì
(
£m
->
£m_«me
);

87 
	`k‰ì
(
£m
);

88 
	}
}

91 
	$P
(
£m≠h‹e
 *
£m
)

93 
	`KASSERT
(
£m
 !
NULL
);

101 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

103 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

104 
£m
->
£m_cou¡
 == 0) {

121 
	`wch™_lock
(
£m
->
£m_wch™
);

122 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

123 
	`wch™_¶ìp
(
£m
->
£m_wch™
);

125 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

127 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

128 
£m
->
£m_cou¡
--;

129 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

130 
	}
}

133 
	$V
(
£m≠h‹e
 *
£m
)

135 
	`KASSERT
(
£m
 !
NULL
);

137 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

139 
£m
->
£m_cou¡
++;

140 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

141 
	`wch™_wake⁄e
(
£m
->
£m_wch™
);

143 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

144 
	}
}

150 
lock
 *

151 
	$lock_¸óã
(c⁄° *
«me
)

153 
lock
 *lock;

155 
lock
 = 
	`kmÆloc
((lock));

156 i‡(
lock
 =
NULL
) {

157  
NULL
;

160 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

161 i‡(
lock
->
lk_«me
 =
NULL
) {

162 
	`k‰ì
(
lock
);

163  
NULL
;

167 
lock
->
lk_wch™
 = 
	`wch™_¸óã
÷ock->
lk_«me
);

168 i‡(
lock
->
lk_wch™
 =
NULL
) {

169 
	`k‰ì
(
lock
->
lk_«me
);

170 
	`k‰ì
(
lock
);

171  
NULL
;

174 
	`•ölock_öô
(&
lock
->
lk_lock
);

176 
lock
->
lk_hﬁdî
 = 
NULL
;

179  
lock
;

180 
	}
}

183 
	$lock_de°roy
(
lock
 *lock)

185 
	`KASSERT
(
lock
 !
NULL
);

189 
	`•ölock_˛ónup
(&
lock
->
lk_lock
);

190 
	`wch™_de°roy
(
lock
->
lk_wch™
);

191 
lock
->
lk_hﬁdî
 = 
NULL
;

192 
	`k‰ì
(
lock
->
lk_«me
);

193 
	`k‰ì
(
lock
);

194 
	}
}

202 
	$lock_acquúe
(
lock
 *lock)

204 
	`KASSERT
(
lock
 !
NULL
);

205 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

207 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

210 
lock
->
lk_hﬁdî
 !
NULL
) {

211 
	`wch™_lock
(
lock
->
lk_wch™
);

212 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

213 
	`wch™_¶ìp
(
lock
->
lk_wch™
);

215 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

217 
	`KASSERT
(
lock
->
lk_hﬁdî
 =
NULL
);

218 
lock
->
lk_hﬁdî
 = 
cuπhªad
;

220 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

222 
	}
}

225 
	$lock_ªÀa£
(
lock
 *lock)

227 
	`KASSERT
(
lock
 !
NULL
);

228 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

230 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

232 
lock
->
lk_hﬁdî
 = 
NULL
;

234 
	`KASSERT
(
lock
->
lk_hﬁdî
 =
NULL
);

235 
	`wch™_wake⁄e
(
lock
->
lk_wch™
);

237 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

239 
	}
}

241 
boﬁ


242 
	$lock_do_i_hﬁd
(
lock
 *lock)

244 
	`KASSERT
(
lock
 !
NULL
);

246 i‡(
lock
->
lk_hﬁdî
 =
NULL
 ||Üock->lk_hﬁdî !
cuπhªad
) {

247  
Ál£
;

249  
åue
;

254 
	}
}

261 
cv
 *

262 
	$cv_¸óã
(c⁄° *
«me
)

264 
cv
 *cv;

266 
cv
 = 
	`kmÆloc
((cv));

267 i‡(
cv
 =
NULL
) {

268  
NULL
;

271 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

272 i‡(
cv
->
cv_«me
==
NULL
) {

273 
	`k‰ì
(
cv
);

274  
NULL
;

278 
cv
->
cv_wch™
 = 
	`wch™_¸óã
(cv->
cv_«me
);

279 i‡(
cv
->
cv_wch™
 =
NULL
) {

280 
	`k‰ì
(
cv
->
cv_«me
);

281 
	`k‰ì
(
cv
);

282  
NULL
;

285  
cv
;

286 
	}
}

289 
	$cv_de°roy
(
cv
 *cv)

291 
	`KASSERT
(
cv
 !
NULL
);

294 
	`wch™_de°roy
(
cv
->
cv_wch™
);

295 
	`k‰ì
(
cv
->
cv_«me
);

296 
	`k‰ì
(
cv
);

297 
	}
}

303 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

305 
	`KASSERT
(
cv
 !
NULL
);

306 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

308 
	`wch™_lock
(
cv
->
cv_wch™
);

309 
	`lock_ªÀa£
(
lock
);

310 
	`wch™_¶ìp
(
cv
->
cv_wch™
);

312 
	`lock_acquúe
(
lock
);

314 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

317 
	}
}

320 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

322 
	`KASSERT
(
cv
 !
NULL
);

323 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

325 
	`wch™_wake⁄e
(
cv
->
cv_wch™
);

328 
	}
}

331 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

333 
	`KASSERT
(
cv
 !
NULL
);

334 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
));

336 
	`wch™_wakóŒ
(
cv
->
cv_wch™
);

339 
	}
}

	@kern/thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

54 
	~"›t-synch¥obs.h
"

57 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

60 
	swch™
 {

61 c⁄° *
	mwc_«me
;

62 
thªadli°
 
	mwc_thªads
;

63 
•ölock
 
	mwc_lock
;

67 
DECLARRAY
(
˝u
);

68 
DEFARRAY
(
˝u
, );

69 
˝u¨øy
 
	gÆl˝us
;

72 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

83 
	$thªad_check°ack_öô
(
thªad
 *thread)

85 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

86 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

87 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

88 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

89 
	}
}

103 
	$thªad_check°ack
(
thªad
 *thread)

105 i‡(
thªad
->
t_°ack
 !
NULL
) {

106 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

107 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

108 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

109 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

111 
	}
}

118 
thªad
 *

119 
	$thªad_¸óã
(c⁄° *
«me
)

121 
thªad
 *thread;

123 
	`DEBUGASSERT
(
«me
 !
NULL
);

125 
thªad
 = 
	`kmÆloc
((*thread));

126 i‡(
thªad
 =
NULL
) {

127  
NULL
;

130 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

131 i‡(
thªad
->
t_«me
 =
NULL
) {

132 
	`k‰ì
(
thªad
);

133  
NULL
;

135 
thªad
->
t_wch™_«me
 = "NEW";

136 
thªad
->
t_°©e
 = 
S_READY
;

139 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

140 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

141 
thªad
->
t_°ack
 = 
NULL
;

142 
thªad
->
t_c⁄ãxt
 = 
NULL
;

143 
thªad
->
t_˝u
 = 
NULL
;

144 
thªad
->
t_¥oc
 = 
NULL
;

147 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

148 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

149 
thªad
->
t_ùlhigh_cou¡
 = 1;

153  
thªad
;

154 
	}
}

164 
˝u
 *

165 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

167 
˝u
 *
c
;

168 
ªsu…
;

169 
«mebuf
[16];

171 
c
 = 
	`kmÆloc
((*c));

172 i‡(
c
 =
NULL
) {

173 
	`∑nic
("cpu_create: Out of memory\n");

176 
c
->
c_£lf
 = c;

177 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

179 
c
->
c_cuπhªad
 = 
NULL
;

180 
	`thªadli°_öô
(&
c
->
c_zombõs
);

181 
c
->
c_h¨d˛ocks
 = 0;

183 
c
->
c_isidÀ
 = 
Ál£
;

184 
	`thªadli°_öô
(&
c
->
c_runqueue
);

185 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

187 
c
->
c_ùi_≥ndög
 = 0;

188 
c
->
c_numshoŸdown
 = 0;

189 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

191 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

192 i‡(
ªsu…
 != 0) {

193 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

196 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

197 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

198 i‡(
c
->
c_cuπhªad
 =
NULL
) {

199 
	`∑nic
("cpu_create:Åhread_create failed\n");

201 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

202 i‡(
ªsu…
) {

203 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

206 i‡(
c
->
c_numbî
 == 0) {

216 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

217 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

218 
	`∑nic
("cpu_create: couldn'tállocate stack");

220 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

222 
c
->
c_cuπhªad
->
t_˝u
 = c;

224 
	`˝u_machdï_öô
(
c
);

226  
c
;

227 
	}
}

239 
	$thªad_de°roy
(
thªad
 *thread)

241 
	`KASSERT
(
thªad
 !
cuπhªad
);

242 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

250 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

251 i‡(
thªad
->
t_°ack
 !
NULL
) {

252 
	`k‰ì
(
thªad
->
t_°ack
);

254 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

255 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

258 
thªad
->
t_wch™_«me
 = "DESTROYED";

260 
	`k‰ì
(
thªad
->
t_«me
);

261 
	`k‰ì
(
thªad
);

262 
	}
}

272 
	$ex‹ci£
()

274 
thªad
 *
z
;

276 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

277 
	`KASSERT
(
z
 !
cuπhªad
);

278 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

279 
	`thªad_de°roy
(
z
);

281 
	}
}

289 
	$thªad_∑nic
()

296 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

305 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

306 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = 
NULL
;

307 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = 
NULL
;

325 
	}
}

331 
	$thªad_shutdown
()

339 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

340 
	}
}

346 
	$thªad_boŸ°øp
()

348 
˝u
 *
boŸ˝u
;

349 
thªad
 *
boŸthªad
;

351 
	`˝u¨øy_öô
(&
Æl˝us
);

361 
boŸ˝u
 = 
	`˝u_¸óã
(0);

362 
boŸthªad
 = 
boŸ˝u
->
c_cuπhªad
;

369 
	`INIT_CURCPU
(
boŸ˝u
, 
boŸthªad
);

376 
cuπhªad
->
t_˝u
 = 
cur˝u
;

377 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

380 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

383 
	}
}

394 
	$˝u_h©ch
(
so·w¨e_numbî
)

396 
	`KASSERT
(
cur˝u
 !
NULL
);

397 
	`KASSERT
(
cuπhªad
 !
NULL
);

398 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

400 
	`•l0
();

402 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
	`˝u_idítify
());

404 
	`V
(
˝u_°¨tup_£m
);

405 
	`thªad_exô
();

406 
	}
}

412 
	$thªad_°¨t_˝us
()

414 
i
;

416 
	`k¥ötf
("˝u0: %s\n", 
	`˝u_idítify
());

418 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

419 
	`maöbus_°¨t_˝us
();

421 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

422 
	`P
(
˝u_°¨tup_£m
);

424 
	`£m_de°roy
(
˝u_°¨tup_£m
);

425 
˝u_°¨tup_£m
 = 
NULL
;

426 
	}
}

435 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

437 
˝u
 *
èrgë˝u
;

438 
boﬁ
 
isidÀ
;

441 
èrgë˝u
 = 
èrgë
->
t_˝u
;

443 i‡(
Æªady_have_lock
) {

445 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

448 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

451 
isidÀ
 = 
èrgë˝u
->
c_isidÀ
;

452 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

453 i‡(
isidÀ
) {

458 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

461 i‡(!
Æªady_have_lock
) {

462 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

464 
	}
}

477 
thªad_f‹k
(c⁄° *
«me
,

478 
¥oc
 *proc,

479 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

480 *
d©a1
, 
d©a2
)

482 
thªad
 *
√wthªad
;

483 
ªsu…
;

485 #ifde‡
UW


486 
	`DEBUG
(
DB_THREADS
,"F‹kögÅhªad: %s\n",
«me
);

489 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

490 i‡(
√wthªad
 =
NULL
) {

491  
ENOMEM
;

495 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

496 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

497 
	`thªad_de°roy
(
√wthªad
);

498  
ENOMEM
;

500 
	`thªad_check°ack_öô
(
√wthªad
);

507 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

510 i‡(
¥oc
 =
NULL
) {

511 
¥oc
 = 
cuπhªad
->
t_¥oc
;

513 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

514 i‡(
ªsu…
) {

516 
	`thªad_de°roy
(
√wthªad
);

517  
ªsu…
;

525 
√wthªad
->
t_ùlhigh_cou¡
++;

528 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

531 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

534 
	}
}

547 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
)

549 
thªad
 *
cur
, *
√xt
;

550 
•l
;

552 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

553 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

556 
•l
 = 
	`•lhigh
();

558 
cur
 = 
cuπhªad
;

564 i‡(
cur˝u
->
c_isidÀ
) {

565 
	`•lx
(
•l
);

570 
	`thªad_check°ack
(
cur
);

573 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

576 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

577 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

578 
	`•lx
(
•l
);

583 
√w°©e
) {

584 
S_RUN
:

585 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

586 
S_READY
:

587 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

589 
S_SLEEP
:

590 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

604 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

605 
	`wch™_u∆ock
(
wc
);

607 
S_ZOMBIE
:

608 
cur
->
t_wch™_«me
 = "ZOMBIE";

609 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

612 
cur
->
t_°©e
 = 
√w°©e
;

632 
cur˝u
->
c_isidÀ
 = 
åue
;

634 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

635 i‡(
√xt
 =
NULL
) {

636 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

637 
	`˝u_idÀ
();

638 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

640 } 
√xt
 =
NULL
);

641 
cur˝u
->
c_isidÀ
 = 
Ál£
;

650 
cur˝u
->
c_cuπhªad
 = 
√xt
;

651 
cuπhªad
 = 
√xt
;

654 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

704 
cur
->
t_wch™_«me
 = 
NULL
;

705 
cur
->
t_°©e
 = 
S_RUN
;

708 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

711 
	`as_a˘iv©e
();

714 
	`ex‹ci£
();

717 
	`•lx
(
•l
);

718 
	}
}

729 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

730 *
d©a1
, 
d©a2
)

732 
thªad
 *
cur
;

734 
cur
 = 
cuπhªad
;

737 
cur
->
t_wch™_«me
 = 
NULL
;

738 
cur
->
t_°©e
 = 
S_RUN
;

741 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

744 
	`as_a˘iv©e
();

747 
	`ex‹ci£
();

750 
	`•l0
();

752 #i‡
OPT_SYNCHPROBS


755 
i
, 
n
;

756 
n
 = 
	`øndom
()%161 +Ñandom()%161;

757 
i
=0; i<
n
; i++) {

758 
	`thªad_yõld
();

764 
	`íåypoöt
(
d©a1
, 
d©a2
);

767 
	`thªad_exô
();

768 
	}
}

780 
	$thªad_exô
()

782 
thªad
 *
cur
;

784 
cur
 = 
cuπhªad
;

786 #ifde‡
UW


789 
	`KASSERT
(
cuΩroc
 =
k¥oc
 || cuΩro¯=
NULL
);

791 i‡(
cuΩroc
 =
k¥oc
) {

792 
	`¥oc_ªmthªad
(
cur
);

795 
	`¥oc_ªmthªad
(
cur
);

799 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

802 
	`thªad_check°ack
(
cur
);

805 
	`•lhigh
();

806 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
);

807 
	`∑nic
("The zombie walks!\n");

808 
	}
}

814 
	$thªad_yõld
()

816 
	`thªad_swôch
(
S_READY
, 
NULL
);

817 
	}
}

829 
	$scheduÀ
()

835 
	}
}

855 
	$thªad_c⁄sidî_migøti⁄
()

857 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

858 
i
, 
num˝us
;

859 
˝u
 *
c
;

860 
thªadli°
 
vi˘ims
;

861 
thªad
 *
t
;

863 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

864 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

865 
i
=0; i<
num˝us
; i++) {

866 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

867 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

868 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

869 i‡(
c
 =
cur˝u
->
c_£lf
) {

870 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

872 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

875 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

876 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

880 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

881 
	`thªadli°_öô
(&
vi˘ims
);

882 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

883 
i
=0; i<
to_£nd
; i++) {

884 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

885 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

887 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

889 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

890 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

891 i‡(
c
 =
cur˝u
->
c_£lf
) {

894 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

895 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

896 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

919 i‡(
t
 =
cuπhªad
) {

920 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

921 
to_£nd
--;

925 
t
->
t_˝u
 = 
c
;

926 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

927 
	`DEBUG
(
DB_THREADS
,

929 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

930 
to_£nd
--;

931 i‡(
c
->
c_isidÀ
) {

936 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

939 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

947 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

948 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

949 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

950 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

952 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

955 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

956 
	`thªadli°_˛ónup
(&
vi˘ims
);

957 
	}
}

973 
wch™
 *

974 
	$wch™_¸óã
(c⁄° *
«me
)

976 
wch™
 *
wc
;

978 
wc
 = 
	`kmÆloc
((*wc));

979 i‡(
wc
 =
NULL
) {

980  
NULL
;

982 
	`•ölock_öô
(&
wc
->
wc_lock
);

983 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

984 
wc
->
wc_«me
 = 
«me
;

985  
wc
;

986 
	}
}

993 
	$wch™_de°roy
(
wch™
 *
wc
)

995 
	`•ölock_˛ónup
(&
wc
->
wc_lock
);

996 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

997 
	`k‰ì
(
wc
);

998 
	}
}

1004 
	$wch™_lock
(
wch™
 *
wc
)

1006 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1007 
	}
}

1010 
	$wch™_u∆ock
(
wch™
 *
wc
)

1012 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1013 
	}
}

1022 
	$wch™_¶ìp
(
wch™
 *
wc
)

1025 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1027 
	`thªad_swôch
(
S_SLEEP
, 
wc
);

1028 
	}
}

1034 
	$wch™_wake⁄e
(
wch™
 *
wc
)

1036 
thªad
 *
èrgë
;

1039 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1040 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1045 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1047 i‡(
èrgë
 =
NULL
) {

1052 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1053 
	}
}

1059 
	$wch™_wakóŒ
(
wch™
 *
wc
)

1061 
thªad
 *
èrgë
;

1062 
thªadli°
 
li°
;

1064 
	`thªadli°_öô
(&
li°
);

1070 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1071 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1072 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1078 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1085 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1086 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1089 
	`thªadli°_˛ónup
(&
li°
);

1090 
	}
}

1096 
boﬁ


1097 
	$wch™_i£m±y
(
wch™
 *
wc
)

1099 
boﬁ
 
ªt
;

1101 
	`•ölock_acquúe
(&
wc
->
wc_lock
);

1102 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1103 
	`•ölock_ªÀa£
(&
wc
->
wc_lock
);

1105  
ªt
;

1106 
	}
}

1118 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1120 
	`KASSERT
(
code
 >= 0 && code < 32);

1122 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1123 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1124 
	`maöbus_£nd_ùi
(
èrgë
);

1125 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1126 
	}
}

1129 
	$ùi_brﬂdˇ°
(
code
)

1131 
i
;

1132 
˝u
 *
c
;

1134 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1135 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1136 i‡(
c
 !
cur˝u
->
c_£lf
) {

1137 
	`ùi_£nd
(
c
, 
code
);

1140 
	}
}

1143 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1145 
n
;

1147 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1149 
n
 = 
èrgë
->
c_numshoŸdown
;

1150 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1151 
èrgë
->
c_numshoŸdown
 = 
TLBSHOOTDOWN_ALL
;

1154 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1155 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1158 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1159 
	`maöbus_£nd_ùi
(
èrgë
);

1161 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1162 
	}
}

1165 
	$öãΩro˚ss‹_öãºu±
()

1167 
uöt32_t
 
bôs
;

1168 
i
;

1170 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1171 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1173 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1175 
	`˝u_hÆt
();

1177 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1179 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1180 i‡(!
cur˝u
->
c_isidÀ
) {

1181 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1182 
cur˝u
->
c_numbî
);

1184 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1185 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1186 
	`˝u_hÆt
();

1188 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1194 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1195 i‡(
cur˝u
->
c_numshoŸdown
 =
TLBSHOOTDOWN_ALL
) {

1196 
	`vm_ébshoŸdown_Æl
();

1199 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1200 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1203 
cur˝u
->
c_numshoŸdown
 = 0;

1206 
cur˝u
->
c_ùi_≥ndög
 = 0;

1207 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1208 
	}
}

	@kern/thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@kern/vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
d
->
	`d_›í
(d, 
Êags
);

62 
	}
}

70 
	$dev_˛o£
(
vnode
 *
v
)

72 
devi˚
 *
d
 = 
v
->
vn_d©a
;

73  
d
->
	`d_˛o£
(d);

74 
	}
}

82 
	$dev_ª˛aim
(
vnode
 *
v
)

84 ()
v
;

87 
	}
}

94 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

96 
devi˚
 *
d
 = 
v
->
vn_d©a
;

97 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

98  
d
->
	`d_io
(d, 
uio
);

99 
	}
}

107 
	$nuŒ_io
(
vnode
 *
v
, 
uio
 *uio)

109 ()
v
;

110 ()
uio
;

111  
EINVAL
;

112 
	}
}

119 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

121 
devi˚
 *
d
 = 
v
->
vn_d©a
;

122 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

123  
d
->
	`d_io
(d, 
uio
);

124 
	}
}

131 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

133 
devi˚
 *
d
 = 
v
->
vn_d©a
;

134  
d
->
	`d_io˘l
(d, 
›
, 
d©a
);

135 
	}
}

144 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

146 
devi˚
 *
d
 = 
v
->
vn_d©a
;

147 
ªsu…
;

149 
	`bzîo
(
°©buf
, (
°©
));

151 i‡(
d
->
d_blocks
 > 0) {

152 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

153 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

156 
°©buf
->
°_size
 = 0;

159 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

160 i‡(
ªsu…
) {

161  
ªsu…
;

164 
°©buf
->
°_mode
 |= 0600;

166 
°©buf
->
°_∆ök
 = 1;

167 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

170 
°©buf
->
°_dev
 = 0;

173 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

176 
	}
}

185 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

187 
devi˚
 *
d
 = 
v
->
vn_d©a
;

188 i‡(
d
->
d_blocks
 > 0) {

189 *
ªt
 = 
S_IFBLK
;

192 *
ªt
 = 
S_IFCHR
;

195 
	}
}

204 
	$dev_åy£ek
(
vnode
 *
v
, 
off_t
 
pos
)

206 
devi˚
 *
d
 = 
v
->
vn_d©a
;

207 i‡(
d
->
d_blocks
 > 0) {

208 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

210  
EINVAL
;

212 i‡(
pos
 < 0) {

219  
EINVAL
;

221 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

223  
EINVAL
;

227  
ESPIPE
;

230 
	}
}

237 
	$nuŒ_fsync
(
vnode
 *
v
)

239 ()
v
;

241 
	}
}

249 
	$dev_mm≠
(
vnode
 *
v
 )

251 ()
v
;

252  
EUNIMP
;

253 
	}
}

260 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

262 
devi˚
 *
d
 = 
v
->
vn_d©a
;

267 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

271  
EINVAL
;

272 
	}
}

282 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

290 ()
v
;

291 ()
uio
;

294 
	}
}

302 
	$nuŒ_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

303 
vnode
 **
ªsu…
)

305 ()
v
;

306 ()
«me
;

307 ()
ex˛
;

308 ()
mode
;

309 ()
ªsu…
;

310  
ENOTDIR
;

311 
	}
}

315 
	$nuŒ_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

317 ()
v
;

318 ()
«me
;

319 ()
mode
;

320  
ENOTDIR
;

321 
	}
}

325 
	$nuŒ_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

327 ()
v
;

328 ()
c⁄ã¡s
;

329 ()
«me
;

330  
ENOTDIR
;

331 
	}
}

335 
	$nuŒ_«me›
(
vnode
 *
v
, c⁄° *
«me
)

337 ()
v
;

338 ()
«me
;

339  
ENOTDIR
;

340 
	}
}

344 
	$nuŒ_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
fûe
)

346 ()
v
;

347 ()
«me
;

348 ()
fûe
;

349  
ENOTDIR
;

350 
	}
}

354 
	$nuŒ_ª«me
(
vnode
 *
v
, c⁄° *
n1
, vnodê*
v2
, c⁄° *
n2
)

356 ()
v
;

357 ()
n1
;

358 ()
v2
;

359 ()
n2
;

360  
ENOTDIR
;

361 
	}
}

378 
	$dev_lookup
(
vnode
 *
dú
,

379 *
∑th«me
, 
vnode
 **
ªsu…
)

386 i‡(
	`°æí
(
∑th«me
)>0) {

387  
ENOENT
;

389 
	`VOP_INCREF
(
dú
);

390 *
ªsu…
 = 
dú
;

392 
	}
}

396 
	$dev_look∑ª¡
(
vnode
 *
dú
,

397 *
∑th«me
, 
vnode
 **
ªsu…
,

398 *
«mebuf
, 
size_t
 
buÊí
)

403 ()
dú
;

404 ()
∑th«me
;

405 ()
ªsu…
;

406 ()
«mebuf
;

407 ()
buÊí
;

409  
ENOTDIR
;

410 
	}
}

415 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

416 
VOP_MAGIC
,

418 
dev_›í
,

419 
dev_˛o£
,

420 
dev_ª˛aim
,

421 
dev_ªad
,

422 
nuŒ_io
,

423 
nuŒ_io
,

424 
dev_wrôe
,

425 
dev_io˘l
,

426 
dev_°©
,

427 
dev_gëty≥
,

428 
dev_åy£ek
,

429 
nuŒ_fsync
,

430 
dev_mm≠
,

431 
dev_åunˇã
,

432 
dev_«mefûe
,

433 
nuŒ_¸ót
,

434 
nuŒ_symlök
,

435 
nuŒ_mkdú
,

436 
nuŒ_lök
,

437 
nuŒ_«me›
,

438 
nuŒ_«me›
,

439 
nuŒ_ª«me
,

440 
dev_lookup
,

441 
dev_look∑ª¡
,

447 
vnode
 *

448 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

450 
ªsu…
;

451 
vnode
 *
v
;

453 
v
 = 
	`kmÆloc
((
vnode
));

454 i‡(
v
==
NULL
) {

455  
NULL
;

458 
ªsu…
 = 
	`VOP_INIT
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

459 i‡(
ªsu…
 != 0) {

460 
	`∑nic
("While creating vnode for device: VOP_INIT: %s\n",

461 
	`°ªº‹
(
ªsu…
));

464  
v
;

465 
	}
}

	@kern/vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒ˛o£
(
devi˚
 *
dev
)

57 ()
dev
;

59 
	}
}

64 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

71 ()
dev
;

73 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

74 
uio
->
uio_ªsid
 = 0;

78 
	}
}

83 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

89 ()
dev
;

90 ()
›
;

91 ()
d©a
;

93  
EINVAL
;

94 
	}
}

100 
	$devnuŒ_¸óã
()

102 
ªsu…
;

103 
devi˚
 *
dev
;

105 
dev
 = 
	`kmÆloc
((*dev));

106 i‡(
dev
==
NULL
) {

107 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›í
 = 
nuŒ›í
;

112 
dev
->
d_˛o£
 = 
nuŒ˛o£
;

113 
dev
->
d_io
 = 
nuŒio
;

114 
dev
->
d_io˘l
 = 
nuŒio˘l
;

116 
dev
->
d_blocks
 = 0;

117 
dev
->
d_blocksize
 = 1;

119 
dev
->
d_devnumbî
 = 0;

121 
dev
->
d_d©a
 = 
NULL
;

123 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

124 i‡(
ªsu…
) {

125 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

127 
	}
}

	@kern/vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
	`vfs_biglock_acquúe
();

164 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`vfs_biglock_ªÀa£
();

167 
	`KASSERT
(
«me
 !
NULL
);

169 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

170 i‡(
ªsu…
) {

171 
out
;

173 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

174 i‡(
ªsu…
) {

175 
out
;

178 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

180 
out
:

182 
	`VOP_DECREF
(
cwd
);

183  
ªsu…
;

184 
	}
}

	@kern/vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

85 
DECLARRAY
(
knowndev
);

86 
DEFARRAY
(
knowndev
, );

88 
knowndev¨øy
 *
	gknowndevs
;

91 
lock
 *
	gvfs_biglock
;

92 
	gvfs_biglock_dïth
;

99 
	$vfs_boŸ°øp
()

101 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

102 i‡(
knowndevs
==
NULL
) {

103 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

106 
vfs_biglock
 = 
	`lock_¸óã
("vfs_biglock");

107 i‡(
vfs_biglock
==
NULL
) {

108 
	`∑nic
("vfs: CouldÇot create vfs bigÜock\n");

110 
vfs_biglock_dïth
 = 0;

112 
	`devnuŒ_¸óã
();

113 
	}
}

123 
	$vfs_biglock_acquúe
()

125 i‡(!
	`lock_do_i_hﬁd
(
vfs_biglock
)) {

126 
	`lock_acquúe
(
vfs_biglock
);

128 
vfs_biglock_dïth
++;

129 
	}
}

132 
	$vfs_biglock_ªÀa£
()

134 
	`KASSERT
(
	`lock_do_i_hﬁd
(
vfs_biglock
));

135 
	`KASSERT
(
vfs_biglock_dïth
 > 0);

136 
vfs_biglock_dïth
--;

137 i‡(
vfs_biglock_dïth
 == 0) {

138 
	`lock_ªÀa£
(
vfs_biglock
);

140 
	}
}

142 
boﬁ


143 
	$vfs_biglock_do_i_hﬁd
()

145  
	`lock_do_i_hﬁd
(
vfs_biglock
);

146 
	}
}

152 
	$vfs_sync
()

154 
knowndev
 *
dev
;

155 
i
, 
num
;

157 
	`vfs_biglock_acquúe
();

159 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

160 
i
=0; i<
num
; i++) {

161 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

162 i‡(
dev
->
kd_fs
 !
NULL
) {

163  
	`FSOP_SYNC
(
dev
->
kd_fs
);

167 
	`vfs_biglock_ªÀa£
();

170 
	}
}

177 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
)

179 
knowndev
 *
kd
;

180 
i
, 
num
;

182 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

184 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

185 
i
=0; i<
num
; i++) {

186 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

197 i‡(
kd
->
kd_fs
!=
NULL
) {

198 c⁄° *
vﬁ«me
;

199 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

201 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

202 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

203 *
ªsu…
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
);

208 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

209 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

210  
ENXIO
;

219 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

220 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

221 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

222 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

223 
	`VOP_INCREF
(
kd
->
kd_vnode
);

224 *
ªsu…
 = 
kd
->
kd_vnode
;

232 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

233 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

234 
	`VOP_INCREF
(
kd
->
kd_vnode
);

235 *
ªsu…
 = 
kd
->
kd_vnode
;

250  
ENODEV
;

251 
	}
}

257 
	$vfs_gëdev«me
(
fs
 *fs)

259 
knowndev
 *
kd
;

260 
i
, 
num
;

262 
	`KASSERT
(
fs
 !
NULL
);

264 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

266 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

267 
i
=0; i<
num
; i++) {

268 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

270 i‡(
kd
->
kd_fs
 =
fs
) {

277  
kd
->
kd_«me
;

281  
NULL
;

282 
	}
}

289 
	$mkøw«me
(c⁄° *
«me
)

291 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

292 i‡(!
s
) {

293  
NULL
;

295 
	`°r˝y
(
s
, 
«me
);

296 
	`°rˇt
(
s
, "raw");

297  
s
;

298 
	}
}

306 
ölöe


308 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

310 i‡(
a
==
NULL
 || 
b
==NULL) {

313  !
	`°rcmp
(
a
, 
b
);

314 
	}
}

321 
ölöe


323 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

325  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

326 
	}
}

335 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

337 c⁄° *
vﬁ«me
;

338 
i
, 
num
;

339 
knowndev
 *
kd
;

341 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

343 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

344 
i
=0; i<
num
; i++) {

345 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

347 i‡(
kd
->
kd_fs
) {

348 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

349 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

354 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

355 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

361 
	}
}

372 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

374 *
«me
=
NULL
, *
øw«me
=NULL;

375 
knowndev
 *
kd
=
NULL
;

376 
vnode
 *vnode=
NULL
;

377 c⁄° *
vﬁ«me
=
NULL
;

378 
ödex
;

379 
ªsu…
;

381 
	`vfs_biglock_acquúe
();

383 
«me
 = 
	`k°rdup
(
d«me
);

384 i‡(
«me
==
NULL
) {

385 
nomem
;

387 i‡(
mou¡abÀ
) {

388 
øw«me
 = 
	`mkøw«me
(
«me
);

389 i‡(
øw«me
==
NULL
) {

390 
nomem
;

394 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

395 i‡(
vnode
==
NULL
) {

396 
nomem
;

399 
kd
 = 
	`kmÆloc
((
knowndev
));

400 i‡(
kd
==
NULL
) {

401 
nomem
;

404 
kd
->
kd_«me
 = 
«me
;

405 
kd
->
kd_øw«me
 = 
øw«me
;

406 
kd
->
kd_devi˚
 = 
dev
;

407 
kd
->
kd_vnode
 = 
vnode
;

408 
kd
->
kd_fs
 = 
fs
;

410 i‡(
fs
!=
NULL
) {

411 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

414 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

415 
	`vfs_biglock_ªÀa£
();

416  
EEXIST
;

419 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

421 i‡(
ªsu…
 =0 && 
dev
 !
NULL
) {

423 
dev
->
d_devnumbî
 = 
ödex
+1;

426 
	`vfs_biglock_ªÀa£
();

427  
ªsu…
;

429 
nomem
:

431 i‡(
«me
) {

432 
	`k‰ì
(
«me
);

434 i‡(
øw«me
) {

435 
	`k‰ì
(
øw«me
);

437 i‡(
vnode
) {

438 
	`k‰ì
(
vnode
);

440 i‡(
kd
) {

441 
	`k‰ì
(
kd
);

444 
	`vfs_biglock_ªÀa£
();

445  
ENOMEM
;

446 
	}
}

453 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

455  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

456 
	}
}

464 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

466  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

467 
	}
}

477 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

479 
knowndev
 *
dev
;

480 
i
, 
num
;

481 
boﬁ
 
found
 = 
Ál£
;

483 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

485 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

486 
i
=0; !
found
 && i<
num
; i++) {

487 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

488 i‡(
dev
->
kd_øw«me
==
NULL
) {

493 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

494 *
ªsu…
 = 
dev
;

495 
found
 = 
åue
;

499  
found
 ? 0 : 
ENODEV
;

500 
	}
}

509 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

510 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

512 c⁄° *
vﬁ«me
;

513 
knowndev
 *
kd
;

514 
fs
 *fs;

515 
ªsu…
;

517 
	`vfs_biglock_acquúe
();

519 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

520 i‡(
ªsu…
) {

521 
	`vfs_biglock_ªÀa£
();

522  
ªsu…
;

525 i‡(
kd
->
kd_fs
 !
NULL
) {

526 
	`vfs_biglock_ªÀa£
();

527  
EBUSY
;

529 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

530 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

532 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

533 i‡(
ªsu…
) {

534 
	`vfs_biglock_ªÀa£
();

535  
ªsu…
;

538 
	`KASSERT
(
fs
 !
NULL
);

540 
kd
->
kd_fs
 = 
fs
;

542 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

543 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

544 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

546 
	`vfs_biglock_ªÀa£
();

548 
	}
}

555 
	$vfs_unmou¡
(c⁄° *
dev«me
)

557 
knowndev
 *
kd
;

558 
ªsu…
;

560 
	`vfs_biglock_acquúe
();

562 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

563 i‡(
ªsu…
) {

564 
Áû
;

567 i‡(
kd
->
kd_fs
 =
NULL
) {

568 
ªsu…
 = 
EINVAL
;

569 
Áû
;

571 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

572 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

574 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

575 i‡(
ªsu…
) {

576 
Áû
;

579 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

580 i‡(
ªsu…
) {

581 
Áû
;

584 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

587 
kd
->
kd_fs
 = 
NULL
;

589 
	`KASSERT
(
ªsu…
==0);

591 
Áû
:

592 
	`vfs_biglock_ªÀa£
();

593  
ªsu…
;

594 
	}
}

600 
	$vfs_unmou¡Æl
()

602 
knowndev
 *
dev
;

603 
i
, 
num
;

604 
ªsu…
;

606 
	`vfs_biglock_acquúe
();

608 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

609 
i
=0; i<
num
; i++) {

610 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

611 i‡(
dev
->
kd_øw«me
 =
NULL
) {

615 i‡(
dev
->
kd_fs
 =
NULL
) {

620 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

622 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

623 i‡(
ªsu…
) {

624 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

625 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

627 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

628 i‡(
ªsu…
) {

629 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

631 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

636 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

637 i‡(
ªsu…
 =
EBUSY
) {

638 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

639 
dev
->
kd_«me
);

642 i‡(
ªsu…
) {

643 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

645 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

650 
dev
->
kd_fs
 = 
NULL
;

653 
	`vfs_biglock_ªÀa£
();

656 
	}
}

	@kern/vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

50 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

52 
vnode
 *
ﬁdvn
;

54 
ﬁdvn
 = 
boŸfs_vnode
;

55 
boŸfs_vnode
 = 
√wvn
;

57 i‡(
ﬁdvn
 !
NULL
) {

58 
	`VOP_DECREF
(
ﬁdvn
);

60 
	}
}

71 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

73 
tmp
[
NAME_MAX
+1];

74 *
s
;

75 
ªsu…
;

76 
vnode
 *
√wguy
;

78 
	`vfs_biglock_acquúe
();

80 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

81 
s
 = 
	`°rchr
(
tmp
, ':');

82 i‡(
s
) {

84 i‡(
	`°æí
(
s
)>0) {

85 
	`vfs_biglock_ªÀa£
();

86  
EINVAL
;

90 
	`°rˇt
(
tmp
, ":");

93 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

94 i‡(
ªsu…
) {

95 
	`vfs_biglock_ªÀa£
();

96  
ªsu…
;

99 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

100 i‡(
ªsu…
) {

101 
	`vfs_biglock_ªÀa£
();

102  
ªsu…
;

105 
	`ch™ge_boŸfs
(
√wguy
);

107 
	`vfs_biglock_ªÀa£
();

109 
	}
}

115 
	$vfs_˛órboŸfs
()

117 
	`vfs_biglock_acquúe
();

118 
	`ch™ge_boŸfs
(
NULL
);

119 
	`vfs_biglock_ªÀa£
();

120 
	}
}

130 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

132 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

133 
vnode
 *
vn
;

134 
ªsu…
;

136 
	`KASSERT
(
	`vfs_biglock_do_i_hﬁd
());

142 
i
=0; 
∑th
[i]; i++) {

143 i‡(
∑th
[
i
]==':') {

144 
cﬁ⁄
 = 
i
;

147 i‡(
∑th
[
i
]=='/') {

148 
¶ash
 = 
i
;

153 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

161 *
sub∑th
 = 
∑th
;

162  
	`vfs_gëcurdú
(
°¨tvn
);

165 i‡(
cﬁ⁄
>0) {

167 
∑th
[
cﬁ⁄
]=0;

168 
∑th
[
cﬁ⁄
+1]=='/') {

170 
cﬁ⁄
++;

172 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

174 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

175 i‡(
ªsu…
) {

176  
ªsu…
;

188 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

190 i‡(
∑th
[0]=='/') {

191 i‡(
boŸfs_vnode
==
NULL
) {

192  
ENOENT
;

194 
	`VOP_INCREF
(
boŸfs_vnode
);

195 *
°¨tvn
 = 
boŸfs_vnode
;

198 
	`KASSERT
(
∑th
[0]==':');

200 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

201 i‡(
ªsu…
) {

202  
ªsu…
;

209 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

211 *
°¨tvn
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
);

213 
	`VOP_DECREF
(
vn
);

216 
∑th
[1]=='/') {

218 
∑th
++;

221 *
sub∑th
 = 
∑th
+1;

224 
	}
}

232 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

233 *
buf
, 
size_t
 
buÊí
)

235 
vnode
 *
°¨tvn
;

236 
ªsu…
;

238 
	`vfs_biglock_acquúe
();

240 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

241 i‡(
ªsu…
) {

242 
	`vfs_biglock_ªÀa£
();

243  
ªsu…
;

246 i‡(
	`°æí
(
∑th
)==0) {

252 
ªsu…
 = 
EINVAL
;

255 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

258 
	`VOP_DECREF
(
°¨tvn
);

260 
	`vfs_biglock_ªÀa£
();

261  
ªsu…
;

262 
	}
}

265 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

267 
vnode
 *
°¨tvn
;

268 
ªsu…
;

270 
	`vfs_biglock_acquúe
();

272 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

273 i‡(
ªsu…
) {

274 
	`vfs_biglock_ªÀa£
();

275  
ªsu…
;

278 i‡(
	`°æí
(
∑th
)==0) {

279 *
ªtvÆ
 = 
°¨tvn
;

280 
	`vfs_biglock_ªÀa£
();

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287 
	`vfs_biglock_ªÀa£
();

288  
ªsu…
;

289 
	}
}

	@kern/vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_OPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 
	`VOP_INCOPEN
(
vn
);

98 i‡(
›íÊags
 & 
O_TRUNC
) {

99 i‡(
ˇnwrôe
==0) {

100 
ªsu…
 = 
EINVAL
;

103 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

105 i‡(
ªsu…
) {

106 
	`VOP_DECOPEN
(
vn
);

107 
	`VOP_DECREF
(
vn
);

108  
ªsu…
;

112 *
ªt
 = 
vn
;

115 
	}
}

119 
	$vfs_˛o£
(
vnode
 *
vn
)

135 
	`VOP_DECOPEN
(
vn
);

136 
	`VOP_DECREF
(
vn
);

137 
	}
}

141 
	$vfs_ªmove
(*
∑th
)

143 
vnode
 *
dú
;

144 
«me
[
NAME_MAX
+1];

145 
ªsu…
;

147 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

148 i‡(
ªsu…
) {

149  
ªsu…
;

152 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

153 
	`VOP_DECREF
(
dú
);

155  
ªsu…
;

156 
	}
}

160 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

162 
vnode
 *
ﬁddú
;

163 
ﬁd«me
[
NAME_MAX
+1];

164 
vnode
 *
√wdú
;

165 
√w«me
[
NAME_MAX
+1];

166 
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

169 i‡(
ªsu…
) {

170  
ªsu…
;

172 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

173 i‡(
ªsu…
) {

174 
	`VOP_DECREF
(
ﬁddú
);

175  
ªsu…
;

178 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

179 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

180 
	`VOP_DECREF
(
√wdú
);

181 
	`VOP_DECREF
(
ﬁddú
);

182  
EXDEV
;

185 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

187 
	`VOP_DECREF
(
√wdú
);

188 
	`VOP_DECREF
(
ﬁddú
);

190  
ªsu…
;

191 
	}
}

195 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

197 
vnode
 *
ﬁdfûe
;

198 
vnode
 *
√wdú
;

199 
√w«me
[
NAME_MAX
+1];

200 
ªsu…
;

202 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

203 i‡(
ªsu…
) {

204  
ªsu…
;

206 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

207 i‡(
ªsu…
) {

208 
	`VOP_DECREF
(
ﬁdfûe
);

209  
ªsu…
;

212 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

213 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

214 
	`VOP_DECREF
(
√wdú
);

215 
	`VOP_DECREF
(
ﬁdfûe
);

216  
EXDEV
;

219 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

221 
	`VOP_DECREF
(
√wdú
);

222 
	`VOP_DECREF
(
ﬁdfûe
);

224  
ªsu…
;

225 
	}
}

235 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

237 
vnode
 *
√wdú
;

238 
√w«me
[
NAME_MAX
+1];

239 
ªsu…
;

241 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

242 i‡(
ªsu…
) {

243  
ªsu…
;

246 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

247 
	`VOP_DECREF
(
√wdú
);

249  
ªsu…
;

250 
	}
}

260 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

262 
vnode
 *
vn
;

263 
ªsu…
;

265 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

266 i‡(
ªsu…
) {

267  
ªsu…
;

270 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

272 
	`VOP_DECREF
(
vn
);

274  
ªsu…
;

275 
	}
}

281 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

283 
vnode
 *
∑ª¡
;

284 
«me
[
NAME_MAX
+1];

285 
ªsu…
;

287 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

288 i‡(
ªsu…
) {

289  
ªsu…
;

292 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

294 
	`VOP_DECREF
(
∑ª¡
);

296  
ªsu…
;

297 
	}
}

303 
	$vfs_rmdú
(*
∑th
)

305 
vnode
 *
∑ª¡
;

306 
«me
[
NAME_MAX
+1];

307 
ªsu…
;

309 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

310 i‡(
ªsu…
) {

311  
ªsu…
;

314 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

316 
	`VOP_DECREF
(
∑ª¡
);

318  
ªsu…
;

319 
	}
}

	@kern/vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

45 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

46 
fs
 *fs, *
fsd©a
)

48 
	`KASSERT
(
vn
!=
NULL
);

49 
	`KASSERT
(
›s
!=
NULL
);

51 
vn
->
vn_›s
 = 
›s
;

52 
vn
->
vn_ªfcou¡
 = 1;

53 
vn
->
vn_›ícou¡
 = 0;

54 
vn
->
vn_fs
 = 
fs
;

55 
vn
->
vn_d©a
 = 
fsd©a
;

57 
	}
}

64 
	$vnode_˛ónup
(
vnode
 *
vn
)

66 
	`KASSERT
(
vn
->
vn_ªfcou¡
==1);

67 
	`KASSERT
(
vn
->
vn_›ícou¡
==0);

69 
vn
->
vn_›s
 = 
NULL
;

70 
vn
->
vn_ªfcou¡
 = 0;

71 
vn
->
vn_›ícou¡
 = 0;

72 
vn
->
vn_fs
 = 
NULL
;

73 
vn
->
vn_d©a
 = 
NULL
;

74 
	}
}

82 
	$vnode_ö¸ef
(
vnode
 *
vn
)

84 
	`KASSERT
(
vn
 !
NULL
);

86 
	`vfs_biglock_acquúe
();

88 
vn
->
vn_ªfcou¡
++;

90 
	`vfs_biglock_ªÀa£
();

91 
	}
}

99 
	$vnode_de¸ef
(
vnode
 *
vn
)

101 
ªsu…
;

103 
	`KASSERT
(
vn
 !
NULL
);

105 
	`vfs_biglock_acquúe
();

107 
	`KASSERT
(
vn
->
vn_ªfcou¡
>0);

108 i‡(
vn
->
vn_ªfcou¡
>1) {

109 
vn
->
vn_ªfcou¡
--;

112 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

113 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

115 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

116 
	`°ªº‹
(
ªsu…
));

120 
	`vfs_biglock_ªÀa£
();

121 
	}
}

128 
	$vnode_öc›í
(
vnode
 *
vn
)

130 
	`KASSERT
(
vn
 !
NULL
);

132 
	`vfs_biglock_acquúe
();

133 
vn
->
vn_›ícou¡
++;

134 
	`vfs_biglock_ªÀa£
();

135 
	}
}

142 
	$vnode_dec›í
(
vnode
 *
vn
)

144 
ªsu…
;

146 
	`KASSERT
(
vn
 !
NULL
);

148 
	`vfs_biglock_acquúe
();

150 
	`KASSERT
(
vn
->
vn_›ícou¡
>0);

151 
vn
->
vn_›ícou¡
--;

153 i‡(
vn
->
vn_›ícou¡
 > 0) {

154 
	`vfs_biglock_ªÀa£
();

158 
ªsu…
 = 
	`VOP_CLOSE
(
vn
);

159 i‡(
ªsu…
) {

163 
	`k¥ötf
("vfs: W¨nög: VOP_CLOSE: %s\n", 
	`°ªº‹
(
ªsu…
));

166 
	`vfs_biglock_ªÀa£
();

167 
	}
}

174 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

176 
	`vfs_biglock_acquúe
();

178 i‡(
v
 =
NULL
) {

179 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

181 i‡(
v
 == (*)0xdeadbeef) {

182 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

185 i‡(
v
->
vn_›s
 =
NULL
) {

186 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

188 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

189 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

192 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

193 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

194 
›°r
, 
v
->
vn_›s
->
v›_magic
);

201 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

202 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

205 i‡(
v
->
vn_ªfcou¡
 < 0) {

206 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

207 
v
->
vn_ªfcou¡
);

209 i‡(
v
->
vn_ªfcou¡
 =0 && 
	`°rcmp
(
›°r
, "reclaim")) {

210 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

212 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

213 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

214 
›°r
, 
v
->
vn_ªfcou¡
);

217 i‡(
v
->
vn_›ícou¡
 < 0) {

218 
	`∑nic
("vnode_check: v›_%s:Çeg©ivê›ícou¡ %d\n", 
›°r
,

219 
v
->
vn_›ícou¡
);

221 i‡(
v
->
vn_›ícou¡
 > 0x100000) {

222 
	`k¥ötf
("vnode_check: vop_%s: warning:Üarge opencount %d\n",

223 
›°r
, 
v
->
vn_›ícou¡
);

226 
	`vfs_biglock_ªÀa£
();

227 
	}
}

	@kern/vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

134  
EFAULT
;

137 i‡(
t›
 >
USERSPACETOP
) {

139 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

143 
	}
}

153 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

155 
ªsu…
;

156 
size_t
 
°›Àn
;

158 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 i‡(
°›Àn
 !
Àn
) {

164  
EFAULT
;

167 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

169 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

170 i‡(
ªsu…
) {

171 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

172  
EFAULT
;

175 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

177 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

179 
	}
}

189 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

191 
ªsu…
;

192 
size_t
 
°›Àn
;

194 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

195 i‡(
ªsu…
) {

196  
ªsu…
;

198 i‡(
°›Àn
 !
Àn
) {

200  
EFAULT
;

203 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

205 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

206 i‡(
ªsu…
) {

207 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

208  
EFAULT
;

211 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

213 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

215 
	}
}

235 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

236 
size_t
 *
gŸÀn
)

238 
size_t
 
i
;

240 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

241 
de°
[
i
] = 
§c
[i];

242 i‡(
§c
[
i
] == 0) {

243 i‡(
gŸÀn
 !
NULL
) {

244 *
gŸÀn
 = 
i
+1;

249 i‡(
°›Àn
 < 
maxÀn
) {

251  
EFAULT
;

254  
ENAMETOOLONG
;

255 
	}
}

266 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

268 
ªsu…
;

269 
size_t
 
°›Àn
;

271 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

272 i‡(
ªsu…
) {

273  
ªsu…
;

276 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

278 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

279 i‡(
ªsu…
) {

280 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

281  
EFAULT
;

284 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

286 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

287  
ªsu…
;

288 
	}
}

299 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

301 
ªsu…
;

302 
size_t
 
°›Àn
;

304 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

311 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

312 i‡(
ªsu…
) {

313 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

314  
EFAULT
;

317 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

319 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

320  
ªsu…
;

321 
	}
}

	@kern/vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

42 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

44 
uöt32_t
 *
±r
 = 
v±r
;

45 
size_t
 
i
;

47 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

48 
±r
[
i
] = 0xdeadbeef;

50 
	}
}

79 #unde‡
SLOW


80 #unde‡
SLOWER


84 #i‡
PAGE_SIZE
 == 4096

86 
	#NSIZES
 8

	)

87 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

89 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

90 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

92 #ñi‡
PAGE_SIZE
 == 8192

100 
	s‰ìli°
 {

101 
‰ìli°
 *
	m√xt
;

104 
	s∑gîef
 {

105 
∑gîef
 *
	m√xt_ßmesize
;

106 
∑gîef
 *
	m√xt_Æl
;

107 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

108 
uöt16_t
 
	m‰ìli°_off£t
;

109 
uöt16_t
 
	mn‰ì
;

112 
	#INVALID_OFFSET
 (0xffff)

	)

114 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

115 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

116 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

138 
	#NPAGEREFS
 (
PAGE_SIZE
 / (
∑gîef
))

	)

139 
∑gîef
 
	g∑gîefs
[
NPAGEREFS
];

141 
	#INUSE_WORDS
 (
NPAGEREFS
/32)

	)

142 
uöt32_t
 
	g∑gîefs_öu£
[
INUSE_WORDS
];

145 
∑gîef
 *

146 
	$Ælo˝agîef
()

148 
i
,
j
;

149 
uöt32_t
 
k
;

151 
i
=0; i<
INUSE_WORDS
; i++) {

152 i‡(
∑gîefs_öu£
[
i
]==0xffffffff) {

156 
k
=1,
j
=0; k!=0; k<<=1,j++) {

157 i‡((
∑gîefs_öu£
[
i
] & 
k
)==0) {

158 
∑gîefs_öu£
[
i
] |
k
;

159  &
∑gîefs
[
i
*32 + 
j
];

162 
	`KASSERT
(0);

166  
NULL
;

167 
	}
}

171 
	$‰ì∑gîef
(
∑gîef
 *
p
)

173 
size_t
 
i
, 
j
;

174 
uöt32_t
 
k
;

176 
j
 = 
p
-
∑gîefs
;

177 
	`KASSERT
(
j
 < 
NPAGEREFS
);

178 
i
 = 
j
/32;

179 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

180 
	`KASSERT
((
∑gîefs_öu£
[
i
] & 
k
) != 0);

181 
∑gîefs_öu£
[
i
] &~
k
;

182 
	}
}

186 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

187 
∑gîef
 *
	gÆlba£
;

198 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

203 #ifde‡
SLOWER


204 #i‚de‡
SLOW


205 
	#SLOW


	)

209 #ifde‡
SLOW


212 
	$checksub∑ge
(
∑gîef
 *
¥
)

214 
vaddr_t
 
¥∑ge
, 
Êa
;

215 
‰ìli°
 *
Ê
;

216 
blkty≥
;

217 
n‰ì
=0;

219 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

221 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

222 
	`KASSERT
(
¥
->
n‰ì
==0);

226 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

227 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

229 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

230 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
sizes
[
blkty≥
] == 0);

232 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

233 
Ê
 = (
‰ìli°
 *)
Êa
;

235 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

236 
Êa
 = (
vaddr_t
)
Ê
;

237 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

238 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
sizes
[
blkty≥
] == 0);

239 
	`KASSERT
(
Êa
 >
MIPS_KSEG0
);

240 
	`KASSERT
(
Êa
 < 
MIPS_KSEG1
);

241 
n‰ì
++;

243 
	`KASSERT
(
n‰ì
==
¥
->nfree);

244 
	}
}

246 
	#checksub∑ge
(
¥
Ë(()’r))

	)

249 #ifde‡
SLOWER


252 
	$checksub∑ges
()

254 
∑gîef
 *
¥
;

255 
i
;

256 
sc
=0, 
ac
=0;

258 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

260 
i
=0; i<
NSIZES
; i++) {

261 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

262 
	`checksub∑ge
(
¥
);

263 
	`KASSERT
(
sc
 < 
NPAGEREFS
);

264 
sc
++;

268 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

269 
	`checksub∑ge
(
¥
);

270 
	`KASSERT
(
ac
 < 
NPAGEREFS
);

271 
ac
++;

274 
	`KASSERT
(
sc
==
ac
);

275 
	}
}

277 
	#checksub∑ges
()

	)

284 
	$dumpsub∑ge
(
∑gîef
 *
¥
)

286 
vaddr_t
 
¥∑ge
, 
Êa
;

287 
‰ìli°
 *
Ê
;

288 
blkty≥
;

289 
i
, 
n
, 
ödex
;

290 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

292 
	`checksub∑ge
(
¥
);

293 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

296 
i
=0; i<(
‰ìm≠
)/(freemap[0]); i++) {

297 
‰ìm≠
[
i
] = 0;

300 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

301 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

304 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

305 
	`KASSERT
(
n
 <32*(
‰ìm≠
)/(freemap[0]));

307 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

308 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

309 
Ê
 = (
‰ìli°
 *)
Êa
;

311 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

312 
Êa
 = (
vaddr_t
)
Ê
;

313 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

314 
	`KASSERT
(
ödex
<
n
);

315 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

319 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

320 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

321 (Ë
¥
->
n‰ì
, 
n
);

322 
	`k¥ötf
(" ");

323 
i
=0; i<
n
; i++) {

324 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

325 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

326 i‡(
i
%64==63 && i<
n
-1) {

327 
	`k¥ötf
("\n ");

330 
	`k¥ötf
("\n");

331 
	}
}

334 
	$khóp_¥öt°©s
()

336 
∑gîef
 *
¥
;

339 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

341 
	`k¥ötf
("Subpageállocator status:\n");

343 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

344 
	`dumpsub∑ge
(
¥
);

347 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

348 
	}
}

354 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

356 
∑gîef
 **
guy
;

358 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

360 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

361 
	`checksub∑ge
(*
guy
);

362 i‡(*
guy
 =
¥
) {

363 *
guy
 = 
¥
->
√xt_ßmesize
;

368 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

369 
	`checksub∑ge
(*
guy
);

370 i‡(*
guy
 =
¥
) {

371 *
guy
 = 
¥
->
√xt_Æl
;

375 
	}
}

378 
ölöe


379 
	$blockty≥
(
size_t
 
sz
)

381 
i
;

382 
i
=0; i<
NSIZES
; i++) {

383 i‡(
sz
 <
sizes
[
i
]) {

384  
i
;

388 
	`∑nic
("Subpageállocator cannot handleállocation of size %lu\n",

389 ()
sz
);

393 
	}
}

397 
	$sub∑ge_kmÆloc
(
size_t
 
sz
)

399 
blkty≥
;

400 
∑gîef
 *
¥
;

401 
vaddr_t
 
¥∑ge
;

402 
vaddr_t
 
Êa
;

403 
‰ìli°
 *vﬁ©ûê
Ê
;

404 *
ªçå
;

406 vﬁ©ûê
i
;

409 
blkty≥
 = 
	`blockty≥
(
sz
);

410 
sz
 = 
sizes
[
blkty≥
];

412 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

414 
	`checksub∑ges
();

416 
¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

419 
	`KASSERT
(
	`PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

420 
	`checksub∑ge
(
¥
);

422 i‡(
¥
->
n‰ì
 > 0) {

424 
dﬂŒoc
:

426 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

427 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

428 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

429 
Ê
 = (
‰ìli°
 *)
Êa
;

431 
ªçå
 = 
Ê
;

432 
Ê
 = fl->
√xt
;

433 
¥
->
n‰ì
--;

435 i‡(
Ê
 !
NULL
) {

436 
	`KASSERT
(
¥
->
n‰ì
 > 0);

437 
Êa
 = (
vaddr_t
)
Ê
;

438 
	`KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

439 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

442 
	`KASSERT
(
¥
->
n‰ì
 == 0);

443 
¥
->
‰ìli°_off£t
 = 
INVALID_OFFSET
;

446 
	`checksub∑ges
();

448 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

449  
ªçå
;

462 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

463 
¥∑ge
 = 
	`Æloc_k∑ges
(1);

464 i‡(
¥∑ge
==0) {

466 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

467  
NULL
;

469 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

471 
¥
 = 
	`Ælo˝agîef
();

472 i‡(
¥
==
NULL
) {

474 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

475 
	`‰ì_k∑ges
(
¥∑ge
);

476 
	`k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

477  
NULL
;

480 
¥
->
∑góddr_™d_blockty≥
 = 
	`MKPAB
(
¥∑ge
, 
blkty≥
);

481 
¥
->
n‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

489 
Êa
 = 
¥∑ge
;

490 
Ê
 = (
‰ìli°
 *)
Êa
;

491 
Ê
->
√xt
 = 
NULL
;

492 
i
=1; i<
¥
->
n‰ì
; i++) {

493 
Ê
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

494 
Ê
->
√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

495 
	`KASSERT
(
Ê
 !Ê->
√xt
);

497 
Êa
 = (
vaddr_t
Ë
Ê
;

498 
¥
->
‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

499 
	`KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

501 
¥
->
√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

502 
sizeba£s
[
blkty≥
] = 
¥
;

504 
¥
->
√xt_Æl
 = 
Ælba£
;

505 
Ælba£
 = 
¥
;

508 
dﬂŒoc
;

509 
	}
}

513 
	$sub∑ge_k‰ì
(*
±r
)

515 
blkty≥
;

516 
vaddr_t
 
±øddr
;

517 
∑gîef
 *
¥
;

518 
vaddr_t
 
¥∑ge
;

519 
vaddr_t
 
Êa
;

520 
‰ìli°
 *
Ê
;

521 
vaddr_t
 
off£t
;

523 
±øddr
 = (
vaddr_t
)
±r
;

525 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

527 
	`checksub∑ges
();

529 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

530 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

531 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

534 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

535 
	`checksub∑ge
(
¥
);

537 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

542 i‡(
¥
==
NULL
) {

544 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

548 
off£t
 = 
±øddr
 - 
¥∑ge
;

551 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

552 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

559 
	`fûl_dódbìf
(
±r
, 
sizes
[
blkty≥
]);

566 
Êa
 = 
¥∑ge
 + 
off£t
;

567 
Ê
 = (
‰ìli°
 *)
Êa
;

568 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

569 
Ê
->
√xt
 = 
NULL
;

571 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

573 
¥
->
‰ìli°_off£t
 = 
off£t
;

574 
¥
->
n‰ì
++;

576 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

577 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

579 
	`ªmove_li°s
(
¥
, 
blkty≥
);

580 
	`‰ì∑gîef
(
¥
);

582 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

583 
	`‰ì_k∑ges
(
¥∑ge
);

586 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

589 #ifde‡
SLOWER


590 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

591 
	`checksub∑ges
();

592 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

596 
	}
}

602 
	$kmÆloc
(
size_t
 
sz
)

604 i‡(
sz
>=
LARGEST_SUBPAGE_SIZE
) {

605 
≈ages
;

606 
vaddr_t
 
addªss
;

609 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

610 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

611 i‡(
addªss
==0) {

612  
NULL
;

615  (*)
addªss
;

618  
	`sub∑ge_kmÆloc
(
sz
);

619 
	}
}

622 
	$k‰ì
(*
±r
)

627 i‡(
±r
 =
NULL
) {

629 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

630 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

631 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

633 
	}
}

	@kern/vm/uw-vmstats.c

13 
	~<ty≥s.h
>

14 
	~<lib.h
>

15 
	~<synch.h
>

16 
	~<•l.h
>

17 
	~<uw-vm°©s.h
>

20 
	g°©s_cou¡s
[
VMSTAT_COUNT
];

22 
•ölock
 
	g°©s_lock
 = 
SPINLOCK_INITIALIZER
;

25 c⁄° *
	g°©s_«mes
[] = {

42 
	$vm°©s_öc
(
ödex
)

44 
	`•ölock_acquúe
(&
°©s_lock
);

45 
	`_vm°©s_öc
(
ödex
);

46 
	`•ölock_ªÀa£
(&
°©s_lock
);

47 
	}
}

51 
	$vm°©s_öô
()

56 
	`•ölock_öô
(&
°©s_lock
);

58 
	`•ölock_acquúe
(&
°©s_lock
);

59 
	`_vm°©s_öô
();

60 
	`•ölock_ªÀa£
(&
°©s_lock
);

61 
	}
}

65 
	$_vm°©s_öc
(
ödex
)

67 
	`KASSERT
(
ödex
 < 
VMSTAT_COUNT
);

68 
°©s_cou¡s
[
ödex
]++;

69 
	}
}

73 
	$_vm°©s_öô
()

75 
i
 = 0;

77 i‡((
°©s_«mes
Ë/ (*Ë!
VMSTAT_COUNT
) {

78 
	`k¥ötf
("vmstats_init:Çumber of stats_names = %d != VMSTAT_COUNT = %d\n",

79 ((
°©s_«mes
Ë/ (*)), 
VMSTAT_COUNT
);

80 
	`∑nic
("ShouldÑeally fixÅhis beforeÖroceeding\n");

83 
i
=0; i<
VMSTAT_COUNT
; i++) {

84 
°©s_cou¡s
[
i
] = 0;

87 
	}
}

97 
	$vm°©s_¥öt
()

99 
i
 = 0;

100 
‰ì_∂us_ª∂a˚
 = 0;

101 
disk_∂us_zî€d_∂us_ªlﬂd
 = 0;

102 
éb_Áu…s
 = 0;

103 
ñf_∂us_sw≠_ªads
 = 0;

104 
disk_ªads
 = 0;

106 
	`k¥ötf
("VMSTATS:\n");

107 
i
=0; i<
VMSTAT_COUNT
; i++) {

108 
	`k¥ötf
("VMSTAT %25†%10d\n", 
°©s_«mes
[
i
], 
°©s_cou¡s
[i]);

111 
éb_Áu…s
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT
];

112 
‰ì_∂us_ª∂a˚
 = 
°©s_cou¡s
[
VMSTAT_TLB_FAULT_FREE
] + sèts_cou¡s[
VMSTAT_TLB_FAULT_REPLACE
];

113 
disk_∂us_zî€d_∂us_ªlﬂd
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
] +

114 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_ZERO
] + sèts_cou¡s[
VMSTAT_TLB_RELOAD
];

115 
ñf_∂us_sw≠_ªads
 = 
°©s_cou¡s
[
VMSTAT_ELF_FILE_READ
] + sèts_cou¡s[
VMSTAT_SWAP_FILE_READ
];

116 
disk_ªads
 = 
°©s_cou¡s
[
VMSTAT_PAGE_FAULT_DISK
];

118 
	`k¥ötf
("VMSTAT TLB Fau…†wôh Fªê+ TLB Fau…†wôh Rïœ˚ = %d\n", 
‰ì_∂us_ª∂a˚
);

119 i‡(
éb_Áu…s
 !
‰ì_∂us_ª∂a˚
) {

120 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Faults with Free + TLB Faults with Replace (%d)\n",

121 
éb_Áu…s
, 
‰ì_∂us_ª∂a˚
);

124 
	`k¥ötf
("VMSTAT TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) = %d\n",

125 
disk_∂us_zî€d_∂us_ªlﬂd
);

126 i‡(
éb_Áu…s
 !
disk_∂us_zî€d_∂us_ªlﬂd
) {

127 
	`k¥ötf
("WARNING: TLB Faults (%d) != TLB Reloads + Page Faults (Zeroed) + Page Faults (Disk) (%d)\n",

128 
éb_Áu…s
, 
disk_∂us_zî€d_∂us_ªlﬂd
);

131 
	`k¥ötf
("VMSTAT ELF Fûêªad†+ Sw≠fûêªad†%d\n", 
ñf_∂us_sw≠_ªads
);

132 i‡(
disk_ªads
 !
ñf_∂us_sw≠_ªads
) {

133 
	`k¥ötf
("WARNING: ELF FileÑeads + SwapfileÑeads != Page Faults (Disk) %d\n",

134 
ñf_∂us_sw≠_ªads
);

136 
	}
}

	@user/bin/cat/cat.c

30 
	~<uni°d.h
>

31 
	~<°rög.h
>

32 
	~<îr.h
>

44 
	$doˇt
(c⁄° *
«me
, 
fd
)

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

55 (
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)))>0) {

60 
wπŸ
 = 0;

61 
wπŸ
 < 
Àn
) {

62 
wr
 = 
	`wrôe
(
STDOUT_FILENO
, 
buf
+
wπŸ
, 
Àn
-wrtot);

63 i‡(
wr
<0) {

64 
	`îr
(1, "stdout");

66 
wπŸ
 +
wr
;

72 i‡(
Àn
<0) {

73 
	`îr
(1, "%s", 
«me
);

75 
	}
}

80 
	$ˇt
(c⁄° *
fûe
)

82 
fd
;

87 i‡(!
	`°rcmp
(
fûe
, "-")) {

88 
	`doˇt
("°dö", 
STDIN_FILENO
);

96 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
);

97 i‡(
fd
<0) {

98 
	`îr
(1, "%s", 
fûe
);

100 
	`doˇt
(
fûe
, 
fd
);

101 
	`˛o£
(
fd
);

102 
	}
}

106 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
==1) {

110 
	`doˇt
("°dö", 
STDIN_FILENO
);

114 
i
;

115 
i
=1; i<
¨gc
; i++) {

116 
	`ˇt
(
¨gv
[
i
]);

120 
	}
}

	@user/bin/cp/cp.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

42 
	$c›y
(c⁄° *
‰om
, c⁄° *
to
)

44 
‰omfd
;

45 
tofd
;

46 
buf
[1024];

47 
Àn
, 
wr
, 
wπŸ
;

52 
‰omfd
 = 
	`›í
(
‰om
, 
O_RDONLY
);

53 i‡(
‰omfd
<0) {

54 
	`îr
(1, "%s", 
‰om
);

56 
tofd
 = 
	`›í
(
to
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

57 i‡(
tofd
<0) {

58 
	`îr
(1, "%s", 
to
);

67 (
Àn
 = 
	`ªad
(
‰omfd
, 
buf
, (buf)))>0) {

72 
wπŸ
 = 0;

73 
wπŸ
 < 
Àn
) {

74 
wr
 = 
	`wrôe
(
tofd
, 
buf
+
wπŸ
, 
Àn
-wrtot);

75 i‡(
wr
<0) {

76 
	`îr
(1, "%s", 
to
);

78 
wπŸ
 +
wr
;

84 i‡(
Àn
<0) {

85 
	`îr
(1, "%s", 
‰om
);

88 i‡(
	`˛o£
(
‰omfd
) < 0) {

89 
	`îr
(1, "%s: clo£", 
‰om
);

92 i‡(
	`˛o£
(
tofd
) < 0) {

93 
	`îr
(1, "%s: clo£", 
to
);

95 
	}
}

98 
	$maö
(
¨gc
, *
¨gv
[])

108 i‡(
¨gc
!=3) {

109 
	`îrx
(1, "Usage: cp OLDFILE NEWFILE");

111 
	`c›y
(
¨gv
[1],árgv[2]);

113 
	}
}

	@user/bin/false/false.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

41 
	$maö
()

44 
	`exô
(1);

45 
	}
}

	@user/bin/ln/ln.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

51 
	$dosymlök
(c⁄° *
ãxt
, c⁄° *
∑th
)

53 i‡(
	`symlök
(
ãxt
, 
∑th
)) {

54 
	`îr
(1, "%s", 
∑th
);

56 
	}
}

65 
	$doh¨dlök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

67 i‡(
	`lök
(
ﬁdfûe
, 
√wfûe
)) {

68 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

69 
	`exô
(1);

71 
	}
}

74 
	$maö
(
¨gc
, *
¨gv
[])

82 i‡(
¨gc
==4 && !
	`°rcmp
(
¨gv
[1], "-s")) {

83 
	`dosymlök
(
¨gv
[2],árgv[3]);

85 i‡(
¨gc
==3) {

86 
	`doh¨dlök
(
¨gv
[1],árgv[2]);

89 
	`w¨nx
("Usage:Ün oldfileÇewfile");

90 
	`îrx
(1, "Ün -s symlinkcontents symlinkfile\n");

93 
	}
}

	@user/bin/ls/ls.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

49 
	ga›t
=0;

50 
	gd›t
=0;

51 
	gl›t
=0;

52 
	gR›t
=0;

53 
	gs›t
=0;

58 
	$›ti⁄
(
ch
)

60 
ch
) {

61 'a': 
a›t
=1; ;

62 'd': 
d›t
=1; ;

63 'l': 
l›t
=1; ;

64 'R': 
R›t
=1; ;

65 's': 
s›t
=1; ;

67 
	`îrx
(1, "Unknow¿›ti⁄ -%c", 
ch
);

69 
	}
}

76 
	$ba£«me
(c⁄° *
∑th
)

78 c⁄° *
s
;

80 
s
 = 
	`°ºchr
(
∑th
, '/');

81 i‡(
s
) {

82  
s
+1;

84  
∑th
;

85 
	}
}

92 
	$isdú
(c⁄° *
∑th
)

94 
°©
 
buf
;

95 
fd
;

98 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

99 i‡(
fd
<0) {

100 
	`îr
(1, "%s", 
∑th
);

102 i‡(
	`f°©
(
fd
, &
buf
)<0) {

103 
	`îr
(1, "%s: f°©", 
∑th
);

105 
	`˛o£
(
fd
);

107  
	`S_ISDIR
(
buf
.
°_mode
);

108 
	}
}

116 
	$¥öthódî
(c⁄° *
fûe
)

119 
fú°
=1;

120 i‡(
fú°
) {

121 
fú°
 = 0;

124 
	`¥ötf
("\n");

126 
	`¥ötf
("%s:\n", 
fûe
);

127 
	}
}

135 
	$¥öt
(c⁄° *
∑th
)

137 
°©
 
°©buf
;

138 c⁄° *
fûe
;

139 
ty≥ch
;

141 i‡(
l›t
 || 
s›t
) {

142 
fd
;

144 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

145 i‡(
fd
<0) {

146 
	`îr
(1, "%s", 
∑th
);

148 i‡(
	`f°©
(
fd
, &
°©buf
)<0) {

149 
	`îr
(1, "%s: f°©", 
∑th
);

151 
	`˛o£
(
fd
);

154 
fûe
 = 
	`ba£«me
(
∑th
);

156 i‡(
s›t
) {

157 
	`¥ötf
("%3d ", 
°©buf
.
°_blocks
);

160 i‡(
l›t
) {

161 i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

162 
ty≥ch
 = '-';

164 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
)) {

165 
ty≥ch
 = 'd';

167 i‡(
	`S_ISLNK
(
°©buf
.
°_mode
)) {

168 
ty≥ch
 = 'l';

170 i‡(
	`S_ISCHR
(
°©buf
.
°_mode
)) {

171 
ty≥ch
 = 'c';

173 i‡(
	`S_ISBLK
(
°©buf
.
°_mode
)) {

174 
ty≥ch
 = 'b';

177 
ty≥ch
 = '?';

180 
	`¥ötf
("%crwx------ %2dÑoot %-8llu",

181 
ty≥ch
,

182 
°©buf
.
°_∆ök
,

183 
°©buf
.
°_size
);

185 
	`¥ötf
("%s\n", 
fûe
);

186 
	}
}

193 
	$li°dú
(c⁄° *
∑th
, 
showhódî
)

195 
fd
;

196 
buf
[1024];

197 
√w∑th
[1024];

198 
Àn
;

200 i‡(
showhódî
) {

201 
	`¥öthódî
(
∑th
);

207 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

208 i‡(
fd
<0) {

209 
	`îr
(1, "%s", 
∑th
);

215 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

216 
buf
[
Àn
] = 0;

219 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

221 i‡(
a›t
 || 
buf
[0]!='.') {

223 
	`¥öt
(
√w∑th
);

226 i‡(
Àn
<0) {

227 
	`îr
(1, "%s: gëdúíåy", 
∑th
);

231 
	`˛o£
(
fd
);

232 
	}
}

236 
	$ªcur£dú
(c⁄° *
∑th
)

238 
fd
;

239 
buf
[1024];

240 
√w∑th
[1024];

241 
Àn
;

246 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

247 i‡(
fd
<0) {

248 
	`îr
(1, "%s", 
∑th
);

254 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1)) > 0) {

255 
buf
[
Àn
] = 0;

258 
	`¢¥ötf
(
√w∑th
, “ew∑th), "%s/%s", 
∑th
, 
buf
);

260 i‡(!
a›t
 && 
buf
[0]=='.') {

265 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

270 i‡(!
	`isdú
(
√w∑th
)) {

274 
	`li°dú
(
√w∑th
, 1 );

275 i‡(
R›t
) {

276 
	`ªcur£dú
(
√w∑th
);

279 i‡(
Àn
<0) {

280 
	`îr
(1, "%s", 
∑th
);

283 
	`˛o£
(
fd
);

284 
	}
}

288 
	$li°ôem
(c⁄° *
∑th
, 
showhódî
)

290 i‡(!
d›t
 && 
	`isdú
(
∑th
)) {

291 
	`li°dú
(
∑th
, 
showhódî
 || 
R›t
);

292 i‡(
R›t
) {

293 
	`ªcur£dú
(
∑th
);

297 
	`¥öt
(
∑th
);

299 
	}
}

302 
	$maö
(
¨gc
, *
¨gv
[])

304 
i
,
j
, 
ôems
=0;

309 
i
=1; i<
¨gc
; i++) {

310 i‡(
¨gv
[
i
][0]!='-') {

311 
ôems
++;

318 
i
=1; i<
¨gc
; i++) {

319 i‡(
¨gv
[
i
][0]=='-') {

324 
j
=1; 
¨gv
[
i
][j]; j++) {

325 
	`›ti⁄
(
¨gv
[
i
][
j
]);

332 
	`li°ôem
(
¨gv
[
i
], 
ôems
>1);

340 i‡(
ôems
==0) {

341 
	`li°ôem
(".", 0);

345 
	}
}

	@user/bin/mkdir/mkdir.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 i‡(
¨gc
!=2) {

46 
	`îrx
(1, "Usage: mkdir DIRECTORY");

49 i‡(
	`mkdú
(
¨gv
[1], 0775)) {

50 
	`îr
(1, "%s", 
¨gv
[1]);

53 
	}
}

	@user/bin/mv/mv.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

49 
	$d‹íame
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
)

51 i‡(
	`ª«me
(
ﬁdfûe
, 
√wfûe
)) {

52 
	`îr
(1, "%†‹ %s", 
ﬁdfûe
, 
√wfûe
);

54 
	}
}

57 
	$maö
(
¨gc
, *
¨gv
[])

59 i‡(
¨gc
!=3) {

60 
	`îrx
(1, "Usage: mv oldfileÇewfile");

62 
	`d‹íame
(
¨gv
[1],árgv[2]);

64 
	}
}

	@user/bin/pwd/pwd.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

33 
	~<îr.h
>

34 
	~<limôs.h
>

45 
	$maö
()

47 
buf
[
PATH_MAX
+1], *
p
;

49 
p
 = 
	`gëcwd
(
buf
, (buf));

50 i‡(
p
 =
NULL
) {

51 
	`îr
(1, ".");

53 
	`¥ötf
("%s\n", 
buf
);

55 
	}
}

	@user/bin/rm/rm.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$d‹emove
(c⁄° *
fûe
)

43 i‡(
	`ªmove
(
fûe
)) {

44 
	`îr
(1, "%s", 
fûe
);

46 
	}
}

49 
	$maö
(
¨gc
, *
¨gv
[])

51 
i
;

53 i‡(
¨gc
<2) {

55 
	`îrx
(1, "Usage:Ñm FILES");

59 
i
=1; i<
¨gc
; i++) {

60 
	`d‹emove
(
¨gv
[
i
]);

64 
	}
}

	@user/bin/rmdir/rmdir.c

30 
	~<uni°d.h
>

31 
	~<îr.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 i‡(
¨gc
!=2) {

44 
	`îrx
(1, "Usage:Ñmdir DIRECTORY");

47 i‡(
	`rmdú
(
¨gv
[1])) {

48 
	`îr
(1, "%s", 
¨gv
[1]);

51 
	}
}

	@user/bin/sh/sh.c

38 
	~<sys/ty≥s.h
>

39 
	~<sys/waô.h
>

40 
	~<as£π.h
>

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<limôs.h
>

46 
	~<î∫o.h
>

47 
	~<îr.h
>

49 #ifde‡
HOST


50 
	~"ho°com∑t.h
"

53 #i‚de‡
NARG_MAX


55 
	#NARG_MAX
 1024

	)

59 #i‡
ARG_MAX
 > 4096

60 
	#CMDLINE_MAX
 4096

	)

62 
	#CMDLINE_MAX
 
ARG_MAX


	)

66 
	gtimög
 = 0;

69 
	#MAXBG
 128

	)

70 
pid_t
 
	gbgpids
[
MAXBG
];

78 
	$ˇn_bg
()

80 
i
;

82 
i
 = 0; i < 
MAXBG
; i++) {

83 i‡(
bgpids
[
i
] == 0) {

89 
	}
}

98 
	$ªmembî_bg
(
pid_t
 
pid
)

100 
i
;

101 
i
 = 0; i < 
MAXBG
; i++) {

102 i‡(
bgpids
[
i
] == 0) {

103 
bgpids
[
i
] = 
pid
;

107 
	`as£π
(0);

108 
	}
}

116 
	$¥öt°©us
(
°©us
)

118 i‡(
	`WIFEXITED
(
°©us
)) {

119 
	`¥ötf
("Exô %d", 
	`WEXITSTATUS
(
°©us
));

121 i‡(
	`WIFSIGNALED
(
°©us
Ë&& 
	`WCOREDUMP
(status)) {

122 
	`¥ötf
("Sig«»%d (c‹êdum≥d)", 
	`WTERMSIG
(
°©us
));

124 i‡(
	`WIFSIGNALED
(
°©us
)) {

125 
	`¥ötf
("Sig«»%d", 
	`WTERMSIG
(
°©us
));

127 i‡(
	`WIFSTOPPED
(
°©us
)) {

128 
	`¥ötf
("St›≥d o¿sig«»%d", 
	`WSTOPSIG
(
°©us
));

131 
	`¥ötf
("InvÆid sètu†codê%d", 
°©us
);

133 
	}
}

141 
	$dowaô
(
pid_t
 
pid
)

143 
°©us
;

144 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

145 
	`w¨n
("pid %d", 
pid
);

148 
	`¥ötf
("pid %d: ", 
pid
);

149 
	`¥öt°©us
(
°©us
);

150 
	`¥ötf
("\n");

152 
	}
}

154 #ifde‡
WNOHANG


161 
	$dowaôpﬁl
(
pid_t
 
pid
)

163 
°©us
;

164 
pid_t
 
ªsu…
;

165 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 
WNOHANG
);

166 i‡(
ªsu…
<0) {

167 
	`w¨n
("pid %d", 
pid
);

169 i‡(
ªsu…
!=0) {

170 
	`¥ötf
("pid %d: ", 
pid
);

171 
	`¥öt°©us
(
°©us
);

172 
	`¥ötf
("\n");

176 
	}
}

184 
	$waôpﬁl
()

186 
i
;

187 
i
=0; i < 
MAXBG
; i++) {

188 i‡(
bgpids
[
i
] != 0) {

189 i‡(
	`dowaôpﬁl
(
bgpids
[
i
])) {

190 
bgpids
[
i
] = 0;

194 
	}
}

205 
	$cmd_waô
(
ac
, *
av
[])

207 
i
;

208 
pid_t
 
pid
;

210 i‡(
ac
 == 2) {

211 
pid
 = 
	`©oi
(
av
[1]);

212 
	`dowaô
(
pid
);

213 
i
 = 0; i < 
MAXBG
; i++) {

214 i‡(
bgpids
[
i
]==
pid
) {

215 
bgpids
[
i
] = 0;

220 i‡(
ac
 == 1) {

221 
i
=0; i < 
MAXBG
; i++) {

222 i‡(
bgpids
[
i
] != 0) {

223 
	`dowaô
(
bgpids
[
i
]);

224 
bgpids
[
i
] = 0;

229 
	`¥ötf
("Usage: wait [pid]\n");

231 
	}
}

240 
	$cmd_chdú
(
ac
, *
av
[])

242 i‡(
ac
 == 2) {

243 i‡(
	`chdú
(
av
[1])) {

244 
	`w¨n
("chdir");

249 
	`¥ötf
("Usage: chdir dir\n");

251 
	}
}

260 
	$cmd_exô
(
ac
, *
av
[])

262 
code
;

264 i‡(
ac
 == 1) {

265 
code
 = 0;

267 i‡(
ac
 == 2) {

268 
code
 = 
	`©oi
(
av
[1]);

271 
	`¥ötf
("Usage:Éxit [code]\n");

275 
	`exô
(
code
);

278 
	}
}

285 c⁄° *
	m«me
;

286 (*
	mfunc
)(, **);

287 } 
	gbuûtös
[] = {

288 { "cd", 
cmd_chdú
 },

289 { "chdú", 
cmd_chdú
 },

290 { "exô", 
cmd_exô
 },

291 { "waô", 
cmd_waô
 },

292 { 
NULL
, NULL }

304 
	$docomm™d
(*
buf
)

306 *
¨gs
[
NARG_MAX
 + 1];

307 
«rgs
, 
i
;

308 *
s
;

309 
pid_t
 
pid
;

310 
°©us
;

311 
bg
=0;

312 
time_t
 
°¨t£cs
, 
íd£cs
;

313 
°¨ä£cs
, 
ídn£cs
;

315 
«rgs
 = 0;

316 
s
 = 
	`°πok
(
buf
, " \t\r\n"); s; s = såtok(
NULL
, " \t\r\n")) {

317 i‡(
«rgs
 >
NARG_MAX
) {

318 
	`¥ötf
("%s: Too manyárguments "

320 
¨gs
[0]);

323 
¨gs
[
«rgs
++] = 
s
;

325 
¨gs
[
«rgs
] = 
NULL
;

327 i‡(
«rgs
==0) {

332 
i
=0; 
buûtös
[i].
«me
; i++) {

333 i‡(!
	`°rcmp
(
buûtös
[
i
].
«me
, 
¨gs
[0])) {

334  
buûtös
[
i
].
	`func
(
«rgs
, 
¨gs
);

340 i‡(
«rgs
 > 0 && !
	`°rcmp
(
¨gs
[nargs-1], "&")) {

342 i‡(!
	`ˇn_bg
()) {

343 
	`¥ötf
("%s: Too many background jobs; wait for "

345 
¨gs
[0]);

348 
«rgs
--;

349 
¨gs
[
«rgs
] = 
NULL
;

350 
bg
 = 1;

353 i‡(
timög
) {

354 
	`__time
(&
°¨t£cs
, &
°¨ä£cs
);

357 
pid
 = 
	`f‹k
();

358 
pid
) {

361 
	`w¨n
("fork");

362  
	`_MKWAIT_EXIT
(255);

365 
	`execv
(
¨gs
[0],árgs);

366 
	`w¨n
("%s", 
¨gs
[0]);

374 
	`_exô
(1);

380 i‡(
bg
) {

382 
	`ªmembî_bg
(
pid
);

383 
	`¥ötf
("[%d] %†... &\n", 
pid
, 
¨gs
[0]);

387 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0) {

388 
	`w¨n
("waitpid");

389 
°©us
 = -1;

392 i‡(
timög
) {

393 
	`__time
(&
íd£cs
, &
ídn£cs
);

394 i‡(
ídn£cs
 < 
°¨ä£cs
) {

395 
ídn£cs
 += 1000000000;

396 
íd£cs
--;

398 
ídn£cs
 -
°¨ä£cs
;

399 
íd£cs
 -
°¨t£cs
;

400 
	`w¨nx
("subprocessÅime: %lu.%09lu seconds",

401 (Ë
íd£cs
, (Ë
ídn£cs
);

404  
°©us
;

405 
	}
}

419 
	$gëcmd
(*
buf
, 
size_t
 
Àn
)

421 
size_t
 
pos
 = 0;

422 
d⁄e
=0, 
ch
;

428 !
d⁄e
) {

429 
ch
 = 
	`gëch¨
();

430 i‡((
ch
 ='\b' || ch =127Ë&& 
pos
 > 0) {

431 
	`putch¨
('\b');

432 
	`putch¨
(' ');

433 
	`putch¨
('\b');

434 
pos
--;

436 i‡(
ch
 == '\r' || ch == '\n') {

437 
	`putch¨
('\r');

438 
	`putch¨
('\n');

439 
d⁄e
 = 1;

441 i‡(
ch
 >32 && ch < 127 && 
pos
 < 
Àn
-1) {

442 
buf
[
pos
++] = 
ch
;

443 
	`putch¨
(
ch
);

447 
	`putch¨
('\a');

450 
buf
[
pos
] = 0;

451 
	}
}

461 
	$öãø˘ive
()

463 
buf
[
CMDLINE_MAX
];

464 
°©us
;

467 
	`¥ötf
("OS/161$ ");

468 
	`gëcmd
(
buf
, (buf));

469 
°©us
 = 
	`docomm™d
(
buf
);

470 i‡(
°©us
) {

471 
	`¥öt°©us
(
°©us
);

472 
	`¥ötf
("\n");

474 #ifde‡
WNOHANG


475 
	`waôpﬁl
();

478 
	}
}

482 
	$check_timög
()

484 
time_t
 
£cs
;

485 
n£cs
;

486 i‡(
	`__time
(&
£cs
, &
n£cs
) != -1) {

487 
timög
 = 1;

488 
	`w¨nx
("TimingÉnabled.");

490 
	}
}

498 
	$maö
(
¨gc
, *
¨gv
[])

500 #ifde‡
HOST


501 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

503 
	`check_timög
();

509 i‡(
¨gc
 == 0 ||árgc == 1) {

510 
	`öãø˘ive
();

512 i‡(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "-c")) {

513  
	`docomm™d
(
¨gv
[2]);

516 
	`îrx
(1, "Usage: sh [-c command]");

519 
	}
}

	@user/bin/sync/sync.c

30 
	~<uni°d.h
>

39 
	$maö
()

41 
	`sync
();

43 
	}
}

	@user/bin/true/true.c

30 
	~<uni°d.h
>

31 
	~<°dlib.h
>

38 
	$maö
()

41 
	`exô
(0);

42 
	}
}

	@user/include/assert.h

30 #i‚de‡
_ASSERT_H_


31 
	#_ASSERT_H_


	)

36 #unde‡
as£π


41 
__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
msg
);

47 #ifde‡
NDEBUG


50 
	#as£π
(
x
Ë(()(x)Ë

	)

52 
	#as£π
(
x
Ë(()0Ë

	)

56 
	#as£π
(
x
Ë((xË? ()0 : 
	`__bad_as£π
(
__FILE__
, 
__LINE__
, #x))

	)

	@user/include/err.h

30 #i‚de‡
_ERR_H_


31 
	#_ERR_H_


	)

33 
	~<kîn/ty≥s.h
>

47 
w¨n
(c⁄° *
fmt
, ...);

48 
w¨nx
(c⁄° *
fmt
, ...);

49 
îr
(
exôcode
, c⁄° *
fmt
, ...);

50 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

52 
vw¨n
(c⁄° *
fmt
, 
__va_li°
);

53 
vw¨nx
(c⁄° *
fmt
, 
__va_li°
);

54 
vîr
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

55 
vîrx
(
exôcode
, c⁄° *
fmt
, 
__va_li°
);

	@user/include/errno.h

30 #i‚de‡
_ERRNO_H_


31 
	#_ERRNO_H_


	)

34 
	~<kîn/î∫o.h
>

37 
î∫o
;

	@user/include/fcntl.h

31 
	~<uni°d.h
>

	@user/include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@user/include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

34 
	~<machöe/£tjmp.h
>

49 
£tjmp
(
jmp_buf
 
jb
);

50 
l⁄gjmp
(
jmp_buf
 
jb
, 
code
);

	@user/include/signal.h

30 
	~<kîn/sig«l.h
>

	@user/include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

33 
	~<kîn/ty≥s.h
>

41 
__va_li°
 
	tva_li°
;

43 
	#va_°¨t
(
≠
,
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p,fmt)

	)

44 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,t)

	)

45 
	#va_c›y
(
≠1
,
≠2
Ë
	`__buûtö_va_c›y
◊p1,≠2)

	)

46 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@user/include/stdint.h

30 #i‚de‡
_STDINT_H_


31 
	#_STDINT_H_


	)

37 
	~<kîn/ty≥s.h
>

39 
__i8
 
	töt8_t
;

40 
__i16
 
	töt16_t
;

41 
__i32
 
	töt32_t
;

42 
__i64
 
	töt64_t
;

43 
__u8
 
	tuöt8_t
;

44 
__u16
 
	tuöt16_t
;

45 
__u32
 
	tuöt32_t
;

46 
__u64
 
	tuöt64_t
;

48 
__öçå_t
 
	töçå_t
;

49 
__uöçå_t
 
	tuöçå_t
;

	@user/include/stdio.h

30 #i‚de‡
_STDIO_H_


31 
	#_STDIO_H_


	)

37 
	~<kîn/ty≥s.h
>

38 
	~<ty≥s/size_t.h
>

39 
	~<sys/nuŒ.h
>

42 
	#EOF
 (-1)

	)

48 
__v¥ötf
((*
£ndfunc
)(*
˛õ¡d©a
, c⁄° *, 
size_t
 
Àn
),

49 *
˛õ¡d©a
,

50 c⁄° *
fmt
,

51 
__va_li°
 
≠
);

54 
	`¥ötf
(c⁄° *
fmt
, ...);

55 
	`v¥ötf
(c⁄° *
fmt
, 
__va_li°
 
≠
);

56 
	`¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, ...);

57 
	`v¢¥ötf
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
__va_li°
 
≠
);

60 
	`puts
(const *);

64 
	`__puts
(const *);

67 
	`putch¨
();

70 
	`gëch¨
();

	@user/include/stdlib.h

30 #i‚de‡
_STDLIB_H_


31 
	#_STDLIB_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 
©oi
(const *);

45 
ab‹t
();

51 
exô
(
code
);

56 
sy°em
(c⁄° *
comm™d
);

61 
	#RAND_MAX
 0x7fffffff

	)

62 
øndom
();

63 
§™dom
(
£ed
);

64 *
öô°©e
(, *, 
size_t
);

65 *
£t°©e
(*);

70 *
mÆloc
(
size_t
 
size
);

71 
‰ì
(*
±r
);

	@user/include/string.h

30 #i‚de‡
_STRING_H_


31 
	#_STRING_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
	~<ty≥s/size_t.h
>

35 
	~<sys/nuŒ.h
>

40 *
°rˇt
(*, const *);

41 *
°r˝y
(*, const *);

42 *
°rchr
(const *, );

43 *
°ºchr
(const *, );

44 
°rcmp
(const *, const *);

45 
size_t
 
°æí
(const *);

46 *
°πok_r
(*, const *, **);

47 *
°πok
(*, const *);

49 *
mem£t
(*, 
c
, 
size_t
);

50 *
mem˝y
(*, c⁄° *, 
size_t
);

51 *
memmove
(*, c⁄° *, 
size_t
);

52 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

57 c⁄° *
°ªº‹
(
îrcode
);

62 
bzîo
(*, 
size_t
);

	@user/include/sys/endian.h

30 #i‚de‡
_SYS_ENDIAN_H_


31 
	#_SYS_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

	@user/include/sys/ioctl.h

31 
	~<uni°d.h
>

	@user/include/sys/null.h

30 #i‚de‡
_SYS_NULL_H_


31 
	#_SYS_NULL_H_


	)

37 
	#NULL
 ((*)0)

	)

	@user/include/sys/reboot.h

31 
	~<uni°d.h
>

	@user/include/sys/stat.h

30 #i‚de‡
_SYS_STAT_H_


31 
	#_SYS_STAT_H_


	)

36 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

42 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

43 
	#S_ISREG
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFREG
)

	)

44 
	#S_ISDIR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFDIR
)

	)

45 
	#S_ISLNK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFLNK
)

	)

46 
	#S_ISIFO
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFIFO
)

	)

47 
	#S_ISSOCK
(
mode
Ë((modê& 
_S_IFMT
Ë==
_S_IFSOCK
)

	)

48 
	#S_ISCHR
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFCHR
)

	)

49 
	#S_ISBLK
(
mode
Ë((modê& 
_S_IFMT
Ë=
_S_IFBLK
)

	)

55 
	#S_IFMT
 
_S_IFMT


	)

56 
	#S_IFREG
 
_S_IFREG


	)

57 
	#S_IFDIR
 
_S_IFDIR


	)

58 
	#S_IFLNK
 
_S_IFLNK


	)

59 
	#S_IFIFO
 
_S_IFIFO


	)

60 
	#S_IFSOCK
 
_S_IFSOCK


	)

61 
	#S_IFCHR
 
_S_IFCHR


	)

62 
	#S_IFBLK
 
_S_IFBLK


	)

71 
f°©
(
fûeh™dÀ
, 
°©
 *
buf
);

72 
°©
(c⁄° *
∑th
, °© *
buf
);

73 
l°©
(c⁄° *
∑th
, 
°©
 *
buf
);

80 
mkdú
(c⁄° *
dú«me
, 
ign‹e
);

	@user/include/sys/types.h

30 #i‚de‡
_SYS_TYPES_H_


31 
	#_SYS_TYPES_H_


	)

42 
	~<kîn/ty≥s.h
>

45 
	~<ty≥s/size_t.h
>

46 
	~<sys/nuŒ.h
>

55 
__ssize_t
 
	tssize_t
;

56 
__±rdiff_t
 
	t±rdiff_t
;

59 
__blk˙t_t
 
	tblk˙t_t
;

60 
__blksize_t
 
	tblksize_t
;

61 
__daddr_t
 
	tdaddr_t
;

62 
__dev_t
 
	tdev_t
;

63 
__fsid_t
 
	tfsid_t
;

64 
__gid_t
 
	tgid_t
;

65 
__ö_addr_t
 
	tö_addr_t
;

66 
__ö_p‹t_t
 
	tö_p‹t_t
;

67 
__öo_t
 
	töo_t
;

68 
__mode_t
 
	tmode_t
;

69 
__∆ök_t
 
	t∆ök_t
;

70 
__off_t
 
	toff_t
;

71 
__pid_t
 
	tpid_t
;

72 
__æim_t
 
	tæim_t
;

73 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

74 
__time_t
 
	ttime_t
;

75 
__uid_t
 
	tuid_t
;

77 
__nfds_t
 
	tnfds_t
;

78 
__sockÀn_t
 
	tsockÀn_t
;

84 
	#CHAR_BIT
 
__CHAR_BIT


	)

	@user/include/sys/wait.h

31 
	~<uni°d.h
>

	@user/include/time.h

31 
	~<uni°d.h
>

	@user/include/types/size_t.h

30 #i‚de‡
_TYPES_SIZE_T_H_


31 
	#_TYPES_SIZE_T_H_


	)

33 
	~<kîn/ty≥s.h
>

34 
__size_t
 
	tsize_t
;

	@user/include/unistd.h

30 #i‚de‡
_UNISTD_H_


31 
	#_UNISTD_H_


	)

33 
	~<sys/ty≥s.h
>

40 
	~<kîn/f˙é.h
>

41 
	~<kîn/io˘l.h
>

42 
	~<kîn/ªboŸ.h
>

43 
	~<kîn/£ek.h
>

44 
	~<kîn/time.h
>

45 
	~<kîn/uni°d.h
>

46 
	~<kîn/waô.h
>

110 #ifde‡
__GNUC__


112 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

114 
	#__DEAD


	)

118 
__DEAD
 
_exô
(
code
);

119 
execv
(c⁄° *
¥og
, *c⁄° *
¨gs
);

120 
pid_t
 
f‹k
();

121 
waôpid
(
pid_t
 
pid
, *
ªtu∫code
, 
Êags
);

127 
›í
(c⁄° *
fûíame
, 
Êags
, ...);

128 
ªad
(
fûeh™dÀ
, *
buf
, 
size_t
 
size
);

129 
wrôe
(
fûeh™dÀ
, c⁄° *
buf
, 
size_t
 
size
);

130 
˛o£
(
fûeh™dÀ
);

131 
ªboŸ
(
code
);

132 
sync
();

134 
rmdú
(c⁄° *
dú«me
);

137 
gëpid
();

138 
io˘l
(
fûeh™dÀ
, 
code
, *
buf
);

139 
off_t
 
l£ek
(
fûeh™dÀ
, off_à
pos
, 
code
);

140 
fsync
(
fûeh™dÀ
);

141 
·runˇã
(
fûeh™dÀ
, 
off_t
 
size
);

142 
ªmove
(c⁄° *
fûíame
);

143 
ª«me
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

144 
lök
(c⁄° *
ﬁdfûe
, c⁄° *
√wfûe
);

146 
chdú
(c⁄° *
∑th
);

149 *
sbrk
(
ch™ge
);

150 
gëdúíåy
(
fûeh™dÀ
, *
buf
, 
size_t
 
buÊí
);

151 
symlök
(c⁄° *
èrgë
, c⁄° *
lök«me
);

152 
ªadlök
(c⁄° *
∑th
, *
buf
, 
size_t
 
buÊí
);

153 
dup2
(
fûeh™dÀ
, 
√wh™dÀ
);

154 
pùe
(
fûeh™dÀs
[2]);

155 
time_t
 
__time
—ime_à*
£c⁄ds
, *
«no£c⁄ds
);

156 
__gëcwd
(*
buf
, 
size_t
 
buÊí
);

164 *
gëcwd
(*
buf
, 
size_t
 
buÊí
);

165 
time_t
 
time
—ime_à*
£c⁄ds
);

	@user/lib/hostcompat/err.c

34 
	~<uni°d.h
>

35 
	~<°dio.h
>

36 
	~<î∫o.h
>

37 
	~<°rög.h
>

39 
	~"ho°-îr.h
"

41 #ifde‡
NEED_ERR


46 c⁄° *
ho°com∑t_¥og«me
;

53 
	$ho°com∑t_¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

55 c⁄° *
îrmsg
;

62 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

71 i‡(
ho°com∑t_¥og«me
 !
NULL
) {

72 
	`Ârötf
(
°dîr
, "%s: ", 
ho°com∑t_¥og«me
);

75 
	`Ârötf
(
°dîr
, "libhostcompat: hostcompat_initÇot called\n");

76 
	`Ârötf
(
°dîr
, "libhostcompat-program: ");

80 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

82 i‡(
u£_î∫o
) {

84 
	`Ârötf
(
°dîr
, ": %s\n", 
îrmsg
);

88 
	`Ârötf
(
°dîr
, "\n");

90 
	}
}

98 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

100 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

101 
	}
}

105 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

107 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

108 
	}
}

112 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

114 
	`ho°com∑t_¥öãº
(1, 
fmt
, 
≠
);

115 
	`exô
(
exôcode
);

116 
	}
}

120 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

122 
	`ho°com∑t_¥öãº
(0, 
fmt
, 
≠
);

123 
	`exô
(
exôcode
);

124 
	}
}

132 
	$w¨n
(c⁄° *
fmt
, ...)

134 
va_li°
 
≠
;

135 
	`va_°¨t
(
≠
, 
fmt
);

136 
	`vw¨n
(
fmt
, 
≠
);

137 
	`va_íd
(
≠
);

138 
	}
}

141 
	$w¨nx
(c⁄° *
fmt
, ...)

143 
va_li°
 
≠
;

144 
	`va_°¨t
(
≠
, 
fmt
);

145 
	`vw¨nx
(
fmt
, 
≠
);

146 
	`va_íd
(
≠
);

147 
	}
}

150 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

152 
va_li°
 
≠
;

153 
	`va_°¨t
(
≠
, 
fmt
);

154 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

155 
	`va_íd
(
≠
);

156 
	}
}

159 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

161 
va_li°
 
≠
;

162 
	`va_°¨t
(
≠
, 
fmt
);

163 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

164 
	`va_íd
(
≠
);

165 
	}
}

	@user/lib/hostcompat/host-err.h

31 #i‚de‡
HOSTCOMPAT_ERR_H


32 
	#HOSTCOMPAT_ERR_H


	)

34 
	~<°d¨g.h
>

48 
w¨n
(c⁄° *
fmt
, ...);

49 
w¨nx
(c⁄° *
fmt
, ...);

50 
îr
(
exôcode
, c⁄° *
fmt
, ...);

51 
îrx
(
exôcode
, c⁄° *
fmt
, ...);

53 
vw¨n
(c⁄° *
fmt
, 
va_li°
);

54 
vw¨nx
(c⁄° *
fmt
, 
va_li°
);

55 
vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

56 
vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
);

	@user/lib/hostcompat/hostcompat.c

30 
	~<uni°d.h
>

31 
	~<ãrmios.h
>

32 
	~<sig«l.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

36 
	~"ho°com∑t.h
"

42 c⁄° *
	gho°com∑t_¥og«me
 = 
NULL
;

48 
ãrmios
 
	gho°com∑t_ru¡ios
;

49 
ãrmios
 
	gho°com∑t_ßvëios
;

56 
	$ho°com∑t_âyª£t
()

58 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ßvëios
);

59 
	}
}

66 
	$ho°com∑t_âyªsume
()

68 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
ho°com∑t_ru¡ios
);

69 
	}
}

76 
	$ho°com∑t_ây£tup
()

78 
ãrmios
 
tios
;

81 i‡(
	`tcgë©å
(
STDIN_FILENO
, &
tios
) < 0) {

86 
ho°com∑t_ßvëios
 = 
tios
;

89 
tios
.
c_lÊag
 &~
ICANON
;

95 
tios
.
c_cc
[
VMIN
] = 1;

98 
tios
.
c_cc
[
VTIME
] = 0;

101 
tios
.
c_lÊag
 &~(
ECHO
|
ECHONL
|
ECHOCTL
);

104 
tios
.
c_iÊag
 &~(
IXON
|
IXOFF
);

107 
tios
.
c_iÊag
 &~(
INLCR
|
IGNCR
|
ICRNL
);

110 #ifde‡
OCRNL


111 
tios
.
c_oÊag
 &~(
OCRNL
);

113 
tios
.
c_oÊag
 |
OPOST
|
ONLCR
;

116 
tios
.
c_lÊag
 |
ISIG
;

119 
ho°com∑t_ru¡ios
 = 
tios
;

120 
	`tc£èâr
(
STDIN_FILENO
, 
TCSADRAIN
, &
tios
);

123 
	}
}

130 
	$ho°com∑t_dõ
(
sig
)

133 
	`ho°com∑t_âyª£t
();

136 
	`sig«l
(
sig
, 
SIG_DFL
);

139 
	`kûl
(
	`gëpid
(), 
sig
);

142 
	`_exô
(255);

143 
	}
}

150 
	$ho°com∑t_°›
(
sig
)

153 
	`ho°com∑t_âyª£t
();

156 
	`sig«l
(
sig
, 
SIG_DFL
);

159 
	`kûl
(
	`gëpid
(), 
sig
);

160 
	}
}

167 
	$ho°com∑t_c⁄t
(
sig
)

169 ()
sig
;

172 
	`ho°com∑t_âyªsume
();

178 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

179 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

180 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

181 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

182 
	}
}

188 
	$ho°com∑t_öô
(
¨gc
, *
¨gv
[])

191 i‡(
¨gc
 > 0 && 
¨gv
[0] !
NULL
) {

192 
ho°com∑t_¥og«me
 = 
¨gv
[0];

196 i‡(
	`ho°com∑t_ây£tup
() < 0) {

201 
	`©exô
(
ho°com∑t_âyª£t
);

204 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

205 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 0);

208 
	`sig«l
(
SIGHUP
, 
ho°com∑t_dõ
);

209 
	`sig«l
(
SIGINT
, 
ho°com∑t_dõ
);

210 
	`sig«l
(
SIGQUIT
, 
ho°com∑t_dõ
);

211 
	`sig«l
(
SIGILL
, 
ho°com∑t_dõ
);

212 
	`sig«l
(
SIGTRAP
, 
ho°com∑t_dõ
);

213 
	`sig«l
(
SIGABRT
, 
ho°com∑t_dõ
);

214 #ifde‡
SIGEMT


215 
	`sig«l
(
SIGEMT
, 
ho°com∑t_dõ
);

217 
	`sig«l
(
SIGFPE
, 
ho°com∑t_dõ
);

218 
	`sig«l
(
SIGBUS
, 
ho°com∑t_dõ
);

219 
	`sig«l
(
SIGSEGV
, 
ho°com∑t_dõ
);

220 
	`sig«l
(
SIGSYS
, 
ho°com∑t_dõ
);

221 
	`sig«l
(
SIGPIPE
, 
ho°com∑t_dõ
);

222 
	`sig«l
(
SIGALRM
, 
ho°com∑t_dõ
);

223 
	`sig«l
(
SIGTERM
, 
ho°com∑t_dõ
);

224 
	`sig«l
(
SIGXCPU
, 
ho°com∑t_dõ
);

225 
	`sig«l
(
SIGXFSZ
, 
ho°com∑t_dõ
);

226 
	`sig«l
(
SIGVTALRM
, 
ho°com∑t_dõ
);

227 
	`sig«l
(
SIGPROF
, 
ho°com∑t_dõ
);

228 
	`sig«l
(
SIGUSR1
, 
ho°com∑t_dõ
);

229 
	`sig«l
(
SIGUSR2
, 
ho°com∑t_dõ
);

232 
	`sig«l
(
SIGTTIN
, 
ho°com∑t_°›
);

233 
	`sig«l
(
SIGTTOU
, 
ho°com∑t_°›
);

234 
	`sig«l
(
SIGTSTP
, 
ho°com∑t_°›
);

237 
	`sig«l
(
SIGCONT
, 
ho°com∑t_c⁄t
);

238 
	}
}

	@user/lib/hostcompat/hostcompat.h

31 
	~<sys/ty≥s.h
>

33 
ho°com∑t_öô
(
¨gc
, **
¨gv
);

35 
time_t
 
__time
—ime_à*
£cs
, *
n£cs
);

	@user/lib/hostcompat/time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/time.h
>

36 
	~<°rög.h
>

38 
	~"ho°com∑t.h
"

40 
time_t


41 
	$__time
(
time_t
 *
£cs
, *
n£cs
)

43 
timevÆ
 
tv
;

44 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

47 i‡(
£cs
) {

48 *
£cs
 = 
tv
.
tv_£c
;

50 i‡(
n£cs
) {

51 *
n£cs
 = 
tv
.
tv_u£c
 * 1000;

53  
tv
.
tv_£c
;

54 
	}
}

	@user/lib/libc/stdio/__puts.c

30 
	~<°dio.h
>

40 
	$__puts
(c⁄° *
°r
)

42 
cou¡
=0;

43 *
°r
) {

44 
	`putch¨
(*
°r
);

45 
°r
++;

46 
cou¡
++;

48  
cou¡
;

49 
	}
}

	@user/lib/libc/stdio/getchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

39 
	$gëch¨
()

41 
ch
;

42 
Àn
;

44 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

45 i‡(
Àn
<=0) {

47  
EOF
;

55  ()()
ch
;

56 
	}
}

	@user/lib/libc/stdio/printf.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

43 
	$__¥ötf_£nd
(*
myd©a
, c⁄° *
d©a
, 
size_t
 
Àn
)

45 
i
;

46 ()
myd©a
;

48 
i
=0; i<
Àn
; i++) {

49 
	`putch¨
(
d©a
[
i
]);

51 
	}
}

55 
	$¥ötf
(c⁄° *
fmt
, ...)

57 
ch¨s
;

58 
va_li°
 
≠
;

59 
	`va_°¨t
(
≠
, 
fmt
);

60 
ch¨s
 = 
	`v¥ötf
(
fmt
, 
≠
);

61 
	`va_íd
(
≠
);

62  
ch¨s
;

63 
	}
}

67 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

69  
	`__v¥ötf
(
__¥ötf_£nd
, 
NULL
, 
fmt
, 
≠
);

70 
	}
}

	@user/lib/libc/stdio/putchar.c

30 
	~<°dio.h
>

31 
	~<uni°d.h
>

41 
	$putch¨
(
ch
)

43 
c
 = 
ch
;

44 
Àn
;

45 
Àn
 = 
	`wrôe
(
STDOUT_FILENO
, &
c
, 1);

46 i‡(
Àn
<=0) {

47  
EOF
;

49  
ch
;

50 
	}
}

	@user/lib/libc/stdio/puts.c

30 
	~<°dio.h
>

37 
	$puts
(c⁄° *
s
)

39 
	`__puts
(
s
);

40 
	`putch¨
('\n');

42 
	}
}

	@user/lib/libc/stdlib/abort.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

42 
	$ab‹t
()

44 
	`_exô
(255);

45 
	}
}

	@user/lib/libc/stdlib/exit.c

30 
	~<°dlib.h
>

31 
	~<uni°d.h
>

38 
	$exô
(
code
)

45 
	`_exô
(
code
);

46 
	}
}

73 
__exô_hack
();

76 
	$__exô_hack
()

78 vﬁ©ûê
bœh
 = 1;

79 
bœh
) {}

80 
	}
}

	@user/lib/libc/stdlib/malloc.c

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~<îr.h
>

42 
	~<°döt.h
>

44 #unde‡
MALLOCDEBUG


46 #i‡
deföed
(
__mùs__
Ë|| deföed(
__i386__
)

47 
	#MALLOC32


	)

48 #ñi‡
deföed
(
__Æpha__
)

49 
	#MALLOC64


	)

70 
	smhódî
 {

72 #i‡
deföed
(
MALLOC32
)

73 
	#MBLOCKSIZE
 8

	)

74 
	#MBLOCKSHIFT
 3

	)

75 
	#MMAGIC
 2

	)

80 
	mmh_¥evblock
:29;

81 
	mmh_∑d
:1;

82 
	mmh_magic1
:2;

84 
	mmh_√xtblock
:29;

85 
	mmh_öu£
:1;

86 
	mmh_magic2
:2;

88 #ñi‡
deföed
(
MALLOC64
)

89 
	#MBLOCKSIZE
 16

	)

90 
	#MBLOCKSHIFT
 4

	)

91 
	#MMAGIC
 6

	)

96 
	mmh_¥evblock
:62;

97 
	mmh_∑d
:1;

98 
	mmh_magic1
:3;

100 
	mmh_√xtblock
:62;

101 
	mmh_öu£
:1;

102 
	mmh_magic2
:3;

124 
	#M_NEXTOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_√xtblock
))<<
MBLOCKSHIFT
))

	)

125 
	#M_PREVOFF
(
mh
Ë((
size_t
)(((size_t)((mh)->
mh_¥evblock
))<<
MBLOCKSHIFT
))

	)

126 
	#M_NEXT
(
mh
Ë((
mhódî
 *)(((*)(mh))+
	`M_NEXTOFF
(mh)))

	)

127 
	#M_PREV
(
mh
Ë((
mhódî
 *)(((*)(mh))-
	`M_PREVOFF
(mh)))

	)

129 
	#M_DATA
(
mh
Ë((*)((mh)+1))

	)

130 
	#M_SIZE
(
mh
Ë(
	`M_NEXTOFF
(mh)-
MBLOCKSIZE
)

	)

132 
	#M_OK
(
mh
Ë((mh)->
mh_magic1
==
MMAGIC
 && (mh)->
mh_magic2
==MMAGIC)

	)

134 
	#M_MKFIELD
(
off
Ë((off)>>
MBLOCKSHIFT
)

	)

141 
uöçå_t
 
	g__hópba£
, 
	g__hó±›
;

148 
	$__mÆloc_öô
()

150 *
x
;

155 i‡((
mhódî
Ë!
MBLOCKSIZE
) {

156 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZE wrong");

158 i‡((
MBLOCKSIZE
 & (MBLOCKSIZE-1))!=0) {

159 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSIZEÇotÖower of 2");

161 i‡(1<<
MBLOCKSHIFT
 !
MBLOCKSIZE
) {

162 
	`îrx
(1, "malloc: InternalÉrror - MBLOCKSHIFT wrong");

166 i‡(
__hópba£
!=0 || 
__hó±›
!=0) {

167 
	`îrx
(1, "malloc: InternalÉrror - bad init call");

171 
x
 = 
	`sbrk
(0);

172 i‡(
x
==(*)-1) {

173 
	`îr
(1, "malloc: initial sbrk failed");

175 i‡(
x
==(*) 0) {

176 
	`îrx
(1, "malloc: InternalÉrror - heap beganát 0");

178 
__hópba£
 = 
__hó±›
 = (
uöçå_t
)
x
;

187 i‡(
__hópba£
 % 
MBLOCKSIZE
 != 0) {

188 
size_t
 
adju°
 = 
MBLOCKSIZE
 - (
__hópba£
 % MBLOCKSIZE);

189 
x
 = 
	`sbrk
(
adju°
);

190 i‡(
x
==(*)-1) {

191 
	`îr
(1, "malloc: sbrk failedáligning heap base");

193 i‡((
uöçå_t
)
x
 !
__hópba£
) {

194 
	`îr
(1, "malloc: heap base moved during init");

196 #ifde‡
MALLOCDEBUG


197 
	`w¨nx
("malloc:ádjusted heap base upwards by %lu bytes",

198 (Ë
adju°
);

200 
__hópba£
 +
adju°
;

201 
__hó±›
 = 
__hópba£
;

203 
	}
}

207 #ifde‡
MALLOCDEBUG


214 
	$__mÆloc_dump
()

216 
mhódî
 *
mh
;

217 
uöçå_t
 
i
;

218 
size_t
 
righçªvblock
;

220 
	`w¨nx
("heap: ************************************************");

222 
righçªvblock
 = 0;

223 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

224 
mh
 = (
mhódî
 *Ë
i
;

225 i‡(!
	`M_OK
(
mh
)) {

226 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

228 (Ë
i
);

230 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

231 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

234 (Ë
i
,

235 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

236 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

238 
righçªvblock
 = 
mh
->
mh_√xtblock
;

240 
	`w¨nx
("heap: 0x%lx 0x%-6lx (next: 0x%lx) %s",

241 (Ë
i
 + 
MBLOCKSIZE
,

242 (Ë
	`M_SIZE
(
mh
),

243 (Ë(
i
+
	`M_NEXTOFF
(
mh
)),

244 
mh
->
mh_öu£
 ? "INUSE" : "FREE");

246 i‡(
i
!=
__hó±›
) {

247 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

250 
	`w¨nx
("heap: ************************************************");

251 
	}
}

263 
	$__mÆloc_sbrk
(
size_t
 
size
)

265 *
x
;

267 
x
 = 
	`sbrk
(
size
);

268 i‡(
x
 == (*)-1) {

269  
NULL
;

272 i‡((
uöçå_t
)
x
 !
__hó±›
) {

273 
	`îrx
(1, "malloc: InternalÉrror - "

275 (Ë
__hó±›
,

276 (Ë(
uöçå_t
Ë
x
);

278 
__hó±›
 +
size
;

279  
x
;

280 
	}
}

292 
	$__mÆloc_•lô
(
mhódî
 *
mh
, 
size_t
 
size
)

294 
mhódî
 *
mh√xt
, *
mh√w
;

295 
size_t
 
ﬁdsize
;

297 i‡(
size
 % 
MBLOCKSIZE
 != 0) {

298 
	`îrx
(1, "malloc: InternalÉrror (size %luÖassedÅo split)",

299 (Ë
size
);

302 i‡(
	`M_SIZE
(
mh
Ë- 
size
 < 2*
MBLOCKSIZE
) {

307 
mh√xt
 = 
	`M_NEXT
(
mh
);

309 
ﬁdsize
 = 
	`M_SIZE
(
mh
);

310 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

312 
mh√w
 = 
	`M_NEXT
(
mh
);

313 i‡(
mh√w
==
mh√xt
) {

314 
	`îrx
(1, "malloc: InternalÉrror (split screwed up?)");

317 
mh√w
->
mh_¥evblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

318 
mh√w
->
mh_∑d
 = 0;

319 
mh√w
->
mh_magic1
 = 
MMAGIC
;

320 
mh√w
->
mh_√xtblock
 = 
	`M_MKFIELD
(
ﬁdsize
 - 
size
);

321 
mh√w
->
mh_öu£
 = 0;

322 
mh√w
->
mh_magic2
 = 
MMAGIC
;

324 i‡(
mh√xt
 !(
mhódî
 *Ë
__hó±›
) {

325 
mh√xt
->
mh_¥evblock
 = 
mh√w
->
mh_√xtblock
;

327 
	}
}

333 
	$mÆloc
(
size_t
 
size
)

335 
mhódî
 *
mh
;

336 
uöçå_t
 
i
;

337 
size_t
 
righçªvblock
;

339 i‡(
__hópba£
==0) {

340 
	`__mÆloc_öô
();

342 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

343 
	`w¨nx
("malloc: InternalÉrror -Üocal data corrupt");

344 
	`îrx
(1, "malloc: heapbase 0x%lx; heaptop 0x%lx",

345 (Ë
__hópba£
, (Ë
__hó±›
);

348 #ifde‡
MALLOCDEBUG


349 
	`w¨nx
("malloc:áboutÅoállocate %lu (0x%lx) bytes",

350 (Ë
size
, () size);

351 
	`__mÆloc_dump
();

355 
size
 = ((sizê+ 
MBLOCKSIZE
 - 1Ë& ~(
size_t
)(MBLOCKSIZE-1));

361 
righçªvblock
 = 0;

362 
i
=
__hópba£
; i<
__hó±›
; i +
	`M_NEXTOFF
(
mh
)) {

363 
mh
 = (
mhódî
 *Ë
i
;

364 i‡(!
	`M_OK
(
mh
)) {

365 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

367 (Ë
i
);

369 i‡(
mh
->
mh_¥evblock
 !
righçªvblock
) {

370 
	`îrx
(1, "malloc: Heap corrupt; headerát 0x%lx"

373 (Ë
i
,

374 (Ë
mh
->
mh_¥evblock
 << 
MBLOCKSHIFT
,

375 (Ë
righçªvblock
 << 
MBLOCKSHIFT
);

377 
righçªvblock
 = 
mh
->
mh_√xtblock
;

380 i‡(
mh
->
mh_öu£
) {

385 i‡(
	`M_SIZE
(
mh
Ë< 
size
) {

390 
	`__mÆloc_•lô
(
mh
, 
size
);

395 
mh
->
mh_öu£
 = 1;

397 #ifde‡
MALLOCDEBUG


398 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

399 
	`__mÆloc_dump
();

401  
	`M_DATA
(
mh
);

403 i‡(
i
!=
__hó±›
) {

404 
	`îrx
(1, "malloc: Heap corrupt;Ñan offÉnd");

411 
mh
 = 
	`__mÆloc_sbrk
(
size
 + 
MBLOCKSIZE
);

412 i‡(
mh
 =
NULL
) {

413  
NULL
;

416 
mh
->
mh_¥evblock
 = 
righçªvblock
;

417 
mh
->
mh_magic1
 = 
MMAGIC
;

418 
mh
->
mh_magic2
 = 
MMAGIC
;

419 
mh
->
mh_∑d
 = 0;

420 
mh
->
mh_öu£
 = 1;

421 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
size
 + 
MBLOCKSIZE
);

423 #ifde‡
MALLOCDEBUG


424 
	`w¨nx
("mÆloc:áŒoˇtögáà%p", 
	`M_DATA
(
mh
));

425 
	`__mÆloc_dump
();

427  
	`M_DATA
(
mh
);

428 
	}
}

438 
	$__mÆloc_dódbìf
(*
±r
, 
size_t
 
size
)

440 
uöt32_t
 *
x
 = 
±r
;

441 
size_t
 
i
, 
n
 = 
size
/(
uöt32_t
);

442 
i
=0; i<
n
; i++) {

443 
x
[
i
] = 0xdeadbeef;

445 
	}
}

452 
	$__mÆloc_åymîge
(
mhódî
 *
mh
, mhódî *
mh√xt
)

454 
mhódî
 *
mh√xäext
;

456 i‡(
mh
->
mh_√xtblock
 !
mh√xt
->
mh_¥evblock
) {

457 
	`îrx
(1, "free: Heap corrupt (%pánd %p inconsistent)",

458 
mh
, 
mh√xt
);

460 i‡(
mh
->
mh_öu£
 || 
mh√xt
->mh_inuse) {

465 
mh√xäext
 = 
	`M_NEXT
(
mh√xt
);

467 
mh
->
mh_√xtblock
 = 
	`M_MKFIELD
(
MBLOCKSIZE
 + 
	`M_SIZE
(mh) +

468 
MBLOCKSIZE
 + 
	`M_SIZE
(
mh√xt
));

470 i‡(
mh√xäext
 !(
mhódî
 *)
__hó±›
) {

471 
mh√xäext
->
mh_¥evblock
 = 
mh
->
mh_√xtblock
;

475 
	`__mÆloc_dódbìf
(
mh√xt
, (
mhódî
));

476 
	}
}

482 
	$‰ì
(*
x
)

484 
mhódî
 *
mh
, *
mh√xt
, *
mh¥ev
;

486 i‡(
x
==
NULL
) {

492 i‡(
__hópba£
==0 || 
__hó±›
==0 || __heapbase > __heaptop) {

493 
	`w¨nx
("free: InternalÉrror -Üocal data corrupt");

494 
	`îrx
(1, "free: heapbase 0x%lx; heaptop 0x%lx",

495 (Ë
__hópba£
, (Ë
__hó±›
);

499 i‡((
uöçå_t
)
x
 < 
__hópba£
 || (uöçå_t)x >
__hó±›
) {

500 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (ouào‡ønge)", 
x
);

503 #ifde‡
MALLOCDEBUG


504 
	`w¨nx
("‰ì:ábouàtÿ‰ì %p", 
x
);

505 
	`__mÆloc_dump
();

508 
mh
 = ((
mhódî
 *)
x
)-1;

509 i‡(!
	`M_OK
(
mh
)) {

510 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (c‹ru± hódî)", 
x
);

513 i‡(!
mh
->
mh_öu£
) {

514 
	`îrx
(1, "‰ì: InvÆidÖoöã∏%∞‰ìd (Æªady fªe)", 
x
);

518 
mh
->
mh_öu£
 = 0;

521 
	`__mÆloc_dódbìf
(
	`M_DATA
(
mh
), 
	`M_SIZE
(mh));

524 
mh√xt
 = 
	`M_NEXT
(
mh
);

525 i‡(
mh√xt
 !(
mhódî
 *)
__hó±›
) {

526 
	`__mÆloc_åymîge
(
mh
, 
mh√xt
);

530 i‡(
mh
 !(
mhódî
 *)
__hópba£
) {

531 
mh¥ev
 = 
	`M_PREV
(
mh
);

532 
	`__mÆloc_åymîge
(
mh¥ev
, 
mh
);

535 #ifde‡
MALLOCDEBUG


536 
	`w¨nx
("‰ì: fªed %p", 
x
);

537 
	`__mÆloc_dump
();

539 
	}
}

	@user/lib/libc/stdlib/random.c

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

43 
	~<°dlib.h
>

49 
	#LOCKME
()

	)

50 
	#UNLOCKME
()

	)

52 
§™dom_u∆ocked
();

53 
øndom_u∆ocked
();

122 
	#TYPE_0
 0

	)

123 
	#BREAK_0
 8

	)

124 
	#DEG_0
 0

	)

125 
	#SEP_0
 0

	)

127 
	#TYPE_1
 1

	)

128 
	#BREAK_1
 32

	)

129 
	#DEG_1
 7

	)

130 
	#SEP_1
 3

	)

132 
	#TYPE_2
 2

	)

133 
	#BREAK_2
 64

	)

134 
	#DEG_2
 15

	)

135 
	#SEP_2
 1

	)

137 
	#TYPE_3
 3

	)

138 
	#BREAK_3
 128

	)

139 
	#DEG_3
 31

	)

140 
	#SEP_3
 3

	)

142 
	#TYPE_4
 4

	)

143 
	#BREAK_4
 256

	)

144 
	#DEG_4
 63

	)

145 
	#SEP_4
 1

	)

151 
	#MAX_TYPES
 5

	)

153 c⁄° 
	gdegªes
[
MAX_TYPES
] = { 
DEG_0
, 
DEG_1
, 
DEG_2
, 
DEG_3
, 
DEG_4
 };

154 c⁄° 
	g£ps
[
MAX_TYPES
] = { 
SEP_0
, 
SEP_1
, 
SEP_2
, 
SEP_3
, 
SEP_4
 };

170 
	gøndtbl
[
DEG_3
 + 1] = {

171 
TYPE_3
,

199 *
	gÂå
 = &
øndtbl
[
SEP_3
 + 1];

200 *
	gΩå
 = &
øndtbl
[1];

212 *
	g°©e
 = &
øndtbl
[1];

213 
	gønd_ty≥
 = 
TYPE_3
;

214 
	gønd_deg
 = 
DEG_3
;

215 
	gønd_£p
 = 
SEP_3
;

216 *
	gíd_±r
 = &
øndtbl
[
DEG_3
 + 1];

232 
	$§™dom_u∆ocked
(
x
)

234 
i
;

236 i‡(
ønd_ty≥
 =
TYPE_0
)

237 
°©e
[0] = 
x
;

239 
°©e
[0] = 
x
;

240 
i
 = 1; i < 
ønd_deg
; i++)

241 
°©e
[
i
] = 1103515245L * state[i - 1] + 12345L;

242 
Âå
 = &
°©e
[
ønd_£p
];

243 
Ωå
 = &
°©e
[0];

244 
i
 = 0; i < 10 * 
ønd_deg
; i++)

245 ()
	`øndom_u∆ocked
();

247 
	}
}

250 
	$§™dom
(
x
)

253 
	`LOCKME
();

254 
	`§™dom_u∆ocked
(
x
);

255 
	`UNLOCKME
();

256 
	}
}

282 
	$öô°©e
(

283 
£ed
,

284 *
¨g_°©e
,

285 
size_t
 
n
)

287 *
o°©e
 = (*)(&
°©e
[-1]);

288 *
l⁄g_¨g_°©e
;

290 
	`as£π
(
¨g_°©e
 !
NULL
);

292 
l⁄g_¨g_°©e
 = (*)(*)
¨g_°©e
;

294 
	`LOCKME
();

295 i‡(
ønd_ty≥
 =
TYPE_0
)

296 
°©e
[-1] = 
ønd_ty≥
;

298 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

299 i‡(
n
 < 
BREAK_0
) {

300 
	`UNLOCKME
();

301  (
NULL
);

302 } i‡(
n
 < 
BREAK_1
) {

303 
ønd_ty≥
 = 
TYPE_0
;

304 
ønd_deg
 = 
DEG_0
;

305 
ønd_£p
 = 
SEP_0
;

306 } i‡(
n
 < 
BREAK_2
) {

307 
ønd_ty≥
 = 
TYPE_1
;

308 
ønd_deg
 = 
DEG_1
;

309 
ønd_£p
 = 
SEP_1
;

310 } i‡(
n
 < 
BREAK_3
) {

311 
ønd_ty≥
 = 
TYPE_2
;

312 
ønd_deg
 = 
DEG_2
;

313 
ønd_£p
 = 
SEP_2
;

314 } i‡(
n
 < 
BREAK_4
) {

315 
ønd_ty≥
 = 
TYPE_3
;

316 
ønd_deg
 = 
DEG_3
;

317 
ønd_£p
 = 
SEP_3
;

319 
ønd_ty≥
 = 
TYPE_4
;

320 
ønd_deg
 = 
DEG_4
;

321 
ønd_£p
 = 
SEP_4
;

323 
°©e
 = (*Ë(
l⁄g_¨g_°©e
 + 1);

324 
íd_±r
 = &
°©e
[
ønd_deg
];

325 
	`§™dom_u∆ocked
(
£ed
);

326 i‡(
ønd_ty≥
 =
TYPE_0
)

327 
l⁄g_¨g_°©e
[0] = 
ønd_ty≥
;

329 
l⁄g_¨g_°©e
[0] = 
MAX_TYPES
 * (
Ωå
 - 
°©e
Ë+ 
ønd_ty≥
;

330 
	`UNLOCKME
();

331 ((*)
o°©e
);

332 
	}
}

354 
	$£t°©e
(*
¨g_°©e
)

356 *
√w_°©e
;

357 
ty≥
;

358 
ª¨
;

359 *
o°©e
 = (*)(&
°©e
[-1]);

361 
	`as£π
(
¨g_°©e
 !
NULL
);

363 
√w_°©e
 = (*)(*)
¨g_°©e
;

364 
ty≥
 = ()(
√w_°©e
[0] % 
MAX_TYPES
);

365 
ª¨
 = ()(
√w_°©e
[0] / 
MAX_TYPES
);

367 
	`LOCKME
();

368 i‡(
ønd_ty≥
 =
TYPE_0
)

369 
°©e
[-1] = 
ønd_ty≥
;

371 
°©e
[-1] = 
MAX_TYPES
 * (
Ωå
 - sèãË+ 
ønd_ty≥
;

372 
ty≥
) {

373 
TYPE_0
:

374 
TYPE_1
:

375 
TYPE_2
:

376 
TYPE_3
:

377 
TYPE_4
:

378 
ønd_ty≥
 = 
ty≥
;

379 
ønd_deg
 = 
degªes
[
ty≥
];

380 
ønd_£p
 = 
£ps
[
ty≥
];

383 
	`UNLOCKME
();

384  (
NULL
);

386 
°©e
 = (*Ë(
√w_°©e
 + 1);

387 i‡(
ønd_ty≥
 !
TYPE_0
) {

388 
Ωå
 = &
°©e
[
ª¨
];

389 
Âå
 = &
°©e
[(
ª¨
 + 
ønd_£p
Ë% 
ønd_deg
];

391 
íd_±r
 = &
°©e
[
ønd_deg
];

392 
	`UNLOCKME
();

393 ((*)
o°©e
);

394 
	}
}

415 
	$øndom_u∆ocked
()

417 
i
;

418 *
f
, *
r
;

420 i‡(
ønd_ty≥
 =
TYPE_0
) {

421 
i
 = 
°©e
[0];

422 
°©e
[0] = 
i
 = (i * 1103515245L + 12345L) & 0x7fffffff;

427 
f
 = 
Âå
; 
r
 = 
Ωå
;

428 *
f
 +*
r
;

430 
i
 = (()*
f
 >> 1) & 0x7fffffff;

431 i‡(++
f
 >
íd_±r
) {

432 
f
 = 
°©e
;

433 ++
r
;

435 i‡(++
r
 >
íd_±r
) {

436 
r
 = 
°©e
;

439 
Âå
 = 
f
; 
Ωå
 = 
r
;

441 (
i
);

442 
	}
}

445 
	$øndom
()

447 
r
;

449 
	`LOCKME
();

450 
r
 = 
	`øndom_u∆ocked
();

451 
	`UNLOCKME
();

452  (
r
);

453 
	}
}

	@user/lib/libc/stdlib/system.c

30 
	~<î∫o.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

33 
	~<°rög.h
>

41 
	#MAXCMDSIZE
 2048

	)

42 
	#MAXARGS
 128

	)

45 
	$sy°em
(c⁄° *
cmd
)

53 
tmp
[
MAXCMDSIZE
];

54 *
¨gv
[
MAXARGS
+1];

55 
«rgs
=0;

56 *
s
;

57 
pid
, 
°©us
;

59 i‡(
	`°æí
(
cmd
Ë>(
tmp
)) {

60 
î∫o
 = 
E2BIG
;

63 
	`°r˝y
(
tmp
, 
cmd
);

65 
s
 = 
	`°πok
(
tmp
, " \t"); s; s = såtok(
NULL
, " \t")) {

66 i‡(
«rgs
 < 
MAXARGS
) {

67 
¨gv
[
«rgs
++] = 
s
;

70 
î∫o
 = 
E2BIG
;

75 
¨gv
[
«rgs
] = 
NULL
;

77 
pid
 = 
	`f‹k
();

78 
pid
) {

83 
	`execv
(
¨gv
[0],árgv);

85 
	`_exô
(255);

88 
	`waôpid
(
pid
, &
°©us
, 0);

89  
°©us
;

91 
	}
}

	@user/lib/libc/string/memcmp.c

30 
	~<°rög.h
>

38 
	$memcmp
(c⁄° *
av
, c⁄° *
bv
, 
size_t
 
Àn
)

40 c⁄° *
a
 = 
av
;

41 c⁄° *
b
 = 
bv
;

42 
size_t
 
i
;

44 
i
=0; i<
Àn
; i++) {

45 i‡(
a
[
i
] !
b
[i]) {

46  ()(
a
[
i
] - 
b
[i]);

50 
	}
}

	@user/lib/libc/string/memset.c

30 
	~<°rög.h
>

37 
	$mem£t
(*
±r
, 
ch
, 
size_t
 
Àn
)

39 *
p
 = 
±r
;

40 
size_t
 
i
;

42 
i
=0; i<
Àn
; i++) {

43 
p
[
i
] = 
ch
;

46  
±r
;

47 
	}
}

	@user/lib/libc/string/strerror.c

30 
	~<°rög.h
>

31 
	~<kîn/îrmsg.h
>

37 
	$°ªº‹
(
îrcode
)

39 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

40  
sys_îæi°
[
îrcode
];

43 
	}
}

	@user/lib/libc/string/strtok.c

30 
	~<°rög.h
>

32 *
	g__°πok_c⁄ãxt
;

35 
	$°πok
(*
°r
, c⁄° *
£ps
)

37  
	`°πok_r
(
°r
, 
£ps
, &
__°πok_c⁄ãxt
);

38 
	}
}

	@user/lib/libc/time/time.c

30 
	~<uni°d.h
>

38 
time_t


39 
	$time
(
time_t
 *
t
)

41  
	`__time
(
t
, 
NULL
);

42 
	}
}

	@user/lib/libc/unix/__assert.c

30 
	~<as£π.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<°rög.h
>

42 
	$__bad_as£π
(c⁄° *
fûe
, 
löe
, c⁄° *
ex¥
)

44 
buf
[256];

45 
	`¢¥ötf
(
buf
, (buf), "Assertion failed: %s (%sÜine %d)\n",

46 
ex¥
, 
fûe
, 
löe
);

48 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

49 
	`ab‹t
();

50 
	}
}

	@user/lib/libc/unix/err.c

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<îr.h
>

36 
	~<î∫o.h
>

45 **
__¨gv
;

52 
	$__£ndîr
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

54 ()
junk
;

56 
	`wrôe
(
STDERR_FILENO
, 
d©a
, 
Àn
);

57 
	}
}

65 
	$__£ndîr°r
(c⁄° *
°r
)

67 
	`__£ndîr
(
NULL
, 
°r
, 
	`°æí
(str));

68 
	}
}

75 
	$__¥öãº
(
u£_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

77 c⁄° *
îrmsg
;

78 c⁄° *
¥og
;

85 
îrmsg
 = 
	`°ªº‹
(
î∫o
);

94 i‡(
__¨gv
!=
NULL
 && __argv[0]!=NULL) {

95 
¥og
 = 
__¨gv
[0];

98 
¥og
 = "(programÇame unknown)";

102 
	`__£ndîr°r
(
¥og
);

103 
	`__£ndîr°r
(": ");

106 
	`__v¥ötf
(
__£ndîr
, 
NULL
, 
fmt
, 
≠
);

109 i‡(
u£_î∫o
) {

110 
	`__£ndîr°r
(": ");

111 
	`__£ndîr°r
(
îrmsg
);

115 
	`__£ndîr°r
("\n");

116 
	}
}

124 
	$vw¨n
(c⁄° *
fmt
, 
va_li°
 
≠
)

126 
	`__¥öãº
(1, 
fmt
, 
≠
);

127 
	}
}

131 
	$vw¨nx
(c⁄° *
fmt
, 
va_li°
 
≠
)

133 
	`__¥öãº
(0, 
fmt
, 
≠
);

134 
	}
}

138 
	$vîr
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

140 
	`__¥öãº
(1, 
fmt
, 
≠
);

141 
	`exô
(
exôcode
);

142 
	}
}

146 
	$vîrx
(
exôcode
, c⁄° *
fmt
, 
va_li°
 
≠
)

148 
	`__¥öãº
(0, 
fmt
, 
≠
);

149 
	`exô
(
exôcode
);

150 
	}
}

158 
	$w¨n
(c⁄° *
fmt
, ...)

160 
va_li°
 
≠
;

161 
	`va_°¨t
(
≠
, 
fmt
);

162 
	`vw¨n
(
fmt
, 
≠
);

163 
	`va_íd
(
≠
);

164 
	}
}

167 
	$w¨nx
(c⁄° *
fmt
, ...)

169 
va_li°
 
≠
;

170 
	`va_°¨t
(
≠
, 
fmt
);

171 
	`vw¨nx
(
fmt
, 
≠
);

172 
	`va_íd
(
≠
);

173 
	}
}

176 
	$îr
(
exôcode
, c⁄° *
fmt
, ...)

178 
va_li°
 
≠
;

179 
	`va_°¨t
(
≠
, 
fmt
);

180 
	`vîr
(
exôcode
, 
fmt
, 
≠
);

181 
	`va_íd
(
≠
);

182 
	}
}

185 
	$îrx
(
exôcode
, c⁄° *
fmt
, ...)

187 
va_li°
 
≠
;

188 
	`va_°¨t
(
≠
, 
fmt
);

189 
	`vîrx
(
exôcode
, 
fmt
, 
≠
);

190 
	`va_íd
(
≠
);

191 
	}
}

	@user/lib/libc/unix/errno.c

30 
	~<î∫o.h
>

41 **
	g__¨gv
;

43 
	gî∫o
;

	@user/lib/libc/unix/getcwd.c

30 
	~<uni°d.h
>

31 
	~<î∫o.h
>

40 
	$gëcwd
(*
buf
, 
size_t
 
buÊí
)

42 
r
;

44 i‡(
buÊí
 < 1) {

45 
î∫o
 = 
EINVAL
;

46  
NULL
;

49 
r
 = 
	`__gëcwd
(
buf
, 
buÊí
-1);

50 i‡(
r
 < 0) {

51  
NULL
;

54 
buf
[
r
] = 0;

55  
buf
;

56 
	}
}

	@user/my-testbin/example/example.c

4 
	~<uni°d.h
>

7 
	$maö
()

9 
	`ªboŸ
(
RB_POWEROFF
);

11 
	}
}

	@user/sbin/dumpsfs/dumpsfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<°dio.h
>

34 
	~<as£π.h
>

35 
	~<limôs.h
>

36 
	~<îr.h
>

38 
	~"suµ‹t.h
"

39 
	~"kîn/sfs.h
"

42 #ifde‡
HOST


44 
	~<√töë/ö.h
>

45 
	~<¨∑/öë.h
>

46 
	~"ho°com∑t.h
"

47 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

48 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

52 
	#SWAPL
(
x
Ë(x)

	)

53 
	#SWAPS
(
x
Ë(x)

	)

57 
	~"disk.h
"

60 
uöt32_t


61 
	$dumpsb
()

63 
sfs_su≥r
 
•
;

64 
	`diskªad
(&
•
, 
SFS_SB_LOCATION
);

65 i‡(
	`SWAPL
(
•
.
•_magic
Ë!
SFS_MAGIC
) {

66 
	`îrx
(1, "Notán sfs filesystem");

68 
•
.
•_vﬁ«me
[(sp.sp_volname)-1] = 0;

69 
	`¥ötf
("Vﬁumê«me: %-40† %u blocks\n", 
•
.
•_vﬁ«me
,

70 
	`SWAPL
(
•
.
•_nblocks
));

72  
	`SWAPL
(
•
.
•_nblocks
);

73 
	}
}

77 
	$dodúblock
(
uöt32_t
 
block
)

79 
sfs_dú
 
sds
[
SFS_BLOCKSIZE
/(sfs_dir)];

80 
nsds
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

81 
i
;

83 
	`diskªad
(&
sds
, 
block
);

85 
	`¥ötf
(" [block %u]\n", 
block
);

86 
i
=0; i<
nsds
; i++) {

87 
uöt32_t
 
öo
 = 
	`SWAPL
(
sds
[
i
].
sfd_öo
);

88 i‡(
öo
==
SFS_NOINO
) {

89 
	`¥ötf
(" [freeÉntry]\n");

92 
sds
[
i
].
sfd_«me
[
SFS_NAMELEN
-1] = 0;

93 
	`¥ötf
(" %u %s\n", 
öo
, 
sds
[
i
].
sfd_«me
);

96 
	}
}

100 
	$dumpdú
(
uöt32_t
 
öo
)

102 
sfs_öode
 
sfi
;

103 
uöt32_t
 
ib
[
SFS_DBPERIDB
];

104 
√¡rõs
, 
i
;

105 
uöt32_t
 
block
, 
nblocks
=0;

107 
	`diskªad
(&
sfi
, 
öo
);

109 
√¡rõs
 = 
	`SWAPL
(
sfi
.
sfi_size
Ë/ (
sfs_dú
);

110 i‡(
	`SWAPL
(
sfi
.
sfi_size
Ë% (
sfs_dú
) != 0) {

111 
	`w¨nx
("Warning: dir size isÇotá multiple of dirÉntry size");

113 
	`¥ötf
("Dúe˘‹y %u: %dÉ¡rõs\n", 
öo
, 
√¡rõs
);

115 
i
=0; i<
SFS_NDIRECT
; i++) {

116 
block
 = 
	`SWAPL
(
sfi
.
sfi_dúe˘
[
i
]);

117 i‡(
block
) {

118 
	`dodúblock
(
block
);

119 
nblocks
++;

122 i‡(
	`SWAPL
(
sfi
.
sfi_ödúe˘
)) {

123 
	`diskªad
(&
ib
, 
	`SWAPL
(
sfi
.
sfi_ödúe˘
));

124 
i
=0; i<
SFS_DBPERIDB
; i++) {

125 
block
 = 
	`SWAPL
(
ib
[
i
]);

126 i‡(
block
) {

127 
	`dodúblock
(
block
);

128 
nblocks
++;

132 
	`¥ötf
(" %u block†ö dúe˘‹y\n", 
nblocks
);

133 
	}
}

137 
	$dumpbôs
(
uöt32_t
 
fsblocks
)

139 
uöt32_t
 
nblocks
 = 
	`SFS_BITBLOCKS
(
fsblocks
);

140 
uöt32_t
 
i
, 
j
;

141 
d©a
[
SFS_BLOCKSIZE
];

143 
	`¥ötf
("Fªem≠: %u block†(%u %u %u)\n", 
nblocks
, 
	`SFS_BITMAPSIZE
(
fsblocks
), fsblocks, 
SFS_BLOCKBITS
);

145 
i
=0; i<
nblocks
; i++) {

146 
	`diskªad
(
d©a
, 
SFS_MAP_LOCATION
+
i
);

147 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

148 
	`¥ötf
("%02x", ()
d©a
[
j
]);

149 i‡(
j
%32==31) {

150 
	`¥ötf
("\n");

154 
	`¥ötf
("\n");

155 
	}
}

158 
	$maö
(
¨gc
, **
¨gv
)

160 
uöt32_t
 
nblocks
;

162 #ifde‡
HOST


163 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

166 i‡(
¨gc
!=2) {

167 
	`îrx
(1, "Usage: dumpsfs device/diskfile");

170 
	`›ídisk
(
¨gv
[1]);

171 
nblocks
 = 
	`dumpsb
();

172 
	`dumpbôs
(
nblocks
);

173 
	`dumpdú
(
SFS_ROOT_LOCATION
);

175 
	`˛o£disk
();

178 
	}
}

	@user/sbin/halt/halt.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_HALT
);

44 
	}
}

	@user/sbin/mksfs/disk.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<uni°d.h
>

33 
	~<as£π.h
>

34 
	~<°döt.h
>

35 
	~<°rög.h
>

36 
	~<î∫o.h
>

37 
	~<f˙é.h
>

38 
	~<îr.h
>

40 
	~"suµ‹t.h
"

41 
	~"disk.h
"

43 
	#HOSTSTRING
 "Sy°em/161 Disk Image"

	)

44 
	#BLOCKSIZE
 512

	)

46 #i‚de‡
EINTR


47 
	#EINTR
 0

	)

50 
	gfd
=-1;

51 
uöt32_t
 
	gnblocks
;

54 
	$›ídisk
(c⁄° *
∑th
)

56 
°©
 
°©buf
;

58 
	`as£π
(
fd
<0);

59 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
);

60 i‡(
fd
<0) {

61 
	`îr
(1, "%s", 
∑th
);

63 i‡(
	`f°©
(
fd
, &
°©buf
)) {

64 
	`îr
(1, "%s: f°©", 
∑th
);

67 
nblocks
 = 
°©buf
.
°_size
 / 
BLOCKSIZE
;

69 #ifde‡
HOST


70 
nblocks
--;

73 
buf
[64];

74 
Àn
;

77 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf)-1);

78 i‡(
Àn
 < 0 && (
î∫o
==
EINTR
 ||Éºno==
EAGAIN
)) {

83 
buf
[
Àn
] = 0;

84 
buf
[
	`°æí
(
HOSTSTRING
)] = 0;

86 i‡(
	`°rcmp
(
buf
, 
HOSTSTRING
)) {

87 
	`îrx
(1, "%s: NŸá Sy°em/161 disk image", 
∑th
);

91 
	}
}

93 
uöt32_t


94 
	$diskblocksize
()

96 
	`as£π
(
fd
>=0);

97  
BLOCKSIZE
;

98 
	}
}

100 
uöt32_t


101 
	$diskblocks
()

103 
	`as£π
(
fd
>=0);

104  
nblocks
;

105 
	}
}

108 
	$diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
)

110 c⁄° *
cd©a
 = 
d©a
;

111 
uöt32_t
 
tŸ
=0;

112 
Àn
;

114 
	`as£π
(
fd
>=0);

116 #ifde‡
HOST


118 
block
++;

121 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

122 
	`îr
(1, "lseek");

125 
tŸ
 < 
BLOCKSIZE
) {

126 
Àn
 = 
	`wrôe
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

127 i‡(
Àn
 < 0) {

128 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

131 
	`îr
(1, "write");

133 i‡(
Àn
==0) {

134 
	`îr
(1, "writeÑeturned 0?");

136 
tŸ
 +
Àn
;

138 
	}
}

141 
	$diskªad
(*
d©a
, 
uöt32_t
 
block
)

143 *
cd©a
 = 
d©a
;

144 
uöt32_t
 
tŸ
=0;

145 
Àn
;

147 
	`as£π
(
fd
>=0);

149 #ifde‡
HOST


151 
block
++;

154 i‡(
	`l£ek
(
fd
, 
block
*
BLOCKSIZE
, 
SEEK_SET
)<0) {

155 
	`îr
(1, "lseek");

158 
tŸ
 < 
BLOCKSIZE
) {

159 
Àn
 = 
	`ªad
(
fd
, 
cd©a
 + 
tŸ
, 
BLOCKSIZE
 -Åot);

160 i‡(
Àn
 < 0) {

161 i‡(
î∫o
==
EINTR
 ||Éºno==
EAGAIN
) {

164 
	`îr
(1, "read");

166 i‡(
Àn
==0) {

167 
	`îr
(1, "unexpected EOF in mid-sector");

169 
tŸ
 +
Àn
;

171 
	}
}

174 
	$˛o£disk
()

176 
	`as£π
(
fd
>=0);

177 i‡(
	`˛o£
(
fd
)) {

178 
	`îr
(1, "close");

180 
fd
 = -1;

181 
	}
}

	@user/sbin/mksfs/disk.h

30 
›ídisk
(c⁄° *
∑th
);

32 
uöt32_t
 
diskblocksize
();

33 
uöt32_t
 
diskblocks
();

35 
diskwrôe
(c⁄° *
d©a
, 
uöt32_t
 
block
);

36 
diskªad
(*
d©a
, 
uöt32_t
 
block
);

38 
˛o£disk
();

	@user/sbin/mksfs/mksfs.c

30 
	~<sys/ty≥s.h
>

31 
	~<°döt.h
>

32 
	~<°rög.h
>

33 
	~<as£π.h
>

34 
	~<limôs.h
>

35 
	~<îr.h
>

37 
	~"suµ‹t.h
"

38 
	~"kîn/sfs.h
"

41 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

47 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

51 
	#SWAPL
(
x
Ë(x)

	)

52 
	#SWAPS
(
x
Ë(x)

	)

56 
	~"disk.h
"

58 
	#MAXBITBLOCKS
 32

	)

62 
	$check
()

64 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

65 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

66 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

67 
	}
}

71 
	$wrôesu≥r
(c⁄° *
vﬁ«me
, 
uöt32_t
 
nblocks
)

73 
sfs_su≥r
 
•
;

75 
	`bzîo
((*)&
•
, (sp));

77 i‡(
	`°æí
(
vﬁ«me
Ë>
SFS_VOLNAME_SIZE
) {

78 
	`îrx
(1, "Vﬁumê«mê%†toÿl⁄g", 
vﬁ«me
);

81 
•
.
•_magic
 = 
	`SWAPL
(
SFS_MAGIC
);

82 
•
.
•_nblocks
 = 
	`SWAPL
(
nblocks
);

83 
	`°r˝y
(
•
.
•_vﬁ«me
, 
vﬁ«me
);

85 
	`diskwrôe
(&
•
, 
SFS_SB_LOCATION
);

86 
	}
}

90 
	$wrôîoŸdú
()

92 
sfs_öode
 
sfi
;

94 
	`bzîo
((*)&
sfi
, (sfi));

96 
sfi
.
sfi_size
 = 
	`SWAPL
(0);

97 
sfi
.
sfi_ty≥
 = 
	`SWAPS
(
SFS_TYPE_DIR
);

98 
sfi
.
sfi_lökcou¡
 = 
	`SWAPS
(1);

100 
	`diskwrôe
(&
sfi
, 
SFS_ROOT_LOCATION
);

101 
	}
}

103 
	gbôbuf
[
MAXBITBLOCKS
*
SFS_BLOCKSIZE
];

107 
	$dﬂŒocbô
(
uöt32_t
 
bô
)

109 
uöt32_t
 
byã
 = 
bô
/
CHAR_BIT
;

110 
mask
 = (1<<(
bô
 % 
CHAR_BIT
));

112 
	`as£π
((
bôbuf
[
byã
] & 
mask
) == 0);

113 
bôbuf
[
byã
] |
mask
;

114 
	}
}

118 
	$wrôebôm≠
(
uöt32_t
 
fsblocks
)

121 
uöt32_t
 
nbôs
 = 
	`SFS_BITMAPSIZE
(
fsblocks
);

122 
uöt32_t
 
nblocks
 = 
	`SFS_BITBLOCKS
(
fsblocks
);

123 *
±r
;

124 
uöt32_t
 
i
;

126 i‡(
nblocks
 > 
MAXBITBLOCKS
) {

127 
	`îrx
(1, "FilesystemÅooÜarge "

131 
	`dﬂŒocbô
(
SFS_SB_LOCATION
);

132 
	`dﬂŒocbô
(
SFS_ROOT_LOCATION
);

133 
i
=0; i<
nblocks
; i++) {

134 
	`dﬂŒocbô
(
SFS_MAP_LOCATION
+
i
);

136 
i
=
fsblocks
; i<
nbôs
; i++) {

137 
	`dﬂŒocbô
(
i
);

140 
i
=0; i<
nblocks
; i++) {

141 
±r
 = 
bôbuf
 + 
i
*
SFS_BLOCKSIZE
;

142 
	`diskwrôe
(
±r
, 
SFS_MAP_LOCATION
+
i
);

144 
	}
}

147 
	$maö
(
¨gc
, **
¨gv
)

149 
uöt32_t
 
size
, 
blocksize
;

150 *
vﬁ«me
, *
s
;

152 #ifde‡
HOST


153 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

156 i‡(
¨gc
!=3) {

157 
	`îrx
(1, "Usage: mksfs device/diskfile volume-name");

160 
	`check
();

162 
vﬁ«me
 = 
¨gv
[2];

165 
s
 = 
	`°rchr
(
vﬁ«me
, ':');

166 i‡(
s
 !
NULL
) {

167 i‡(
	`°æí
(
s
)!=1) {

168 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

170 *
s
 = 0;

174 
s
 = 
	`°rchr
(
vﬁ«me
, '/');

175 i‡(
s
 !
NULL
) {

176 
	`îrx
(1, "IŒegÆ vﬁumê«mê%s", 
vﬁ«me
);

179 
	`›ídisk
(
¨gv
[1]);

180 
blocksize
 = 
	`diskblocksize
();

182 i‡(
blocksize
!=
SFS_BLOCKSIZE
) {

183 
	`îrx
(1, "Device has wrong blocksize %u (should be %u)\n",

184 
blocksize
, 
SFS_BLOCKSIZE
);

186 
size
 = 
	`diskblocks
();

188 
	`wrôesu≥r
(
vﬁ«me
, 
size
);

189 
	`wrôîoŸdú
();

190 
	`wrôebôm≠
(
size
);

192 
	`˛o£disk
();

195 
	}
}

	@user/sbin/mksfs/support.c

	@user/sbin/mksfs/support.h

31 #ifde‡
__osf__


33 
	#HAS_NO_SIZED_TYPES


	)

36 #i‡
deföed
(
__sun__
Ë&& deföed(
__svr4__
)

38 
	#HAS_NO_SIZED_TYPES


	)

46 #ifde‡
HAS_NO_SIZED_TYPES


48 #i‡
deföed
(
__Æpha__
Ë|| deföed(
__Æpha
)

50 
	tuöt32_t
;

51 
	tuöt16_t
;

52 
	tuöt8_t
;

54 #ñi‡
deföed
(
__•¨c__
)

56 
	tuöt32_t
;

57 
	tuöt16_t
;

58 
	tuöt8_t
;

	@user/sbin/poweroff/poweroff.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_POWEROFF
);

44 
	}
}

	@user/sbin/reboot/reboot.c

30 
	~<uni°d.h
>

40 
	$maö
()

42 
	`ªboŸ
(
RB_REBOOT
);

44 
	}
}

	@user/sbin/sfsck/sfsck.c

30 
	~<sys/ty≥s.h
>

31 
	~<as£π.h
>

32 
	~<limôs.h
>

33 
	~<°döt.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<îr.h
>

39 
	~"suµ‹t.h
"

40 
	~"kîn/sfs.h
"

42 #ifde‡
HOST


43 
	~<√töë/ö.h
>

44 
	~<¨∑/öë.h
>

45 
	~"ho°com∑t.h
"

46 
	#SWAPL
(
x
Ë
	`¡ohl
(x)

	)

47 
	#SWAPS
(
x
Ë
	`¡ohs
(x)

	)

51 
	#SWAPL
(
x
Ë(x)

	)

52 
	#SWAPS
(
x
Ë(x)

	)

53 
	#NO_REALLOC


	)

54 
	#NO_QSORT


	)

58 
	~"disk.h
"

61 
	#EXIT_USAGE
 4

	)

62 
	#EXIT_FATAL
 3

	)

63 
	#EXIT_UNRECOV
 2

	)

64 
	#EXIT_RECOV
 1

	)

65 
	#EXIT_CLEAN
 0

	)

67 
	gbad√ss
=0;

71 
	$£tbad√ss
(
code
)

73 i‡(
bad√ss
 < 
code
) {

74 
bad√ss
 = 
code
;

76 
	}
}

82 
	$sw≠sb
(
sfs_su≥r
 *
•
)

84 
•
->
•_magic
 = 
	`SWAPL
(sp->sp_magic);

85 
•
->
•_nblocks
 = 
	`SWAPL
(sp->sp_nblocks);

86 
	}
}

90 
	$sw≠öode
(
sfs_öode
 *
sfi
)

92 
i
;

94 
sfi
->
sfi_size
 = 
	`SWAPL
(sfi->sfi_size);

95 
sfi
->
sfi_ty≥
 = 
	`SWAPS
(sfi->sfi_type);

96 
sfi
->
sfi_lökcou¡
 = 
	`SWAPS
(sfi->sfi_linkcount);

98 
i
=0; i<
SFS_NDIRECT
; i++) {

99 
sfi
->
sfi_dúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_direct[i]);

102 #ifde‡
SFS_NIDIRECT


103 
i
=0; i<
SFS_NIDIRECT
; i++) {

104 
sfi
->
sfi_ödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_indirect[i]);

107 
sfi
->
sfi_ödúe˘
 = 
	`SWAPL
(sfi->sfi_indirect);

110 #ifde‡
SFS_NDIDIRECT


111 
i
=0; i<
SFS_NDIDIRECT
; i++) {

112 
sfi
->
sfi_dödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_dindirect[i]);

115 #ifde‡
HAS_DIDIRECT


116 
sfi
->
sfi_dödúe˘
 = 
	`SWAPL
(sfi->sfi_dindirect);

120 #ifde‡
SFS_NTIDIRECT


121 
i
=0; i<
SFS_NTIDIRECT
; i++) {

122 
sfi
->
sfi_tödúe˘
[
i
] = 
	`SWAPL
(sfi->sfi_tindirect[i]);

125 #ifde‡
HAS_TIDIRECT


126 
sfi
->
sfi_tödúe˘
 = 
	`SWAPL
(sfi->sfi_tindirect);

129 
	}
}

133 
	$sw≠dú
(
sfs_dú
 *
sfd
)

135 
sfd
->
sfd_öo
 = 
	`SWAPL
(sfd->sfd_ino);

136 
	}
}

140 
	$sw≠ödú
(
uöt32_t
 *
íåõs
)

142 
i
;

143 
i
=0; i<
SFS_DBPERIDB
; i++) {

144 
íåõs
[
i
] = 
	`SWAPL
(entries[i]);

146 
	}
}

150 
	$sw≠bôs
(
uöt8_t
 *
bôs
)

153 ()
bôs
;

154 
	}
}

160 
	$domÆloc
(
size_t
 
Àn
)

162 *
x
;

163 
x
 = 
	`mÆloc
(
Àn
);

164 i‡(
x
==
NULL
) {

165 
	`îrx
(
EXIT_FATAL
, "Out of memory");

167  
x
;

168 
	}
}

173 
	mB_SUPERBLOCK
,

174 
	mB_BITBLOCK
,

175 
	mB_INODE
,

176 
	mB_IBLOCK
,

177 
	mB_DIRDATA
,

178 
	mB_DATA
,

179 
	mB_TOFREE
,

180 
	mB_PASTEND
,

181 } 
	tblockußge_t
;

183 
uöt32_t
 
	gnblocks
, 
	gbôblocks
;

184 
uöt32_t
 
	guniquecou¡î
 = 1;

186 
	gcou¡_blocks
=0, 
	gcou¡_dús
=0, 
	gcou¡_fûes
=0;

190 
uöt8_t
 *
	gbôm≠d©a
;

191 
uöt8_t
 *
	gto‰ìd©a
;

195 
	$bôm≠_öô
(
uöt32_t
 
bôblocks
)

197 
size_t
 
i
, 
m≠size
 = 
bôblocks
 * 
SFS_BLOCKSIZE
;

198 
bôm≠d©a
 = 
	`domÆloc
(
m≠size
 * (
uöt8_t
));

199 
to‰ìd©a
 = 
	`domÆloc
(
m≠size
 * (
uöt8_t
));

200 
i
=0; i<
m≠size
; i++) {

201 
bôm≠d©a
[
i
] = 
to‰ìd©a
[i] = 0;

203 
	}
}

207 
	$blockußge°r
(
blockußge_t
 
how
, 
uöt32_t
 
howdesc
)

209 
rv
[256];

210 
how
) {

211 
B_SUPERBLOCK
:  "superblock";

212 
B_BITBLOCK
:  "bitmap block";

213 
B_INODE
:  "inode";

214 
B_IBLOCK
:

215 
	`¢¥ötf
(
rv
, (rv), "indirect block of inode %lu",

216 (Ë
howdesc
);

218 
B_DIRDATA
:

219 
	`¢¥ötf
(
rv
, (rv), "directory data from inode %lu",

220 (Ë
howdesc
);

222 
B_DATA
:

223 
	`¢¥ötf
(
rv
, (rv), "file data from inode %lu",

224 (Ë
howdesc
);

226 
B_TOFREE
:

227 
	`as£π
(0);

229 
B_PASTEND
:

232  
rv
;

233 
	}
}

237 
	$bôm≠_m¨k
(
uöt32_t
 
block
, 
blockußge_t
 
how
, uöt32_à
howdesc
)

239 
ödex
 = 
block
/8;

240 
uöt8_t
 
mask
 = ((uöt8_t)1)<<(
block
%8);

242 i‡(
how
 =
B_TOFREE
) {

243 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

247 i‡(
bôm≠d©a
[
ödex
] & 
mask
) {

251 
to‰ìd©a
[
ödex
] |
mask
;

255 i‡(
to‰ìd©a
[
ödex
] & 
mask
) {

257 
to‰ìd©a
[
ödex
] &~
mask
;

260 i‡(
bôm≠d©a
[
ödex
] & 
mask
) {

261 
	`w¨nx
("Block %lu (usedás %s)álready in use! (NOT FIXED)",

262 (Ë
block
, 
	`blockußge°r
(
how
, 
howdesc
));

263 
	`£tbad√ss
(
EXIT_UNRECOV
);

266 
bôm≠d©a
[
ödex
] |
mask
;

268 i‡(
how
 !
B_PASTEND
) {

269 
cou¡_blocks
++;

271 
	}
}

275 
	$cou¡bôs
(
uöt8_t
 
vÆ
)

277 
uöt8_t
 
x
;

278 
˘
=0;

280 
x
=1; x; x<<=1) {

281 i‡(
vÆ
 & 
x
Ë
˘
++;

283  
˘
;

284 
	}
}

288 
	$ªp‹tbôs
(
uöt32_t
 
bôblock
, uöt32_à
byã
, 
uöt8_t
 
vÆ
, c⁄° *
wh©
)

290 
uöt8_t
 
x
, 
y
;

291 
uöt32_t
 
blocknum
;

293 
x
=1, 
y
=0; x; x<<=1, y++) {

294 i‡(
vÆ
 & 
x
) {

295 
blocknum
 = 
bôblock
*
SFS_BLOCKBITS
 + 
byã
*
CHAR_BIT
 + 
y
;

296 
	`w¨nx
("Block %luÉrroneously shown %s in bitmap",

297 (Ë
blocknum
, 
wh©
);

300 
	}
}

304 
	$check_bôm≠
()

306 
uöt8_t
 
bôs
[
SFS_BLOCKSIZE
], *
found
, *
to‰ì
, 
tmp
;

307 
uöt32_t
 
Æloccou¡
=0, 
‰ìcou¡
=0, 
i
, 
j
;

308 
bch™ged
;

310 
i
=0; i<
bôblocks
; i++) {

311 
	`diskªad
(
bôs
, 
SFS_MAP_LOCATION
+
i
);

312 
	`sw≠bôs
(
bôs
);

313 
found
 = 
bôm≠d©a
 + 
i
*
SFS_BLOCKSIZE
;

314 
to‰ì
 = 
to‰ìd©a
 + 
i
*
SFS_BLOCKSIZE
;

315 
bch™ged
 = 0;

317 
j
=0; j<
SFS_BLOCKSIZE
; j++) {

319 
	`as£π
((
found
[
j
] & 
to‰ì
[j])==0);

321 i‡(
bôs
[
j
]==
found
[j]) {

325 i‡(
bôs
[
j
]==(
found
[j] | 
to‰ì
[j])) {

326 
bôs
[
j
] = 
found
[j];

327 
bch™ged
 = 1;

332 
bôs
[
j
] &~
to‰ì
[j];

335 i‡((
bôs
[
j
] & 
found
[j]) != found[j]) {

336 
tmp
 = 
found
[
j
] & ~
bôs
[j];

337 
Æloccou¡
 +
	`cou¡bôs
(
tmp
);

338 i‡(
tmp
 != 0) {

339 
	`ªp‹tbôs
(
i
, 
j
, 
tmp
, "free");

344 i‡((
bôs
[
j
] & 
found
[j]) != bits[j]) {

345 
tmp
 = 
bôs
[
j
] & ~
found
[j];

346 
‰ìcou¡
 +
	`cou¡bôs
(
tmp
);

347 i‡(
tmp
 != 0) {

348 
	`ªp‹tbôs
(
i
, 
j
, 
tmp
, "allocated");

352 
bôs
[
j
] = 
found
[j];

353 
bch™ged
 = 1;

356 i‡(
bch™ged
) {

357 
	`sw≠bôs
(
bôs
);

358 
	`diskwrôe
(
bôs
, 
SFS_MAP_LOCATION
+
i
);

362 i‡(
Æloccou¡
 > 0) {

363 
	`w¨nx
("%lu blocksÉrroneously shown free in bitmap (fixed)",

364 (Ë
Æloccou¡
);

365 
	`£tbad√ss
(
EXIT_RECOV
);

367 i‡(
‰ìcou¡
 > 0) {

368 
	`w¨nx
("%lu blocksÉrroneously shown used in bitmap (fixed)",

369 (Ë
‰ìcou¡
);

370 
	`£tbad√ss
(
EXIT_RECOV
);

372 
	}
}

376 
	söodemem‹y
 {

377 
uöt32_t
 
	möo
;

378 
uöt32_t
 
	mlökcou¡
;

381 
öodemem‹y
 *
	göodes
 = 
NULL
;

382 
	gnöodes
=0, 
	gmaxöodes
=0;

386 
	$addmem‹y
(
uöt32_t
 
öo
, uöt32_à
lökcou¡
)

388 
	`as£π
(
nöodes
 <
maxöodes
);

389 i‡(
nöodes
 =
maxöodes
) {

390 #ifde‡
NO_REALLOC


391 
√wmax
 = (
maxöodes
+1)*2;

392 *
p
 = 
	`domÆloc
(
√wmax
 * (
öodemem‹y
));

393 i‡(
öodes
) {

394 
	`mem˝y
(
p
, 
öodes
, 
nöodes
);

395 
	`‰ì
(
öodes
);

397 
öodes
 = 
p
;

399 
maxöodes
 = (maxinodes+1)*2;

400 
öodes
 = 
	`ªÆloc
(öodes, 
maxöodes
 * (
uöt32_t
));

401 i‡(
öodes
==
NULL
) {

402 
	`îrx
(
EXIT_FATAL
, "Out of memory");

406 
öodes
[
nöodes
].
öo
 = ino;

407 
öodes
[
nöodes
].
lökcou¡
 =Üinkcount;

408 
	}
}

413 
	$ªmembî_dú
(
uöt32_t
 
öo
, c⁄° *
∑thsoÁr
)

415 
i
;

418 ()
∑thsoÁr
;

420 
i
=0; i<
nöodes
; i++) {

421 i‡(
öodes
[
i
].
öo
==ino) {

422 
	`as£π
(
öodes
[
i
].
lökcou¡
==0);

427 
	`addmem‹y
(
öo
, 0);

430 
	}
}

434 
	$ob£rve_fûñök
(
uöt32_t
 
öo
)

436 
i
;

437 
i
=0; i<
nöodes
; i++) {

438 i‡(
öodes
[
i
].
öo
==ino) {

439 
	`as£π
(
öodes
[
i
].
lökcou¡
>0);

440 
öodes
[
i
].
lökcou¡
++;

444 
	`bôm≠_m¨k
(
öo
, 
B_INODE
, ino);

445 
	`addmem‹y
(
öo
, 1);

446 
	}
}

450 
	$adju°_fûñöks
()

452 
sfs_öode
 
sfi
;

453 
i
;

455 
i
=0; i<
nöodes
; i++) {

456 i‡(
öodes
[
i
].
lökcou¡
==0) {

460 
	`diskªad
(&
sfi
, 
öodes
[
i
].
öo
);

461 
	`sw≠öode
(&
sfi
);

462 
	`as£π
(
sfi
.
sfi_ty≥
 =
SFS_TYPE_FILE
);

463 i‡(
sfi
.
sfi_lökcou¡
 !
öodes
[
i
].
lökcou¡
) {

464 
	`w¨nx
("File %luÜink count %lu should be %lu (fixed)",

465 (Ë
öodes
[
i
].
öo
,

466 (Ë
sfi
.
sfi_lökcou¡
,

467 (Ë
öodes
[
i
].
lökcou¡
);

468 
sfi
.
sfi_lökcou¡
 = 
öodes
[
i
].
lökcou¡
;

469 
	`£tbad√ss
(
EXIT_RECOV
);

470 
	`sw≠öode
(&
sfi
);

471 
	`diskwrôe
(&
sfi
, 
öodes
[
i
].
öo
);

473 
cou¡_fûes
++;

475 
	}
}

481 
	$checknuŒ°rög
(*
buf
, 
size_t
 
maxÀn
)

483 
size_t
 
i
;

484 
i
=0; i<
maxÀn
; i++) {

485 i‡(
buf
[
i
]==0) {

489 
buf
[
maxÀn
-1] = 0;

491 
	}
}

495 
	$checkbad°rög
(*
buf
)

497 
size_t
 
i
;

498 
rv
=0;

500 
i
=0; 
buf
[i]; i++) {

501 i‡(
buf
[
i
]==':' || buf[i]=='/') {

502 
buf
[
i
] = '_';

503 
rv
 = 1;

506  
rv
;

507 
	}
}

513 
	$check_sb
()

515 
sfs_su≥r
 
•
;

516 
uöt32_t
 
i
;

517 
sch™ged
=0;

519 
	`diskªad
(&
•
, 
SFS_SB_LOCATION
);

520 
	`sw≠sb
(&
•
);

521 i‡(
•
.
•_magic
 !
SFS_MAGIC
) {

522 
	`îrx
(
EXIT_UNRECOV
, "Notán sfs filesystem");

525 
	`as£π
(
nblocks
==0);

526 
	`as£π
(
bôblocks
==0);

527 
nblocks
 = 
•
.
•_nblocks
;

528 
bôblocks
 = 
	`SFS_BITBLOCKS
(
nblocks
);

529 
	`as£π
(
nblocks
>0);

530 
	`as£π
(
bôblocks
>0);

532 
	`bôm≠_öô
(
bôblocks
);

533 
i
=
nblocks
; i<
bôblocks
*
SFS_BLOCKBITS
; i++) {

534 
	`bôm≠_m¨k
(
i
, 
B_PASTEND
, 0);

537 i‡(
	`checknuŒ°rög
(
•
.
•_vﬁ«me
, (sp.sp_volname))) {

538 
	`w¨nx
("VolumeÇameÇotÇull-terminated (fixed)");

539 
	`£tbad√ss
(
EXIT_RECOV
);

540 
sch™ged
 = 1;

542 i‡(
	`checkbad°rög
(
•
.
•_vﬁ«me
)) {

543 
	`w¨nx
("VolumeÇame contains illegal characters (fixed)");

544 
	`£tbad√ss
(
EXIT_RECOV
);

545 
sch™ged
 = 1;

548 i‡(
sch™ged
) {

549 
	`sw≠sb
(&
•
);

550 
	`diskwrôe
(&
•
, 
SFS_SB_LOCATION
);

553 
	`bôm≠_m¨k
(
SFS_SB_LOCATION
, 
B_SUPERBLOCK
, 0);

554 
i
=0; i<
bôblocks
; i++) {

555 
	`bôm≠_m¨k
(
SFS_MAP_LOCATION
+
i
, 
B_BITBLOCK
, i);

557 
	}
}

563 
	$check_ödúe˘_block
(
uöt32_t
 
öo
, uöt32_à*
õ¡ry
, uöt32_à*
blockp
,

564 
uöt32_t
 
nblocks
, uöt32_à*
badcou¡p
,

565 
isdú
, 
ödúe˘i⁄
)

567 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

568 
uöt32_t
 
i
, 
˘
;

570 i‡(*
õ¡ry
 !=0) {

571 
	`diskªad
(
íåõs
, *
õ¡ry
);

572 
	`sw≠ödú
(
íåõs
);

573 
	`bôm≠_m¨k
(*
õ¡ry
, 
B_IBLOCK
, 
öo
);

576 
i
=0; i<
SFS_DBPERIDB
; i++) {

577 
íåõs
[
i
] = 0;

581 i‡(
ödúe˘i⁄
 > 1) {

582 
i
=0; i<
SFS_DBPERIDB
; i++) {

583 
	`check_ödúe˘_block
(
öo
, &
íåõs
[
i
],

584 
blockp
, 
nblocks
,

585 
badcou¡p
,

586 
isdú
,

587 
ödúe˘i⁄
-1);

591 
	`as£π
(
ödúe˘i⁄
==1);

593 
i
=0; i<
SFS_DBPERIDB
; i++) {

594 i‡(*
blockp
 < 
nblocks
) {

595 i‡(
íåõs
[
i
] != 0) {

596 
	`bôm≠_m¨k
(
íåõs
[
i
],

597 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
,

598 
öo
);

602 i‡(
íåõs
[
i
] != 0) {

603 (*
badcou¡p
)++;

604 
	`bôm≠_m¨k
(
íåõs
[
i
],

605 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
,

606 
öo
);

607 
íåõs
[
i
] = 0;

610 (*
blockp
)++;

614 
˘
=0;

615 
i
=
˘
=0; i<
SFS_DBPERIDB
; i++) {

616 i‡(
íåõs
[
i
]!=0Ë
˘
++;

618 i‡(
˘
==0) {

619 i‡(*
õ¡ry
 != 0) {

620 (*
badcou¡p
)++;

621 
	`bôm≠_m¨k
(*
õ¡ry
, 
B_TOFREE
, 0);

622 *
õ¡ry
 = 0;

626 
	`as£π
(*
õ¡ry
 != 0);

627 i‡(*
badcou¡p
 > 0) {

628 
	`sw≠ödú
(
íåõs
);

629 
	`diskwrôe
(
íåõs
, *
õ¡ry
);

632 
	}
}

637 
	$check_öode_blocks
(
uöt32_t
 
öo
, 
sfs_öode
 *
sfi
, 
isdú
)

639 
uöt32_t
 
size
, 
block
, 
nblocks
, 
badcou¡
;

641 
badcou¡
 = 0;

643 
size
 = 
	`SFS_ROUNDUP
(
sfi
->
sfi_size
, 
SFS_BLOCKSIZE
);

644 
nblocks
 = 
size
/
SFS_BLOCKSIZE
;

646 
block
=0; block<
SFS_NDIRECT
; block++) {

647 i‡(
block
 < 
nblocks
) {

648 i‡(
sfi
->
sfi_dúe˘
[
block
] != 0) {

649 
	`bôm≠_m¨k
(
sfi
->
sfi_dúe˘
[
block
],

650 
isdú
 ? 
B_DIRDATA
 : 
B_DATA
, 
öo
);

654 i‡(
sfi
->
sfi_dúe˘
[
block
] != 0) {

655 
badcou¡
++;

656 
	`bôm≠_m¨k
(
sfi
->
sfi_dúe˘
[
block
],

657 
B_TOFREE
, 0);

662 #ifde‡
SFS_NIDIRECT


663 
i
=0; i<
SFS_NIDIRECT
; i++) {

664 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_ödúe˘
[
i
],

665 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 1);

668 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_ödúe˘
,

669 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 1);

672 #ifde‡
SFS_NDIDIRECT


673 
i
=0; i<
SFS_NDIDIRECT
; i++) {

674 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_dödúe˘
[
i
],

675 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 2);

678 #ifde‡
HAS_DIDIRECT


679 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_dödúe˘
,

680 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 2);

684 #ifde‡
SFS_NTIDIRECT


685 
i
=0; i<
SFS_NTIDIRECT
; i++) {

686 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_tödúe˘
[
i
],

687 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 3);

690 #ifde‡
HAS_TIDIRECT


691 
	`check_ödúe˘_block
(
öo
, &
sfi
->
sfi_tödúe˘
,

692 &
block
, 
nblocks
, &
badcou¡
, 
isdú
, 3);

696 i‡(
badcou¡
 > 0) {

697 
	`w¨nx
("Inode %lu: %lu blocksáfter EOF (freed)",

698 (Ë
öo
, (Ë
badcou¡
);

699 
	`£tbad√ss
(
EXIT_RECOV
);

704 
	}
}

709 
uöt32_t


710 
	$ibm≠
(
uöt32_t
 
iblock
, uöt32_à
off£t
, uöt32_à
íåysize
)

712 
uöt32_t
 
íåõs
[
SFS_DBPERIDB
];

714 i‡(
iblock
 == 0) {

718 
	`diskªad
(
íåõs
, 
iblock
);

719 
	`sw≠ödú
(
íåõs
);

721 i‡(
íåysize
 > 1) {

722 
uöt32_t
 
ödex
 = 
off£t
 / 
íåysize
;

723 
off£t
 %
íåysize
;

724  
	`ibm≠
(
íåõs
[
ödex
], 
off£t
, 
íåysize
/
SFS_DBPERIDB
);

727 
	`as£π
(
off£t
 < 
SFS_DBPERIDB
);

728  
íåõs
[
off£t
];

730 
	}
}

732 
	#BMAP_ND
 
SFS_NDIRECT


	)

733 
	#BMAP_D
(
sfi
, 
x
Ë((sfi)->
sfi_dúe˘
[(x)])

	)

735 #ifde‡
SFS_NIDIRECT


736 
	#BMAP_NI
 
SFS_NIDIRECT


	)

737 
	#BMAP_I
(
sfi
, 
x
Ë((sfi)->
sfi_ödúe˘
[(x)])

	)

739 
	#BMAP_NI
 1

	)

740 
	#BMAP_I
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_ödúe˘
)

	)

743 #ifde‡
SFS_NDIDIRECT


744 
	#BMAP_NII
 
SFS_NDIDIRECT


	)

745 
	#BMAP_II
(
sfi
, 
x
Ë((sfi)->
sfi_dödúe˘
[(x)])

	)

747 #ifde‡
HAS_DIDIRECT


748 
	#BMAP_NII
 1

	)

749 
	#BMAP_II
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_dödúe˘
)

	)

751 
	#BMAP_NII
 0

	)

752 
	#BMAP_II
(
sfi
, 
x
Ë(()(x), ()(sfi), 0)

	)

756 #ifde‡
SFS_NTIDIRECT


757 
	#BMAP_NIII
 
SFS_NTIDIRECT


	)

758 
	#BMAP_III
(
sfi
, 
x
Ë((sfi)->
sfi_tödúe˘
[(x)])

	)

760 #ifde‡
HAS_TIDIRECT


761 
	#BMAP_NIII
 1

	)

762 
	#BMAP_III
(
sfi
, 
x
Ë(()(x), (sfi)->
sfi_tödúe˘
)

	)

764 
	#BMAP_NIII
 0

	)

765 
	#BMAP_III
(
sfi
, 
x
Ë(()(x), ()(sfi), 0)

	)

769 
	#BMAP_DMAX
 
BMAP_ND


	)

770 
	#BMAP_IMAX
 (
BMAP_DMAX
+
SFS_DBPERIDB
*
BMAP_NI
)

	)

771 
	#BMAP_IIMAX
 (
BMAP_IMAX
+
SFS_DBPERIDB
*
BMAP_NII
)

	)

772 
	#BMAP_IIIMAX
 (
BMAP_IIMAX
+
SFS_DBPERIDB
*
BMAP_NIII
)

	)

774 
	#BMAP_DSIZE
 1

	)

775 
	#BMAP_ISIZE
 (
BMAP_DSIZE
*
SFS_DBPERIDB
)

	)

776 
	#BMAP_IISIZE
 (
BMAP_ISIZE
*
SFS_DBPERIDB
)

	)

777 
	#BMAP_IIISIZE
 (
BMAP_IISIZE
*
SFS_DBPERIDB
)

	)

780 
uöt32_t


781 
	$dobm≠
(c⁄° 
sfs_öode
 *
sfi
, 
uöt32_t
 
fûeblock
)

783 
uöt32_t
 
iblock
, 
off£t
;

785 i‡(
fûeblock
 < 
BMAP_DMAX
) {

786  
	`BMAP_D
(
sfi
, 
fûeblock
);

788 i‡(
fûeblock
 < 
BMAP_IMAX
) {

789 
iblock
 = (
fûeblock
 - 
BMAP_DMAX
)/
BMAP_ISIZE
;

790 
off£t
 = (
fûeblock
 - 
BMAP_DMAX
)%
BMAP_ISIZE
;

791  
	`ibm≠
(
	`BMAP_I
(
sfi
, 
iblock
), 
off£t
, 
BMAP_DSIZE
);

793 i‡(
fûeblock
 < 
BMAP_IIMAX
) {

794 
iblock
 = (
fûeblock
 - 
BMAP_IMAX
)/
BMAP_IISIZE
;

795 
off£t
 = (
fûeblock
 - 
BMAP_IMAX
)%
BMAP_IISIZE
;

796  
	`ibm≠
(
	`BMAP_II
(
sfi
, 
iblock
), 
off£t
, 
BMAP_ISIZE
);

798 i‡(
fûeblock
 < 
BMAP_IIIMAX
) {

799 
iblock
 = (
fûeblock
 - 
BMAP_IIMAX
)/
BMAP_IIISIZE
;

800 
off£t
 = (
fûeblock
 - 
BMAP_IIMAX
)%
BMAP_IIISIZE
;

801  
	`ibm≠
(
	`BMAP_III
(
sfi
, 
iblock
), 
off£t
, 
BMAP_IISIZE
);

804 
	}
}

808 
	$dúªad
(
sfs_öode
 *
sfi
, 
sfs_dú
 *
d
, 
nd
)

810 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

811 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

812 
i
, 
j
;

814 
i
=0; i<
nblocks
; i++) {

815 
uöt32_t
 
block
 = 
	`dobm≠
(
sfi
, 
i
);

816 i‡(
block
!=0) {

817 
	`diskªad
(
d
 + 
i
*
©⁄˚
, 
block
);

818 
j
=0; j<
©⁄˚
; j++) {

819 
	`sw≠dú
(&
d
[
i
*
©⁄˚
+
j
]);

823 
	`w¨nx
("Warning: sparse directory found");

824 
	`bzîo
(
d
 + 
i
*
©⁄˚
, 
SFS_BLOCKSIZE
);

827 
	}
}

831 
	$dúwrôe
(c⁄° 
sfs_öode
 *
sfi
, 
sfs_dú
 *
d
, 
nd
)

833 c⁄° 
©⁄˚
 = 
SFS_BLOCKSIZE
/(
sfs_dú
);

834 
nblocks
 = 
	`SFS_ROUNDUP
(
nd
, 
©⁄˚
) /átonce;

835 
i
, 
j
, 
bad
;

837 
i
=0; i<
nblocks
; i++) {

838 
uöt32_t
 
block
 = 
	`dobm≠
(
sfi
, 
i
);

839 i‡(
block
!=0) {

840 
j
=0; j<
©⁄˚
; j++) {

841 
	`sw≠dú
(&
d
[
i
*
©⁄˚
+
j
]);

843 
	`diskwrôe
(
d
 + 
i
*
©⁄˚
, 
block
);

846 
j
=
bad
=0; j<
©⁄˚
; j++) {

847 i‡(
d
[
i
*
©⁄˚
+
j
].
sfd_öo
 !
SFS_NOINO
 ||

848 
d
[
i
*
©⁄˚
+
j
].
sfd_«me
[0] != 0) {

849 
bad
 = 1;

852 i‡(
bad
) {

853 
	`w¨nx
("Cannot writeÅo missing block in "

855 
	`£tbad√ss
(
EXIT_UNRECOV
);

859 
	}
}

863 
sfs_dú
 *
	gglobÆ_s‹tdús
;

866 
	$dús‹tfunc
(c⁄° *
Ø
, c⁄° *
bb
)

868 c⁄° *
a
 = (c⁄° *)
Ø
;

869 c⁄° *
b
 = (c⁄° *)
bb
;

870 c⁄° 
sfs_dú
 *
ad
 = &
globÆ_s‹tdús
[*
a
];

871 c⁄° 
sfs_dú
 *
bd
 = &
globÆ_s‹tdús
[*
b
];

872  
	`°rcmp
(
ad
->
sfd_«me
, 
bd
->sfd_name);

873 
	}
}

875 #ifde‡
NO_QSORT


878 
qs‹t
(*
d©a
, 
num
, 
size_t
 
size
, (*
f
)(const *, const *))

880 
i
, 
j
;

881 ()
size
;

884 
i
=0; i<
num
-1; i++) {

885 
j
=
i
+1; j<
num
; j++) {

886 i‡(
	`f
(&
d©a
[
i
], &d©a[
j
]) < 0) {

887 
tmp
 = 
d©a
[
i
];

888 
d©a
[
i
] = d©a[
j
];

889 
d©a
[
j
] = 
tmp
;

893 
	}
}

898 
	$s‹tdú
(*
ve˘‹
, 
sfs_dú
 *
d
, 
nd
)

900 
globÆ_s‹tdús
 = 
d
;

901 
	`qs‹t
(
ve˘‹
, 
nd
, (), 
dús‹tfunc
);

902 
	}
}

907 
	$dú_åyadd
(
sfs_dú
 *
d
, 
nd
, c⁄° *
«me
, 
uöt32_t
 
öo
)

909 
i
;

910 
i
=0; i<
nd
; i++) {

911 i‡(
d
[
i
].
sfd_öo
==
SFS_NOINO
) {

912 
d
[
i
].
sfd_öo
 = 
öo
;

913 
	`as£π
(
	`°æí
(
«me
Ë< (
d
[
i
].
sfd_«me
));

914 
	`°r˝y
(
d
[
i
].
sfd_«me
, 
«me
);

919 
	}
}

923 
	$check_dú_íåy
(c⁄° *
∑thsoÁr
, 
uöt32_t
 
ödex
, 
sfs_dú
 *
sfd
)

925 
dch™ged
 = 0;

927 i‡(
sfd
->
sfd_öo
 =
SFS_NOINO
) {

928 i‡(
sfd
->
sfd_«me
[0] != 0) {

929 
	`£tbad√ss
(
EXIT_RECOV
);

930 
	`w¨nx
("Directory /%sÉntry %lu hasÇame butÇo file",

931 
∑thsoÁr
, (Ë
ödex
);

932 
sfd
->
sfd_«me
[0] = 0;

933 
dch™ged
 = 1;

937 i‡(
sfd
->
sfd_«me
[0] == 0) {

938 
	`¢¥ötf
(
sfd
->
sfd_«me
, (sfd->sfd_name),

940 (Ë
sfd
->
sfd_öo
,

941 (Ë
uniquecou¡î
++);

942 
	`£tbad√ss
(
EXIT_RECOV
);

943 
	`w¨nx
("Directory /%sÉntry %lu has file but "

945 
∑thsoÁr
, (Ë
ödex
,

946 
sfd
->
sfd_«me
);

947 
dch™ged
 = 1;

949 i‡(
	`checknuŒ°rög
(
sfd
->
sfd_«me
, (sfd->sfd_name))) {

950 
	`£tbad√ss
(
EXIT_RECOV
);

951 
	`w¨nx
("Directory /%sÉntry %luÇot "

953 
∑thsoÁr
, (Ë
ödex
);

954 
dch™ged
 = 1;

956 i‡(
	`checkbad°rög
(
sfd
->
sfd_«me
)) {

957 
	`£tbad√ss
(
EXIT_RECOV
);

958 
	`w¨nx
("Directory /%sÉntry %lu contains invalid "

960 
∑thsoÁr
, (Ë
ödex
);

961 
dch™ged
 = 1;

964  
dch™ged
;

965 
	}
}

971 
	$check_dú
(
uöt32_t
 
öo
, uöt32_à
∑ª¡öo
, c⁄° *
∑thsoÁr
)

973 
sfs_öode
 
sfi
;

974 
sfs_dú
 *
dúíåõs
;

975 *
s‹tve˘‹
;

976 
uöt32_t
 
dúsize
, 
ndúíåõs
, 
maxdúíåõs
, 
subdúcou¡
, 
i
;

977 
ich™ged
=0, 
dch™ged
=0, 
dŸ£í
=0, 
dŸdŸ£í
=0;

979 
	`diskªad
(&
sfi
, 
öo
);

980 
	`sw≠öode
(&
sfi
);

982 i‡(
	`ªmembî_dú
(
öo
, 
∑thsoÁr
)) {

987 
	`bôm≠_m¨k
(
öo
, 
B_INODE
, ino);

988 
cou¡_dús
++;

990 i‡(
sfi
.
sfi_size
 % (
sfs_dú
) != 0) {

991 
	`£tbad√ss
(
EXIT_RECOV
);

992 
	`w¨nx
("Directory /%s has illegal size %lu (fixed)",

993 
∑thsoÁr
, (Ë
sfi
.
sfi_size
);

994 
sfi
.
sfi_size
 = 
	`SFS_ROUNDUP
(sfi.sfi_size,

995 (
sfs_dú
));

996 
ich™ged
 = 1;

999 i‡(
	`check_öode_blocks
(
öo
, &
sfi
, 1)) {

1000 
ich™ged
 = 1;

1003 
ndúíåõs
 = 
sfi
.
sfi_size
/(
sfs_dú
);

1004 
maxdúíåõs
 = 
	`SFS_ROUNDUP
(
ndúíåõs
,

1005 
SFS_BLOCKSIZE
/(
sfs_dú
));

1006 
dúsize
 = 
maxdúíåõs
 * (
sfs_dú
);

1007 
dúíåõs
 = 
	`domÆloc
(
dúsize
);

1008 
s‹tve˘‹
 = 
	`domÆloc
(
ndúíåõs
 * ());

1010 
	`dúªad
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

1011 
i
=
ndúíåõs
; i<
maxdúíåõs
; i++) {

1012 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1013 
	`bzîo
(
dúíåõs
[
i
].
sfd_«me
, (direntries[i].sfd_name));

1016 
i
=0; i<
ndúíåõs
; i++) {

1017 i‡(
	`check_dú_íåy
(
∑thsoÁr
, 
i
, &
dúíåõs
[i])) {

1018 
dch™ged
 = 1;

1020 
s‹tve˘‹
[
i
] = i;

1023 
	`s‹tdú
(
s‹tve˘‹
, 
dúíåõs
, 
ndúíåõs
);

1026 
i
=0; i+1<
ndúíåõs
; i++) {

1027 
sfs_dú
 *
d1
 = &
dúíåõs
[
s‹tve˘‹
[
i
]];

1028 
sfs_dú
 *
d2
 = &
dúíåõs
[
s‹tve˘‹
[
i
+1]];

1029 
	`as£π
(
d1
 !
d2
);

1031 i‡(
d1
->
sfd_öo
 =
SFS_NOINO
) {

1035 i‡(!
	`°rcmp
(
d1
->
sfd_«me
, 
d2
->sfd_name)) {

1036 i‡(
d1
->
sfd_öo
 =
d2
->sfd_ino) {

1037 
	`£tbad√ss
(
EXIT_RECOV
);

1038 
	`w¨nx
("Directory /%s: DuplicateÉntries for "

1040 
∑thsoÁr
, 
d1
->
sfd_«me
);

1041 
d1
->
sfd_öo
 = 
SFS_NOINO
;

1042 
d1
->
sfd_«me
[0] = 0;

1045 
	`¢¥ötf
(
d1
->
sfd_«me
, (d1->sfd_name),

1047 (Ë
d1
->
sfd_öo
,

1048 (Ë
uniquecou¡î
++);

1049 
	`£tbad√ss
(
EXIT_RECOV
);

1050 
	`w¨nx
("Directory /%s: DuplicateÇames %s "

1052 
∑thsoÁr
, 
d2
->
sfd_«me
, 
d1
->sfd_name);

1054 
dch™ged
 = 1;

1058 
i
=0; i<
ndúíåõs
; i++) {

1059 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

1060 i‡(
dúíåõs
[
i
].
sfd_öo
 !
öo
) {

1061 
	`£tbad√ss
(
EXIT_RECOV
);

1062 
	`w¨nx
("Directory /%s: Incorrect `.'Éntry "

1063 "(fixed)", 
∑thsoÁr
);

1064 
dúíåõs
[
i
].
sfd_öo
 = 
öo
;

1065 
dch™ged
 = 1;

1067 
	`as£π
(
dŸ£í
==0);

1068 
dŸ£í
 = 1;

1070 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

1071 i‡(
dúíåõs
[
i
].
sfd_öo
 !
∑ª¡öo
) {

1072 
	`£tbad√ss
(
EXIT_RECOV
);

1073 
	`w¨nx
("Directory /%s: Incorrect `..'Éntry "

1074 "(fixed)", 
∑thsoÁr
);

1075 
dúíåõs
[
i
].
sfd_öo
 = 
∑ª¡öo
;

1076 
dch™ged
 = 1;

1078 
	`as£π
(
dŸdŸ£í
==0);

1079 
dŸdŸ£í
 = 1;

1083 i‡(!
dŸ£í
) {

1084 i‡(
	`dú_åyadd
(
dúíåõs
, 
ndúíåõs
, ".", 
öo
)==0) {

1085 
	`£tbad√ss
(
EXIT_RECOV
);

1086 
	`w¨nx
("Directory /%s: No `.'Éntry (added)",

1087 
∑thsoÁr
);

1088 
dch™ged
 = 1;

1090 i‡(
	`dú_åyadd
(
dúíåõs
, 
maxdúíåõs
, ".", 
öo
)==0) {

1091 
	`£tbad√ss
(
EXIT_RECOV
);

1092 
	`w¨nx
("Directory /%s: No `.'Éntry (added)",

1093 
∑thsoÁr
);

1094 
ndúíåõs
++;

1095 
dch™ged
 = 1;

1096 
sfi
.
sfi_size
 +(
sfs_dú
);

1097 
ich™ged
 = 1;

1100 
	`£tbad√ss
(
EXIT_UNRECOV
);

1101 
	`w¨nx
("Directory /%s: No `.'Éntry (NOT FIXED)",

1102 
∑thsoÁr
);

1106 i‡(!
dŸdŸ£í
) {

1107 i‡(
	`dú_åyadd
(
dúíåõs
, 
ndúíåõs
, "..", 
∑ª¡öo
)==0) {

1108 
	`£tbad√ss
(
EXIT_RECOV
);

1109 
	`w¨nx
("Directory /%s: No `..'Éntry (added)",

1110 
∑thsoÁr
);

1111 
dch™ged
 = 1;

1113 i‡(
	`dú_åyadd
(
dúíåõs
, 
maxdúíåõs
, "..",

1114 
∑ª¡öo
)==0) {

1115 
	`£tbad√ss
(
EXIT_RECOV
);

1116 
	`w¨nx
("Directory /%s: No `..'Éntry (added)",

1117 
∑thsoÁr
);

1118 
ndúíåõs
++;

1119 
dch™ged
 = 1;

1120 
sfi
.
sfi_size
 +(
sfs_dú
);

1121 
ich™ged
 = 1;

1124 
	`£tbad√ss
(
EXIT_UNRECOV
);

1125 
	`w¨nx
("Directory /%s: No `..'Éntry (NOT FIXED)",

1126 
∑thsoÁr
);

1130 
subdúcou¡
=0;

1131 
i
=0; i<
ndúíåõs
; i++) {

1132 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, ".")) {

1135 i‡(!
	`°rcmp
(
dúíåõs
[
i
].
sfd_«me
, "..")) {

1138 i‡(
dúíåõs
[
i
].
sfd_öo
 =
SFS_NOINO
) {

1142 
∑th
[
	`°æí
(
∑thsoÁr
)+
SFS_NAMELEN
+1];

1143 
sfs_öode
 
subsfi
;

1145 
	`diskªad
(&
subsfi
, 
dúíåõs
[
i
].
sfd_öo
);

1146 
	`sw≠öode
(&
subsfi
);

1147 
	`¢¥ötf
(
∑th
, (path), "%s/%s",

1148 
∑thsoÁr
, 
dúíåõs
[
i
].
sfd_«me
);

1150 
subsfi
.
sfi_ty≥
) {

1151 
SFS_TYPE_FILE
:

1152 i‡(
	`check_öode_blocks
(
dúíåõs
[
i
].
sfd_öo
,

1153 &
subsfi
, 0)) {

1154 
	`sw≠öode
(&
subsfi
);

1155 
	`diskwrôe
(&
subsfi
,

1156 
dúíåõs
[
i
].
sfd_öo
);

1158 
	`ob£rve_fûñök
(
dúíåõs
[
i
].
sfd_öo
);

1160 
SFS_TYPE_DIR
:

1161 i‡(
	`check_dú
(
dúíåõs
[
i
].
sfd_öo
,

1162 
öo
,

1163 
∑th
)) {

1164 
	`£tbad√ss
(
EXIT_RECOV
);

1165 
	`w¨nx
("Directory /%s: CrosslinkÅo "

1167 
∑th
);

1168 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1169 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

1170 
dch™ged
 = 1;

1173 
subdúcou¡
++;

1177 
	`£tbad√ss
(
EXIT_RECOV
);

1178 
	`w¨nx
("Object /%s: Invalid inodeÅype "

1179 "‘emoved)", 
∑th
);

1180 
dúíåõs
[
i
].
sfd_öo
 = 
SFS_NOINO
;

1181 
dúíåõs
[
i
].
sfd_«me
[0] = 0;

1182 
dch™ged
 = 1;

1188 i‡(
sfi
.
sfi_lökcou¡
 !
subdúcou¡
+2) {

1189 
	`£tbad√ss
(
EXIT_RECOV
);

1190 
	`w¨nx
("Directory /%s: Link count %lu should be %lu (fixed)",

1191 
∑thsoÁr
, (Ë
sfi
.
sfi_lökcou¡
,

1192 (Ë
subdúcou¡
+2);

1193 
sfi
.
sfi_lökcou¡
 = 
subdúcou¡
+2;

1194 
ich™ged
 = 1;

1197 i‡(
dch™ged
) {

1198 
	`dúwrôe
(&
sfi
, 
dúíåõs
, 
ndúíåõs
);

1201 i‡(
ich™ged
) {

1202 
	`sw≠öode
(&
sfi
);

1203 
	`diskwrôe
(&
sfi
, 
öo
);

1206 
	`‰ì
(
dúíåõs
);

1207 
	`‰ì
(
s‹tve˘‹
);

1210 
	}
}

1215 
	$check_roŸ_dú
()

1217 
sfs_öode
 
sfi
;

1218 
	`diskªad
(&
sfi
, 
SFS_ROOT_LOCATION
);

1219 
	`sw≠öode
(&
sfi
);

1221 
sfi
.
sfi_ty≥
) {

1222 
SFS_TYPE_DIR
:

1224 
SFS_TYPE_FILE
:

1225 
	`w¨nx
("Root directory inode isáÑegular file (fixed)");

1226 
fix
;

1228 
	`w¨nx
("Root directory inode has invalidÅype %lu (fixed)",

1229 (Ë
sfi
.
sfi_ty≥
);

1230 
fix
:

1231 
	`£tbad√ss
(
EXIT_RECOV
);

1232 
sfi
.
sfi_ty≥
 = 
SFS_TYPE_DIR
;

1233 
	`sw≠öode
(&
sfi
);

1234 
	`diskwrôe
(&
sfi
, 
SFS_ROOT_LOCATION
);

1238 
	`check_dú
(
SFS_ROOT_LOCATION
, SFS_ROOT_LOCATION, "");

1239 
	}
}

1244 
	$maö
(
¨gc
, **
¨gv
)

1246 #ifde‡
HOST


1247 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

1250 i‡(
¨gc
!=2) {

1251 
	`îrx
(
EXIT_USAGE
, "Usage: sfsck device/diskfile");

1254 
	`as£π
((
sfs_su≥r
)==
SFS_BLOCKSIZE
);

1255 
	`as£π
((
sfs_öode
)==
SFS_BLOCKSIZE
);

1256 
	`as£π
(
SFS_BLOCKSIZE
 % (
sfs_dú
) == 0);

1258 
	`›ídisk
(
¨gv
[1]);

1260 
	`check_sb
();

1261 
	`check_roŸ_dú
();

1262 
	`check_bôm≠
();

1263 
	`adju°_fûñöks
();

1265 
	`˛o£disk
();

1267 
	`w¨nx
("%lu blocks used (of %lu); %lu directories; %lu files",

1268 
cou¡_blocks
, (Ë
nblocks
, 
cou¡_dús
, 
cou¡_fûes
);

1270 
bad√ss
) {

1271 
EXIT_USAGE
:

1272 
EXIT_FATAL
:

1275 
	`as£π
(0);

1277 
EXIT_UNRECOV
:

1278 
	`w¨nx
("WARNING - unrecoverableÉrrors. MaybeÅryágain?");

1280 
EXIT_RECOV
:

1281 
	`w¨nx
("Caution - filesystem modified. Runágain forÜuck.");

1283 
EXIT_CLEAN
:

1287  
bad√ss
;

1288 
	}
}

	@user/testbin/add/add.c

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<îr.h
>

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
i
, 
j
;

47 i‡(
¨gc
 != 3) {

48 
	`îrx
(1, "Usage:áddÇum1Çum2");

51 
i
 = 
	`©oi
(
¨gv
[1]);

52 
j
 = 
	`©oi
(
¨gv
[2]);

54 
	`¥ötf
("Answî: %d\n", 
i
+
j
);

57 
	}
}

	@user/testbin/argtest/argtest.c

38 
	~<°dio.h
>

41 
	$maö
(
¨gc
, *
¨gv
[])

43 c⁄° *
tmp
;

44 
i
;

46 
	`¥ötf
("¨gc: %d\n", 
¨gc
);

48 
i
=0; i<=
¨gc
; i++) {

49 
tmp
 = 
¨gv
[
i
];

50 i‡(
tmp
==
NULL
) {

51 
tmp
 = "[NULL]";

53 
	`¥ötf
("¨gv[%d]: %s\n", 
i
, 
tmp
);

57 
	}
}

	@user/testbin/badcall/bad_chdir.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

38 
	~"ã°.h
"

42 
	$chdú_em±y
()

44 
rv
;

50 
rv
 = 
	`chdú
("");

51 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 0, "chdirÅoÉmpty string");

52 
	}
}

55 
	$ã°_chdú
()

57 
	`ã°_chdú_∑th
();

58 
	`chdú_em±y
();

59 
	}
}

	@user/testbin/badcall/bad_close.c

34 
	~"ã°.h
"

37 
	$ã°_˛o£
()

39 
	`ã°_˛o£_fd
();

40 
	}
}

	@user/testbin/badcall/bad_dup2.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$dup2_fd2
(
fd
, c⁄° *
desc
)

51 
rv
;

53 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
fd
);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
desc
);

56 i‡(
rv
 != -1) {

57 
	`˛o£
(
fd
);

59 
	}
}

63 
	$dup2_£lf
()

65 
°©
 
sb
;

66 
rv
;

67 
ã°fd
;

70 
ã°fd
 = 
CLOSED_FD
;

72 
rv
 = 
	`dup2
(
STDIN_FILENO
, 
ã°fd
);

73 i‡(
rv
 == -1) {

74 
	`w¨n
("UH-OH: couldn't copy stdin");

78 
rv
 = 
	`dup2
(
ã°fd
,Åestfd);

79 i‡(
rv
 =
ã°fd
) {

80 
	`w¨nx
("passed: dup2Åo same fd");

82 i‡(
rv
<0) {

83 
	`w¨n
("FAILURE: dup2Åo same fd:Érror");

86 
	`w¨nx
("FAILURE: dup2Åÿßmêfd:Ñëu∫ed %d in°ód", 
rv
);

89 
rv
 = 
	`f°©
(
ã°fd
, &
sb
);

90 i‡(
rv
==0) {

91 
	`w¨nx
("passed: fstat fdáfter dup2Åo itself");

93 i‡(
î∫o
!=
EUNIMP
 &&Éºno!=
ENOSYS
) {

94 
	`w¨n
("FAILURE: fstat fdáfter dup2Åo itself");

98 
rv
 = 
	`l£ek
(
ã°fd
, 0, 
SEEK_CUR
);

99 i‡(
rv
==0 || (rv==-1 && 
î∫o
==
ESPIPE
)) {

100 
	`w¨nx
("passed:Üseek fdáfter dup2Åo itself");

103 
	`w¨n
("FAILURE:Üseek fdáfter dup2Åo itself");

107 
	`˛o£
(
ã°fd
);

108 
	}
}

111 
	$ã°_dup2
()

114 
	`ã°_dup2_fd
();

117 
	`dup2_fd2
(-1, "dup2Åo -1");

118 
	`dup2_fd2
(-5, "dup2Åo -5");

119 
	`dup2_fd2
(
IMPOSSIBLE_FD
, "dup2Åo impossible fd");

120 #ifde‡
OPEN_MAX


121 
	`dup2_fd2
(
OPEN_MAX
, "dup2Åo OPEN_MAX");

123 
	`w¨nx
("Warning: OPEN_MAXÇot defined -Åest skipped");

126 
	`dup2_£lf
();

127 
	}
}

	@user/testbin/badcall/bad_execv.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$exec_comm⁄_f‹k
()

47 
pid
, 
rv
, 
°©us
;

49 
pid
 = 
	`f‹k
();

50 i‡(
pid
<0) {

51 
	`w¨n
("UH-OH: fork failed");

55 i‡(
pid
==0) {

60 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

61 i‡(
rv
 == -1) {

62 
	`w¨n
("UH-OH: waitpid failed");

65 i‡(!
	`WIFEXITED
(
°©us
Ë|| 
	`WEXITSTATUS
(°©usË!
MAGIC_STATUS
) {

66 
	`w¨nx
("FAILURE: wrongÉxit code of subprocess");

69 
	}
}

73 
	$exec_bad¥og
(c⁄° *
¥og
, c⁄° *
desc
)

75 
rv
;

76 *
¨gs
[2];

77 
¨gs
[0] = (*)"foo";

78 
¨gs
[1] = 
NULL
;

80 i‡(
	`exec_comm⁄_f‹k
() != 0) {

84 
rv
 = 
	`execv
(
¥og
, 
¨gs
);

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

86 
	`exô
(
MAGIC_STATUS
);

87 
	}
}

91 
	$exec_em±y¥og
()

93 
rv
;

94 *
¨gs
[2];

95 
¨gs
[0] = (*)"foo";

96 
¨gs
[1] = 
NULL
;

98 i‡(
	`exec_comm⁄_f‹k
() != 0) {

102 
rv
 = 
	`execv
("", 
¨gs
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
EISDIR
, "execÅheÉmpty string");

104 
	`exô
(
MAGIC_STATUS
);

105 
	}
}

109 
	$exec_bad¨gs
(*
¨gs
, c⁄° *
desc
)

111 
rv
;

113 i‡(
	`exec_comm⁄_f‹k
() != 0) {

117 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

119 
	`exô
(
MAGIC_STATUS
);

120 
	}
}

124 
	$exec_⁄órg
(*
±r
, c⁄° *
desc
)

126 
rv
;

128 *
¨gs
[3];

129 
¨gs
[0] = (*)"foo";

130 
¨gs
[1] = (*)
±r
;

131 
¨gs
[2] = 
NULL
;

133 i‡(
	`exec_comm⁄_f‹k
() != 0) {

137 
rv
 = 
	`execv
("/bö/åue", 
¨gs
);

138 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

139 
	`exô
(
MAGIC_STATUS
);

140 
	}
}

143 
	$ã°_execv
()

145 
	`exec_bad¥og
(
NULL
, "exec NULL");

146 
	`exec_bad¥og
(
INVAL_PTR
, "exec invalidÖointer");

147 
	`exec_bad¥og
(
KERN_PTR
, "exec kernelÖointer");

149 
	`exec_em±y¥og
();

151 
	`exec_bad¨gs
(
NULL
, "exec /bin/true with NULLárglist");

152 
	`exec_bad¨gs
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárglist");

153 
	`exec_bad¨gs
(
KERN_PTR
, "exec /bin/true with kernelÖointerárglist");

155 
	`exec_⁄órg
(
INVAL_PTR
, "exec /bin/true with invalidÖointerárg");

156 
	`exec_⁄órg
(
KERN_PTR
, "exec /bin/true with kernelÖointerárg");

157 
	}
}

	@user/testbin/badcall/bad_fsync.c

34 
	~"ã°.h
"

37 
	$ã°_fsync
()

39 
	`ã°_fsync_fd
();

40 
	}
}

	@user/testbin/badcall/bad_ftruncate.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$·runˇã_fd_devi˚
()

50 
rv
, 
fd
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDWR
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`·runˇã
(
fd
, 6);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncate on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$·runˇã_size_√g
()

68 
rv
, 
fd
;

70 
fd
 = 
	`›í_ã°fûe
(0);

71 i‡(
fd
<0) {

75 
rv
 = 
	`·runˇã
(
fd
, -60);

76 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "ftruncateÅoÇegative size");

78 
	`˛o£
(
fd
);

79 
	`ªmove
(
TESTFILE
);

80 
	}
}

83 
	$ã°_·runˇã
()

85 
	`ã°_·runˇã_fd
();

87 
	`·runˇã_fd_devi˚
();

88 
	`·runˇã_size_√g
();

89 
	}
}

	@user/testbin/badcall/bad_getcwd.c

34 
	~"ã°.h
"

37 
	$ã°_gëcwd
()

39 
	`ã°_gëcwd_buf
();

40 
	}
}

	@user/testbin/badcall/bad_getdirentry.c

34 
	~"ã°.h
"

37 
	$ã°_gëdúíåy
()

39 
	`ã°_gëdúíåy_fd
();

40 
	`ã°_gëdúíåy_buf
();

41 
	}
}

	@user/testbin/badcall/bad_ioctl.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/io˘l.h
>

36 
	~<uni°d.h
>

37 
	~<°dio.h
>

38 
	~<î∫o.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$⁄e_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
,

46 *
±r
, c⁄° *
±rdesc
)

48 
desc
[128];

49 
rv
;

51 
	`¢¥ötf
(
desc
, (desc), "io˘»%†wôh %s", 
codíame
, 
±rdesc
);

52 
rv
 = 
	`io˘l
(
fd
, 
code
, 
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$™y_io˘l_badbuf
(
fd
, 
code
, c⁄° *
codíame
)

60 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
NULL
, "NULLÖointer");

61 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
INVAL_PTR
, "invalidÖointer");

62 
	`⁄e_io˘l_badbuf
(
fd
, 
code
, 
codíame
, 
KERN_PTR
, "kernelÖointer");

63 
	}
}

65 
	#IOCTL
(
fd
, 
sym
Ë
	`™y_io˘l_badbuf
(fd, sym, #sym)

	)

69 
	$io˘l_badbuf
()

82 ()
™y_io˘l_badbuf
;

83 
	}
}

87 
	$io˘l_badcode
()

89 
rv
;

90 
rv
 = 
	`io˘l
(
STDIN_FILENO
, 
NONEXIST_IOCTL
, 
NULL
);

91 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EIOCTL
, "invalid ioctl");

92 
	}
}

95 
	$ã°_io˘l
()

97 
	`ã°_io˘l_fd
();

100 
	`io˘l_badcode
();

101 
	`io˘l_badbuf
();

102 
	}
}

	@user/testbin/badcall/bad_link.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$lök_dú
()

43 
rv
;

44 
rv
 = 
	`lök
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink of .");

46 i‡(
rv
==0) {

48 
	`ªmove
(
TESTDIR
);

50 
	}
}

54 
	$lök_em±y1
()

56 
rv
;

57 
rv
 = 
	`lök
("", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜink ofÉmpty string");

59 
	}
}

63 
	$lök_em±y2
()

65 
rv
;

66 i‡(
	`¸óã_ã°dú
()<0) {

69 
rv
 = 
	`lök
(
TESTDIR
, "");

70 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "hardÜinkÅoÉmpty string");

71 
	`rmdú
(
TESTDIR
);

72 
	}
}

75 
	$ã°_lök
()

77 
	`ã°_lök_∑ths
();

78 
	`lök_dú
();

79 
	`lök_em±y1
();

80 
	`lök_em±y2
();

81 
	}
}

	@user/testbin/badcall/bad_lseek.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$l£ek_fd_devi˚
()

50 
fd
, 
rv
;

52 
fd
 = 
	`›í
("nuŒ:", 
O_RDONLY
);

53 i‡(
fd
<0) {

54 
	`w¨n
("UH-OH: openingÇull: failed");

58 
rv
 = 
	`l£ek
(
fd
, 309, 
SEEK_SET
);

59 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ESPIPE
, "lseek on device");

61 
	`˛o£
(
fd
);

62 
	}
}

66 
	$l£ek_fûe_°dö
()

68 
fd
, 
fd2
, 
rv
, 
°©us
;

69 c⁄° 
¶og™
[] = "Thereáin'tÇo suchÅhingásá freeÜunch";

70 
size_t
 
Àn
 = 
	`°æí
(
¶og™
);

71 
pid_t
 
pid
;

74 
pid
 = 
	`f‹k
();

75 i‡(
pid
<0) {

76 
	`w¨n
("UH-OH: fork failed");

79 i‡(
pid
!=0) {

81 
rv
 = 
	`waôpid
(
pid
, &
°©us
, 0);

82 i‡(
rv
<0) {

83 
	`w¨n
("UH-OH: waitpid failed");

85 i‡(
	`WIFSIGNALED
(
°©us
)) {

86 
	`w¨n
("UH-OH: subprocessÉxited with signal %d",

87 
	`WTERMSIG
(
°©us
));

89 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) != 0) {

90 
	`w¨n
("UH-OH: subprocessÉxited with code %d",

91 
	`WEXITSTATUS
(
°©us
));

98 
fd
 = 
	`›í_ã°fûe
(
NULL
);

99 i‡(
fd
<0) {

100 
	`_exô
(0);

110 
fd2
 = 
	`dup2
(
fd
, 
STDIN_FILENO
);

111 i‡(
fd2
<0) {

112 
	`w¨n
("UH-OH: dup2Åo stdin failed");

113 
	`˛o£
(
fd
);

114 
	`ªmove
(
TESTFILE
);

115 
	`_exô
(0);

117 i‡(
fd2
 !
STDIN_FILENO
) {

118 
	`w¨n
("UH-OH: dup2Ñeturned wrong file handle");

119 
	`˛o£
(
fd
);

120 
	`ªmove
(
TESTFILE
);

121 
	`_exô
(0);

123 
	`˛o£
(
fd
);

125 
rv
 = 
	`wrôe
(
STDIN_FILENO
, 
¶og™
, 
Àn
);

126 i‡(
rv
<0) {

127 
	`w¨n
("UH-OH: wrôêtÿ%†(vü stdöËÁûed", 
TESTFILE
);

128 
	`ªmove
(
TESTFILE
);

129 
	`_exô
(0);

132 i‡(()
rv
 !
Àn
) {

133 
	`w¨nx
("UH-OH: writeÅo %s (via stdin) got short count",

134 
TESTFILE
);

135 
	`ªmove
(
TESTFILE
);

136 
	`_exô
(0);

139 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_SET
);

140 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 1)");

142 
rv
 = 
	`l£ek
(
STDIN_FILENO
, 0, 
SEEK_END
);

143 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 0, "lseek stdin when open on file (try 2)");

145 
	`ªmove
(
TESTFILE
);

146 
	`_exô
(0);

147 
	}
}

151 
	$l£ek_loc_√g©ive
()

153 
fd
, 
rv
;

155 
fd
 = 
	`›í_ã°fûe
(
NULL
);

156 i‡(
fd
<0) {

160 
rv
 = 
	`l£ek
(
fd
, -309, 
SEEK_SET
);

161 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseekÅoÇegative offset");

163 
	`˛o£
(
fd
);

164 
	`ªmove
(
TESTFILE
);

165 
	}
}

169 
	$l£ek_whí˚_övÆ
()

171 
fd
, 
rv
;

173 
fd
 = 
	`›í_ã°fûe
(0);

174 i‡(
fd
<0) {

178 
rv
 = 
	`l£ek
(
fd
, 0, 3594);

179 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "lseek with invalid whence code");

181 
	`˛o£
(
fd
);

182 
	`ªmove
(
TESTFILE
);

183 
	}
}

187 
	$l£ek_loc_∑°eof
()

189 c⁄° *
mesßge
 = "blahblah";

190 
fd
;

191 
off_t
 
pos
;

193 
fd
 = 
	`›í_ã°fûe
(
mesßge
);

194 i‡(
fd
<0) {

198 
pos
 = 
	`l£ek
(
fd
, 5340, 
SEEK_SET
);

199 i‡(
pos
 == -1) {

200 
	`w¨n
("FAILURE:ÜseekÖast EOF failed");

201 
out
;

203 i‡(
pos
 != 5340) {

204 
	`w¨nx
("FAILURE:Ü£ekÅÿ5340 gŸ off£à%ld", (Ë
pos
);

205 
out
;

208 
pos
 = 
	`l£ek
(
fd
, -50, 
SEEK_CUR
);

209 i‡(
pos
 == -1) {

210 
	`w¨n
("FAILURE: small seek beyond EOF failed");

211 
out
;

213 i‡(
pos
 != 5290) {

214 
	`w¨nx
("FAILURE: SEEK_CURÅÿ5290 gŸ off£à%ld", (Ë
pos
);

215 
out
;

218 
pos
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

219 i‡(
pos
 == -1) {

220 
	`w¨n
("FAILURE: seekÅo EOF failed");

221 
out
;

224 i‡(
pos
 !(
off_t
Ë
	`°æí
(
mesßge
)) {

225 
	`w¨nx
("FAILURE: seekÅo EOF got %ld (should be %d)",

226 (Ë
pos
, 
	`°æí
(
mesßge
));

227 
out
;

230 
	`w¨nx
("passed: seekÖast/to EOF");

232 
out
:

233 
	`˛o£
(
fd
);

234 
	`ªmove
(
TESTFILE
);

236 
	}
}

239 
	$ã°_l£ek
()

241 
	`ã°_l£ek_fd
();

243 
	`l£ek_fd_devi˚
();

244 
	`l£ek_fûe_°dö
();

245 
	`l£ek_loc_√g©ive
();

246 
	`l£ek_loc_∑°eof
();

247 
	`l£ek_whí˚_övÆ
();

248 
	}
}

	@user/testbin/badcall/bad_mkdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$mkdú_dŸ
()

50 
rv
;

52 
rv
 = 
	`mkdú
(".", 0775);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir .");

54 
	}
}

58 
	$mkdú_dŸdŸ
()

60 
rv
;

62 
rv
 = 
	`mkdú
("..", 0775);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EEXIST
, "mkdir ..");

64 
	}
}

68 
	$mkdú_em±y
()

70 
rv
;

71 
rv
 = 
	`mkdú
("", 0775);

72 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "mkdir ofÉmpty string");

73 
	}
}

76 
	$ã°_mkdú
()

78 
	`ã°_mkdú_∑th
();

80 
	`mkdú_dŸ
();

81 
	`mkdú_dŸdŸ
();

82 
	`mkdú_em±y
();

83 
	}
}

	@user/testbin/badcall/bad_open.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$›í_badÊags
()

50 
fd
;

52 
fd
 = 
	`›í
("null:", 309842);

53 
	`ªp‹t_ã°
(
fd
, 
î∫o
, 
EINVAL
, "openÇull: with bad flags");

54 
	}
}

58 
	$›í_em±y
()

60 
rv
;

61 
rv
 = 
	`›í
("", 
O_RDONLY
);

62 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "openÉmpty string");

63 i‡(
rv
>=0) {

64 
	`˛o£
(
rv
);

66 
	}
}

69 
	$ã°_›í
()

71 
	`ã°_›í_∑th
();

73 
	`›í_badÊags
();

74 
	`›í_em±y
();

75 
	}
}

	@user/testbin/badcall/bad_pipe.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$pùe_bad±r
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`pùe
(
±r
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$pùe_u«lig√d
()

60 
fds
[3], 
rv
;

61 *
±r
;

63 
±r
 = (*)&
fds
[0];

64 
±r
++;

66 
rv
 = 
	`pùe
((*)
±r
);

67 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "pipe with unalignedÖointer");

68 
	}
}

71 
	$ã°_pùe
()

73 
	`pùe_bad±r
(
NULL
, "pipe with NULLÖointer");

74 
	`pùe_bad±r
(
INVAL_PTR
, "pipe with invalidÖointer");

75 
	`pùe_bad±r
(
KERN_PTR
, "pipe with kernelÖointer");

77 
	`pùe_u«lig√d
();

78 
	}
}

	@user/testbin/badcall/bad_read.c

34 
	~"ã°.h
"

37 
	$ã°_ªad
()

39 
	`ã°_ªad_fd
();

40 
	`ã°_ªad_buf
();

41 
	}
}

	@user/testbin/badcall/bad_readlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ªadlök_fûe
()

43 
buf
[128];

44 
fd
, 
rv
;

46 
fd
 = 
	`›í_ã°fûe
("the question containsán invalidássumption");

47 i‡(
fd
<0) {

50 
	`˛o£
(
fd
);

51 
rv
 = 
	`ªadlök
(
TESTFILE
, 
buf
, (buf));

52 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "readlink on file");

53 
	`ªmove
(
TESTFILE
);

54 
	}
}

58 
	$ªadlök_dú
()

60 
buf
[128];

61 
rv
;

62 
rv
 = 
	`ªadlök
(".", 
buf
, (buf));

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "readlink on .");

64 
	}
}

68 
	$ªadlök_em±y
()

70 
buf
[128];

71 
rv
;

72 
rv
 = 
	`ªadlök
("", 
buf
, (buf));

73 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "readlink onÉmpty string");

74 
	}
}

77 
	$ã°_ªadlök
()

79 
	`ã°_ªadlök_∑th
();

80 
	`ã°_ªadlök_buf
();

82 
	`ªadlök_fûe
();

83 
	`ªadlök_dú
();

84 
	`ªadlök_em±y
();

85 
	}
}

	@user/testbin/badcall/bad_reboot.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªboŸ_badÊags
()

50 
rv
;

52 
	`w¨nx
("NOTICE: ifÅhis killsÅhe system, it'sá failure.");

53 
rv
 = 
	`ªboŸ
(15353);

54 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "reboot with invalid flags");

55 
	}
}

58 
	$ã°_ªboŸ
()

60 
	`ªboŸ_badÊags
();

61 
	}
}

	@user/testbin/badcall/bad_remove.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$ªmove_dú
()

50 
rv
;

52 i‡(
	`¸óã_ã°dú
() < 0) {

56 
rv
 = 
	`ªmove
(
TESTDIR
);

57 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EISDIR
, "remove() oná directory");

58 
	`rmdú
(
TESTDIR
);

59 
	}
}

63 
	$ªmove_dŸ
()

65 
rv
;

66 
rv
 = 
	`ªmove
(".");

67 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on .");

68 
	}
}

72 
	$ªmove_dŸdŸ
()

74 
rv
;

75 
rv
 = 
	`ªmove
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() on ..");

77 
	}
}

81 
	$ªmove_em±y
()

83 
rv
;

84 
rv
 = 
	`ªmove
("");

85 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "remove() onÉmpty string");

86 
	}
}

89 
	$ã°_ªmove
()

91 
	`ã°_ªmove_∑th
();

93 
	`ªmove_dú
();

94 
	`ªmove_dŸ
();

95 
	`ªmove_dŸdŸ
();

96 
	`ªmove_em±y
();

97 
	}
}

	@user/testbin/badcall/bad_rename.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$ª«me_dŸ
()

43 
rv
;

44 
rv
 = 
	`ª«me
(".", 
TESTDIR
);

45 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename .");

46 i‡(
rv
==0) {

48 
	`ª«me
(
TESTDIR
, ".");

50 
	}
}

54 
	$ª«me_dŸdŸ
()

56 
rv
;

57 
rv
 = 
	`ª«me
("..", 
TESTDIR
);

58 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rename ..");

59 i‡(
rv
==0) {

61 
	`ª«me
(
TESTDIR
, "..");

63 
	}
}

67 
	$ª«me_em±y1
()

69 
rv
;

70 
rv
 = 
	`ª«me
("", 
TESTDIR
);

71 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÉmpty string");

72 i‡(
rv
==0) {

74 
	`ª«me
(
TESTDIR
, TESTDIR "-foo");

76 
	}
}

80 
	$ª«me_em±y2
()

82 
rv
;

83 i‡(
	`¸óã_ã°dú
()<0) {

86 
rv
 = 
	`ª«me
(
TESTDIR
, "");

87 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EISDIR
, 
EINVAL
, "renameÅoÉmpty string");

88 
	`rmdú
(
TESTDIR
);

89 
	}
}

92 
	$ã°_ª«me
()

94 
	`ã°_ª«me_∑ths
();

96 
	`ª«me_dŸ
();

97 
	`ª«me_dŸdŸ
();

98 
	`ª«me_em±y1
();

99 
	`ª«me_em±y2
();

100 
	}
}

	@user/testbin/badcall/bad_rmdir.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$rmdú_fûe
()

50 
rv
;

51 i‡(
	`¸óã_ã°fûe
()<0) {

54 
rv
 = 
	`rmdú
(
TESTFILE
);

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
ENOTDIR
, "rmdirá file");

56 
	`ªmove
(
TESTFILE
);

57 
	}
}

61 
	$rmdú_dŸ
()

63 
rv
;

65 
rv
 = 
	`rmdú
(".");

66 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdir .");

67 
	}
}

71 
	$rmdú_dŸdŸ
()

73 
rv
;

75 
rv
 = 
	`rmdú
("..");

76 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
ENOTEMPTY
, "rmdir ..");

77 
	}
}

81 
	$rmdú_em±y
()

83 
rv
;

84 
rv
 = 
	`rmdú
("");

85 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "rmdirÉmpty string");

86 
	}
}

89 
	$ã°_rmdú
()

91 
	`ã°_rmdú_∑th
();

93 
	`rmdú_fûe
();

94 
	`rmdú_dŸ
();

95 
	`rmdú_dŸdŸ
();

96 
	`rmdú_em±y
();

97 
	}
}

	@user/testbin/badcall/bad_sbrk.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$åy_sbrk
(
vÆ
)

50 *
rv
;

51 
rv
 = 
	`sbrk
(
vÆ
);

52 i‡(
rv
==(*)-1) {

53  
î∫o
;

56 
	}
}

60 
	$íf‹˚_sbrk
(
vÆ
, c⁄° *
desc
, 
îr
)

62 
e
;

64 
e
 = 
	`åy_sbrk
(
vÆ
);

65 i‡(
e
 !
îr
 &&É==0) {

66 
	`w¨nx
("FAILURE: sbrk(%s):Çÿîr‹", 
desc
);

69 i‡(
e
 !
îr
) {

70 
î∫o
 = 
e
;

71 
	`w¨n
("FAILURE: sbrk(%s): wr⁄gÉº‹", 
desc
);

74 
	`w¨nx
("∑s£d: sbrk(%s)", 
desc
);

75 
	}
}

79 
	$sbrk_bigpos
()

81 
	`íf‹˚_sbrk
(4096*1024*256, "hugêposôive", 
ENOMEM
);

82 
	}
}

86 
	$sbrk_big√g
()

88 
	`íf‹˚_sbrk
(-4096*1024*256, "hugê√g©ive", 
EINVAL
);

89 
	}
}

93 
	$sbrk_√g
()

95 
	`íf‹˚_sbrk
(-8192, "too-œrgê√g©ive", 
EINVAL
);

96 
	}
}

100 
	$sbrk_u«lig√dpos
()

102 
	`åy_sbrk
(17)) {

104 
EINVAL
:

105 
	`w¨nx
("passed: sbrk(unalignedÖositive)");

108 
	`w¨n
("FAILURE: sbrk(unalignedÖositive): wrongÉrror");

111 
	}
}

115 
	$sbrk_u«lig√d√g
()

117 
	`åy_sbrk
(-17)) {

119 
EINVAL
:

120 
	`w¨nx
("passed: sbrk(unalignedÇegative)");

123 
	`w¨n
("FAILURE: sbrk(unalignedÇegative): wrongÉrror");

126 
	}
}

129 
	$ã°_sbrk
()

131 
	`sbrk_√g
();

132 
	`sbrk_bigpos
();

133 
	`sbrk_big√g
();

134 
	`sbrk_u«lig√dpos
();

135 
	`sbrk_u«lig√d√g
();

136 
	}
}

	@user/testbin/badcall/bad_stat.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

50 
	$badbuf_f°©
(
°©
 *
sb
)

52  
	`f°©
(
STDIN_FILENO
, 
sb
);

53 
	}
}

57 
	$badbuf_l°©
(
°©
 *
sb
)

59  
	`l°©
("nuŒ:", 
sb
);

60 
	}
}

64 
	$badbuf_°©
(
°©
 *
sb
)

66  
	`°©
("nuŒ:", 
sb
);

67 
	}
}

71 
comm⁄_badbuf
((*
°©func
)(
°©
 *), *
±r
,

72 c⁄° *
ˇŒ
, c⁄° *
±rdesc
)

74 
rv
;

75 
mydesc
[128];

77 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†buf", 
ˇŒ
, 
±rdesc
);

78 
rv
 = 
	`°©func
(
±r
);

79 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

80 
	}
}

84 
™y_badbuf
((*
°©func
)(
°©
 *), c⁄° *
ˇŒ
)

86 
	`comm⁄_badbuf
(
°©func
, 
NULL
, 
ˇŒ
, "NULL");

87 
	`comm⁄_badbuf
(
°©func
, 
INVAL_PTR
, 
ˇŒ
, "invalidÖointer");

88 
	`comm⁄_badbuf
(
°©func
, 
KERN_PTR
, 
ˇŒ
, "kernelÖointer");

89 
	}
}

95 
™y_em±y
((*
°©func
)(c⁄° *, 
°©
 *), c⁄° *
ˇŒ
)

97 
°©
 
sb
;

98 
desc
[128];

99 
rv
;

101 
	`¢¥ötf
(
desc
, (desc), "%†⁄Ém±y såög", 
ˇŒ
);

102 
rv
 = 
	`°©func
("", &
sb
);

103 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, 
desc
);

104 
	}
}

109 
	$ã°_f°©
()

111 
	`ã°_f°©_fd
();

112 
	`™y_badbuf
(
badbuf_f°©
, "fstat");

113 
	}
}

116 
	$ã°_l°©
()

118 
	`ã°_l°©_∑th
();

119 
	`™y_em±y
(
l°©
, "stat");

120 
	`™y_badbuf
(
badbuf_l°©
, "lstat");

121 
	}
}

124 
	$ã°_°©
()

126 
	`ã°_°©_∑th
();

127 
	`™y_em±y
(
°©
, "stat");

128 
	`™y_badbuf
(
badbuf_°©
, "stat");

129 
	}
}

	@user/testbin/badcall/bad_symlink.c

34 
	~<uni°d.h
>

35 
	~<î∫o.h
>

37 
	~"ã°.h
"

41 
	$symlök_em±y1
()

43 
rv
;

44 
rv
 = 
	`symlök
("", 
TESTLINK
);

45 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 0, 
EINVAL
, "symlink ->Émpty string");

46 
	`ªmove
(
TESTLINK
);

47 
	}
}

51 
	$symlök_em±y2
()

53 
rv
;

54 
rv
 = 
	`symlök
("foo", "");

55 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "symlinkÇamedÉmpty string");

56 
	}
}

59 
	$ã°_symlök
()

61 
	`ã°_symlök_∑ths
();

62 
	`symlök_em±y1
();

63 
	`symlök_em±y2
();

64 
	}
}

	@user/testbin/badcall/bad_time.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

43 
	~"c⁄fig.h
"

44 
	~"ã°.h
"

48 
	$time_bad£cs
(*
±r
, c⁄° *
desc
)

50 
rv
;

52 
rv
 = 
	`__time
(
±r
, 
NULL
);

53 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

54 
	}
}

58 
	$time_badn£cs
(*
±r
, c⁄° *
desc
)

60 
rv
;

62 
rv
 = 
	`__time
(
NULL
, 
±r
);

63 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

64 
	}
}

67 
	$ã°_time
()

69 
	`time_bad£cs
(
INVAL_PTR
, "__time with invalid secondsÖointer");

70 
	`time_bad£cs
(
KERN_PTR
, "__time with kernel secondsÖointer");

72 
	`time_badn£cs
(
INVAL_PTR
, "__time with invalidÇsecsÖointer");

73 
	`time_badn£cs
(
KERN_PTR
, "__time with kernelÇsecsÖointer");

74 
	}
}

	@user/testbin/badcall/bad_waitpid.c

34 
	~<sys/ty≥s.h
>

35 
	~<°dlib.h
>

36 
	~<uni°d.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

40 
	~"c⁄fig.h
"

41 
	~"ã°.h
"

45 
	$waô_badpid
(
pid
, c⁄° *
desc
)

47 
rv
, 
x
;

48 
rv
 = 
	`waôpid
(
pid
, &
x
, 0);

49 
	`ªp‹t_ã°2
(
rv
, 
î∫o
, 
EINVAL
, 
NOSUCHPID_ERROR
, 
desc
);

50 
	}
}

54 
	$waô_bad°©us
(*
±r
, c⁄° *
desc
)

56 
rv
, 
pid
, 
x
;

58 
pid
 = 
	`f‹k
();

59 i‡(
pid
<0) {

60 
	`w¨n
("UH-OH: fork failed");

63 i‡(
pid
==0) {

64 
	`exô
(0);

67 
rv
 = 
	`waôpid
(
pid
, 
±r
, 0);

68 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
desc
);

69 
	`waôpid
(
pid
, &
x
, 0);

70 
	}
}

74 
	$waô_u«lig√d
()

76 
rv
, 
pid
, 
x
;

77 
°©us
[2];

78 *
±r
;

80 
pid
 = 
	`f‹k
();

81 i‡(
pid
<0) {

82 
	`w¨n
("UH-OH: fork failed");

85 i‡(
pid
==0) {

86 
	`exô
(0);

90 
±r
 = (*)(&
°©us
[0]);

93 
±r
++;

95 
rv
 = 
	`waôpid
(
pid
, (*)
±r
, 0);

96 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait with unaligned status");

97 i‡(
rv
<0) {

98 
	`waôpid
(
pid
, &
x
, 0);

100 
	}
}

104 
	$waô_badÊags
()

106 
rv
, 
x
, 
pid
;

108 
pid
 = 
	`f‹k
();

109 i‡(
pid
<0) {

110 
	`w¨n
("UH-OH: fork failed");

113 i‡(
pid
==0) {

114 
	`exô
(0);

117 
rv
 = 
	`waôpid
(
pid
, &
x
, 309429);

118 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EINVAL
, "wait with bad flags");

119 
	`waôpid
(
pid
, &
x
, 0);

120 
	}
}

124 
	$waô_£lf
()

126 
rv
, 
x
;

127 
rv
 = 
	`waôpid
(
	`gëpid
(), &
x
, 0);

128 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait for self");

129 
	}
}

133 
	$waô_∑ª¡
()

135 
mypid
, 
chûdpid
, 
rv
, 
x
;

137 
mypid
 = 
	`gëpid
();

138 
chûdpid
 = 
	`f‹k
();

139 i‡(
chûdpid
<0) {

140 
	`w¨n
("UH-OH: can't fork");

143 i‡(
chûdpid
==0) {

145 
rv
 = 
	`waôpid
(
mypid
, &
x
, 0);

146 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarent (from child)");

147 
	`_exô
(0);

149 
rv
 = 
	`waôpid
(
chûdpid
, &
x
, 0);

150 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "wait forÖarentÅest (fromÖarent)");

151 
	}
}

157 
	$waô_siblögs_chûd
()

159 
pids
[2], 
mypid
, 
Ÿhîpid
, 
fd
, 
rv
, 
x
;

161 
mypid
 = 
	`gëpid
();

163 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDONLY
);

164 i‡(
fd
<0) {

165 
	`w¨n
("UH-OH: childÖrocess (pid %d) can't open %s",

166 
mypid
, 
TESTFILE
);

175 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

176 i‡(
rv
<0) {

177 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÜseekÉrror",

178 
mypid
);

181 
rv
 = 
	`ªad
(
fd
, 
pids
, (pids));

182 i‡(
rv
<0) {

183 
	`w¨n
("UH-OH: childÖrocess (pid %d)ÑeadÉrror",

184 
mypid
);

187 } 
rv
 < ()(
pids
));

189 i‡(
mypid
==
pids
[0]) {

190 
Ÿhîpid
 = 
pids
[1];

192 i‡(
mypid
==
pids
[1]) {

193 
Ÿhîpid
 = 
pids
[0];

196 
	`w¨n
("UH-OH: childÖrocess (pid %d) got garbage in comm file",

197 
mypid
);

200 
	`˛o£
(
fd
);

202 
rv
 = 
	`waôpid
(
Ÿhîpid
, &
x
, 0);

203 
	`ªp‹t_survivÆ
(
rv
, 
î∫o
, "sibling wait");

204 
	}
}

208 
	$waô_siblögs
()

210 
pids
[2], 
fd
, 
rv
, 
x
;

214 
fd
 = 
	`›í_ã°fûe
(
NULL
);

215 i‡(
fd
<0) {

219 
pids
[0] = 
	`f‹k
();

220 i‡(
pids
[0]<0) {

221 
	`w¨n
("UH-OH: can't fork");

224 i‡(
pids
[0]==0) {

225 
	`˛o£
(
fd
);

226 
	`waô_siblögs_chûd
();

227 
	`_exô
(0);

230 
pids
[1] = 
	`f‹k
();

231 i‡(
pids
[1]<0) {

232 
	`w¨n
("UH-OH: can't fork");

236 i‡(
pids
[1]==0) {

237 
	`˛o£
(
fd
);

238 
	`waô_siblögs_chûd
();

239 
	`_exô
(0);

242 
rv
 = 
	`wrôe
(
fd
, 
pids
, (pids));

243 i‡(
rv
 < 0) {

244 
	`w¨n
("UH-OH: wrôêîr‹ o¿%s", 
TESTFILE
);

248 i‡(
rv
 !()(
pids
)) {

249 
	`w¨nx
("UH-OH: wrôêîr‹ o¿%s: sh‹àcou¡", 
TESTFILE
);

254 
rv
 = 
	`waôpid
(
pids
[0], &
x
, 0);

255 i‡(
rv
<0) {

256 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 0 (pid %d)", 
pids
[0]);

258 
rv
 = 
	`waôpid
(
pids
[1], &
x
, 0);

259 i‡(
rv
<0) {

260 
	`w¨n
("UH-OH:Éº‹ waôög f‹ chûd 1 (pid %d)", 
pids
[1]);

262 
	`w¨nx
("passed: siblings wait forÉach other");

263 
	`˛o£
(
fd
);

264 
	`ªmove
(
TESTFILE
);

265 
	}
}

270 
	$ã°_waôpid
()

272 
	`waô_badpid
(-8, "wait forÖid -8");

273 
	`waô_badpid
(-1, "wait forÖid -1");

274 
	`waô_badpid
(0, "pid zero");

275 
	`waô_badpid
(
NONEXIST_PID
, "nonexistentÖid");

277 
	`waô_bad°©us
(
NULL
, "wait with NULL status");

278 
	`waô_bad°©us
(
INVAL_PTR
, "wait with invalidÖointer status");

279 
	`waô_bad°©us
(
KERN_PTR
, "wait with kernelÖointer status");

281 
	`waô_u«lig√d
();

283 
	`waô_badÊags
();

285 
	`waô_£lf
();

286 
	`waô_∑ª¡
();

287 
	`waô_siblögs
();

288 
	}
}

	@user/testbin/badcall/bad_write.c

34 
	~"ã°.h
"

37 
	$ã°_wrôe
()

39 
	`ã°_wrôe_fd
();

40 
	`ã°_wrôe_buf
();

41 
	}
}

	@user/testbin/badcall/common_buf.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

47 
	gbuf_fd
;

49 
	sbu·e°
 {

50 (*
	m£tup
)();

51 (*
	m›
)(*);

52 (*
	m˛ónup
)();

53 c⁄° *
	m«me
;

60 
	$ªad_£tup
()

62 
buf_fd
 = 
	`›í_ã°fûe
("i doÇotÜike greenÉggsánd ham");

63 i‡(
buf_fd
<0) {

67 
	}
}

71 
	$ªad_badbuf
(*
buf
)

73  
	`ªad
(
buf_fd
, 
buf
, 128);

74 
	}
}

78 
	$ªad_˛ónup
()

80 
	`˛o£
(
buf_fd
);

81 
	`ªmove
(
TESTFILE
);

82 
	}
}

88 
	$wrôe_£tup
()

90 
buf_fd
 = 
	`›í_ã°fûe
(
NULL
);

91 i‡(
buf_fd
<0) {

95 
	}
}

99 
	$wrôe_badbuf
(*
±r
)

101  
	`wrôe
(
buf_fd
, 
±r
, 128);

102 
	}
}

106 
	$wrôe_˛ónup
()

108 
	`˛o£
(
buf_fd
);

109 
	`ªmove
(
TESTFILE
);

110 
	}
}

116 
	$gëdúíåy_£tup
()

118 
buf_fd
 = 
	`›í
(".", 
O_RDONLY
);

119 i‡(
buf_fd
 < 0) {

120 
	`w¨n
("UH-OH: couldn't open .");

124 
	}
}

128 
	$gëdúíåy_badbuf
(*
±r
)

130  
	`gëdúíåy
(
buf_fd
, 
±r
, 1024);

131 
	}
}

135 
	$gëdúíåy_˛ónup
()

137 
	`˛o£
(
buf_fd
);

138 
	}
}

144 
	$ªadlök_£tup
()

146  
	`¸óã_ã°lök
();

147 
	}
}

151 
	$ªadlök_badbuf
(*
buf
)

153  
	`ªadlök
(
TESTLINK
, 
buf
, 168);

154 
	}
}

158 
	$ªadlök_˛ónup
()

160 
	`ªmove
(
TESTLINK
);

161 
	}
}

165 
	$gëcwd_£tup
(Ë{  0; 
	}
}

166 
	$gëcwd_˛ónup
(Ë{
	}
}

170 
	$gëcwd_badbuf
(*
buf
)

172  
	`__gëcwd
(
buf
, 408);

173 
	}
}

179 
	$comm⁄_badbuf
(
bu·e°
 *
öfo
, *
buf
, c⁄° *
bufdesc
)

181 
mydesc
[128];

182 
rv
;

184 
	`¢¥ötf
(
mydesc
, (mydesc), "%s with %s buffer",

185 
öfo
->
«me
, 
bufdesc
);

186 
öfo
->
	`£tup
();

187 
rv
 = 
öfo
->
	`›
(
buf
);

188 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

189 
öfo
->
	`˛ónup
();

190 
	}
}

194 
	$™y_badbuf
(
bu·e°
 *
öfo
)

196 
	`comm⁄_badbuf
(
öfo
, 
NULL
, "NULL");

197 
	`comm⁄_badbuf
(
öfo
, 
INVAL_PTR
, "invalid");

198 
	`comm⁄_badbuf
(
öfo
, 
KERN_PTR
, "kernel-space");

199 
	}
}

203 
	#T
(
ˇŒ
) \

205 
ã°_
##
ˇŒ
##
	`_buf
() \

207 
bu·e°
 
öfo
 = { \

208 
ˇŒ
##
_£tup
, \

209 
ˇŒ
##
_badbuf
, \

210 
ˇŒ
##
_˛ónup
, \

213 
	`™y_badbuf
(&
öfo
); \

214 }

	)

216 
T
(
ªad
);

217 
T
(
wrôe
);

218 
T
(
gëdúíåy
);

219 
T
(
ªadlök
);

220 
T
(
gëcwd
);

	@user/testbin/badcall/common_fds.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

50 
	$ªad_badfd
(
fd
)

52 
buf
[128];

53  
	`ªad
(
fd
, 
buf
, (buf));

54 
	}
}

58 
	$wrôe_badfd
(
fd
)

60 
buf
[128];

61 
	`mem£t
(
buf
, 'a', (buf));

62  
	`wrôe
(
fd
, 
buf
, (buf));

63 
	}
}

68 
	$˛o£_badfd
(
fd
)

70  
	`˛o£
(
fd
);

71 
	}
}

75 
	$io˘l_badfd
(
fd
)

77  
	`io˘l
(
fd
, 0, 
NULL
);

78 
	}
}

82 
	$l£ek_badfd
(
fd
)

84  
	`l£ek
(
fd
, 0, 
SEEK_SET
);

85 
	}
}

89 
	$fsync_badfd
(
fd
)

91  
	`fsync
(
fd
);

92 
	}
}

96 
	$·runˇã_badfd
(
fd
)

98  
	`·runˇã
(
fd
, 60);

99 
	}
}

103 
	$f°©_badfd
(
fd
)

105 
°©
 
sb
;

106  
	`f°©
(
fd
, &
sb
);

107 
	}
}

111 
	$gëdúíåy_badfd
(
fd
)

113 
buf
[32];

114  
	`gëdúíåy
(
fd
, 
buf
, (buf));

115 
	}
}

119 
	$dup2_badfd
(
fd
)

122  
	`dup2
(
fd
, 
CLOSED_FD
+1);

123 
	}
}

127 
	$dup2_˛ónup
()

129 
	`˛o£
(
CLOSED_FD
+1);

130 
	}
}

136 
™y_badfd
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
,

137 
fd
, c⁄° *
fddesc
)

139 
fuŒdesc
[128];

140 
rv
;

142 
	`¢¥ötf
(
fuŒdesc
, (fuŒdesc), "%†usög %s", 
ˇŒ«me
, 
fddesc
);

143 
rv
 = 
	`func
(
fd
);

144 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EBADF
, 
fuŒdesc
);

145 i‡(
˛ónup
) {

146 
	`˛ónup
();

148 
	}
}

152 
ru¡e°
((*
func
)(
fd
), (*
˛ónup
)(), c⁄° *
ˇŒ«me
)

159 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -1, "fd -1");

162 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, -5, "fd -5");

165 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
CLOSED_FD
, "closed fd");

168 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
IMPOSSIBLE_FD
, "impossible fd");

171 #ifde‡
OPEN_MAX


172 
	`™y_badfd
(
func
, 
˛ónup
, 
ˇŒ«me
, 
OPEN_MAX
, "fd OPEN_MAX");

174 
	`w¨nx
("Warning: OPEN_MAXÇot defined,Åest skipped");

176 
	}
}

180 
	#T
(
ˇŒ
) \

182 
ã°_
##
ˇŒ
##
	`_fd
() \

184 
	`ru¡e°
(
ˇŒ
##
_badfd
, 
NULL
, #call); \

185 }

	)

187 
	#TC
(
ˇŒ
) \

189 
ã°_
##
ˇŒ
##
	`_fd
() \

191 
	`ru¡e°
(
ˇŒ
##
_badfd
, cÆl##
_˛ónup
, #call);\

192 }

	)

194 
T
(
ªad
);

195 
T
(
wrôe
);

196 
T
(
˛o£
);

197 
T
(
io˘l
);

198 
T
(
l£ek
);

199 
T
(
fsync
);

200 
T
(
·runˇã
);

201 
T
(
f°©
);

202 
T
(
gëdúíåy
);

203 
TC
(
dup2
);

	@user/testbin/badcall/common_path.c

34 
	~<sys/ty≥s.h
>

35 
	~<sys/°©.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

40 
	~<limôs.h
>

41 
	~<î∫o.h
>

42 
	~<îr.h
>

44 
	~"c⁄fig.h
"

45 
	~"ã°.h
"

49 
	$›í_bad∑th
(c⁄° *
∑th
)

51  
	`›í
(
∑th
, 
O_RDONLY
);

52 
	}
}

56 
	$ªmove_bad∑th
(c⁄° *
∑th
)

58  
	`ªmove
(
∑th
);

59 
	}
}

63 
	$ª«me_bad∑th1
(c⁄° *
∑th
)

65  
	`ª«me
(
∑th
, 
TESTFILE
);

66 
	}
}

70 
	$ª«me_bad∑th2
(c⁄° *
∑th
)

72  
	`ª«me
(
TESTFILE
, 
∑th
);

73 
	}
}

77 
	$lök_bad∑th1
(c⁄° *
∑th
)

79  
	`lök
(
∑th
, 
TESTFILE
);

80 
	}
}

84 
	$lök_bad∑th2
(c⁄° *
∑th
)

86  
	`lök
(
TESTFILE
, 
∑th
);

87 
	}
}

91 
	$mkdú_bad∑th
(c⁄° *
∑th
)

93  
	`mkdú
(
∑th
, 0775);

94 
	}
}

98 
	$rmdú_bad∑th
(c⁄° *
∑th
)

100  
	`rmdú
(
∑th
);

101 
	}
}

105 
	$chdú_bad∑th
(c⁄° *
∑th
)

107  
	`chdú
(
∑th
);

108 
	}
}

112 
	$symlök_bad∑th1
(c⁄° *
∑th
)

114  
	`symlök
(
∑th
, 
TESTFILE
);

115 
	}
}

119 
	$symlök_bad∑th2
(c⁄° *
∑th
)

121  
	`symlök
(
TESTFILE
, 
∑th
);

122 
	}
}

126 
	$ªadlök_bad∑th
(c⁄° *
∑th
)

128 
buf
[128];

129  
	`ªadlök
(
∑th
, 
buf
, (buf));

130 
	}
}

134 
	$l°©_bad∑th
(c⁄° *
«me
)

136 
°©
 
sb
;

137  
	`l°©
(
«me
, &
sb
);

138 
	}
}

142 
	$°©_bad∑th
(c⁄° *
«me
)

144 
°©
 
sb
;

145  
	`°©
(
«me
, &
sb
);

146 
	}
}

152 
comm⁄_bad∑th
((*
func
)(c⁄° *
∑th
), 
mk
, 
rm
, const *path,

153 c⁄° *
ˇŒ
, c⁄° *
∑thdesc
)

155 
mydesc
[128];

156 
rv
;

158 i‡(
mk
) {

159 i‡(
	`¸óã_ã°fûe
()<0) {

164 
	`¢¥ötf
(
mydesc
, (mydesc), "%†wôh %†∑th", 
ˇŒ
, 
∑thdesc
);

165 
rv
 = 
	`func
(
∑th
);

166 
	`ªp‹t_ã°
(
rv
, 
î∫o
, 
EFAULT
, 
mydesc
);

168 i‡(
mk
 || 
rm
) {

169 
	`ªmove
(
TESTFILE
);

171 
	}
}

175 
™y_bad∑th
((*
func
)(c⁄° *
∑th
), c⁄° *
ˇŒ
, 
mk
, 
rm
)

177 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
NULL
, 
ˇŒ
, "NULL");

178 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
INVAL_PTR
, 
ˇŒ
, "invalid-pointer");

179 
	`comm⁄_bad∑th
(
func
, 
mk
, 
rm
, 
KERN_PTR
, 
ˇŒ
, "kernel-pointer");

180 
	}
}

185 
	#T
(
ˇŒ
) \

187 
ã°_
##
ˇŒ
##
	`_∑th
() \

189 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th
, #call, 0, 0); \

190 }

	)

192 
T
(
›í
);

193 
T
(
ªmove
);

194 
T
(
mkdú
);

195 
T
(
rmdú
);

196 
T
(
chdú
);

197 
T
(
ªadlök
);

198 
T
(
°©
);

199 
T
(
l°©
);

202 
	#T2
(
ˇŒ
) \

204 
ã°_
##
ˇŒ
##
	`_∑ths
() \

206 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th1
, #call "(arg1)", 0, 1); \

207 
	`™y_bad∑th
(
ˇŒ
##
_bad∑th2
, #call "(arg2)", 1, 1); \

208 }

	)

210 
T2
(
ª«me
);

211 
T2
(
lök
);

212 
T2
(
symlök
);

	@user/testbin/badcall/config.h

37 #i‡
deföed
(
__mùs__
)

38 
	#KERN_PTR
 ((*)0x80000000Ë

	)

39 
	#INVAL_PTR
 ((*)0x40000000Ë

	)

48 
	#CLOSED_FD
 10

	)

51 
	#IMPOSSIBLE_FD
 1234567890

	)

54 
	#NONEXIST_PID
 34000

	)

57 #ifde‡
ESRCH


58 
	#NOSUCHPID_ERROR
 
ESRCH


	)

60 
	#NOSUCHPID_ERROR
 
EINVAL


	)

64 
	#MAGIC_STATUS
 107

	)

67 
	#NONEXIST_IOCTL
 12345

	)

	@user/testbin/badcall/driver.c

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

35 
	~<uni°d.h
>

36 
	~<î∫o.h
>

37 
	~<îr.h
>

39 
	~"c⁄fig.h
"

40 
	~"ã°.h
"

46 
	$födîr‹
(
rv
, 
îr‹
)

48 i‡(
rv
==-1) {

49  
îr‹
;

54 
	}
}

57 
	$ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
)

60 
î∫o
 = 
	`födîr‹
(
rv
, 
îr‹
);

61 
	`w¨n
("∑s£d: %s", 
desc
);

62 
	}
}

65 
	$ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
)

67 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

69 i‡(
gŸîr‹
 =
right_îr‹
) {

70 
	`w¨nx
("∑s£d: %s", 
desc
);

72 i‡(
gŸîr‹
 =
EUNIMP
 || gŸîr‹ =
ENOSYS
) {

73 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

76 
î∫o
 = 
gŸîr‹
;

77 
	`w¨n
("FAILURE: %s", 
desc
);

79 
	}
}

82 
	$ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
)

84 
gŸîr‹
 = 
	`födîr‹
(
rv
, 
îr‹
);

85 i‡(
gŸîr‹
 =
okîr1
 || gŸîr‹ =
okîr2
) {

86 
	`w¨nx
("∑s£d: %s", 
desc
);

88 i‡(
gŸîr‹
 =
EUNIMP
 || gŸîr‹ =
ENOSYS
) {

89 
	`w¨nx
("------: %†(unim∂emíãd)", 
desc
);

92 
î∫o
 = 
gŸîr‹
;

93 
	`w¨n
("FAILURE: %s", 
desc
);

95 
	}
}

100 
	$›í_ã°fûe
(c⁄° *
°rög
)

102 
fd
, 
rv
;

103 
size_t
 
Àn
;

105 
fd
 = 
	`›í
(
TESTFILE
, 
O_RDWR
|
O_CREAT
|
O_TRUNC
);

106 i‡(
fd
<0) {

107 
	`w¨n
("UH-OH: cª©ög %s: faûed", 
TESTFILE
);

111 i‡(
°rög
) {

112 
Àn
 = 
	`°æí
(
°rög
);

113 
rv
 = 
	`wrôe
(
fd
, 
°rög
, 
Àn
);

114 i‡(
rv
<0) {

115 
	`w¨n
("UH-OH: wrôêtÿ%†Áûed", 
TESTFILE
);

116 
	`˛o£
(
fd
);

117 
	`ªmove
(
TESTFILE
);

120 i‡(()
rv
 !
Àn
) {

121 
	`w¨nx
("UH-OH: wrôêtÿ%†gŸ sh‹àcou¡", 
TESTFILE
);

122 
	`˛o£
(
fd
);

123 
	`ªmove
(
TESTFILE
);

126 
rv
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

127 i‡(
rv
<0) {

128 
	`w¨n
("UH-OH:Ñewöd o‡%†Áûed", 
TESTFILE
);

129 
	`˛o£
(
fd
);

130 
	`ªmove
(
TESTFILE
);

134  
fd
;

135 
	}
}

138 
	$¸óã_ã°fûe
()

140 
fd
, 
rv
;

142 
fd
 = 
	`›í_ã°fûe
(
NULL
);

143 i‡(
fd
<0) {

147 
rv
 = 
	`˛o£
(
fd
);

148 i‡(
rv
<0) {

149 
	`w¨n
("UH-OH: closög %†Áûed", 
TESTFILE
);

154 
	}
}

157 
	$¸óã_ã°dú
()

159 
rv
;

160 
rv
 = 
	`mkdú
(
TESTDIR
, 0775);

161 i‡(
rv
<0) {

162 
	`w¨n
("UH-OH: mkdú %†Áûed", 
TESTDIR
);

166 
	}
}

169 
	$¸óã_ã°lök
()

171 
rv
;

172 
rv
 = 
	`symlök
("bœhbœh", 
TESTLINK
);

173 i‡(
rv
<0) {

174 
	`w¨n
("UH-OH: makög symlök %†Áûed", 
TESTLINK
);

178 
	}
}

184 
	mch
;

185 
	mas°
;

186 c⁄° *
	m«me
;

187 (*
	mf
)();

188 } 
	g›s
[] = {

189 { 'a', 2, "execv", 
ã°_execv
 },

190 { 'b', 2, "waôpid", 
ã°_waôpid
 },

191 { 'c', 2, "›í", 
ã°_›í
 },

192 { 'd', 2, "ªad", 
ã°_ªad
 },

193 { 'e', 2, "wrôe", 
ã°_wrôe
 },

194 { 'f', 2, "˛o£", 
ã°_˛o£
 },

195 { 'g', 0, "ªboŸ", 
ã°_ªboŸ
 },

196 { 'h', 3, "sbrk", 
ã°_sbrk
 },

197 { 'i', 5, "io˘l", 
ã°_io˘l
 },

198 { 'j', 2, "l£ek", 
ã°_l£ek
 },

199 { 'k', 4, "fsync", 
ã°_fsync
 },

200 { 'l', 4, "·runˇã", 
ã°_·runˇã
 },

201 { 'm', 4, "f°©", 
ã°_f°©
 },

202 { 'n', 4, "ªmove", 
ã°_ªmove
 },

203 { 'o', 4, "ª«me", 
ã°_ª«me
 },

204 { 'p', 5, "lök", 
ã°_lök
 },

205 { 'q', 4, "mkdú", 
ã°_mkdú
 },

206 { 'r', 4, "rmdú", 
ã°_rmdú
 },

207 { 's', 2, "chdú", 
ã°_chdú
 },

208 { 't', 4, "gëdúíåy", 
ã°_gëdúíåy
 },

209 { 'u', 5, "symlök", 
ã°_symlök
 },

210 { 'v', 5, "ªadlök", 
ã°_ªadlök
 },

211 { 'w', 2, "dup2", 
ã°_dup2
 },

212 { 'x', 5, "pùe", 
ã°_pùe
 },

213 { 'y', 5, "__time", 
ã°_time
 },

214 { 'z', 2, "__gëcwd", 
ã°_gëcwd
 },

215 { '{', 5, "°©", 
ã°_°©
 },

216 { '|', 5, "l°©", 
ã°_l°©
 },

217 { 0, 0, 
NULL
, NULL }

220 
	#LOWEST
 'a'

	)

221 
	#HIGHEST
 '|'

	)

225 
	$míu
()

227 
i
;

228 
i
=0; 
›s
[i].
«me
; i++) {

229 
	`¥ötf
("[%c] %-24s", 
›s
[
i
].
ch
, ops[i].
«me
);

230 i‡(
i
%2==1) {

231 
	`¥ötf
("\n");

234 i‡(
i
%2==1) {

235 
	`¥ötf
("\n");

237 
	`¥ötf
("[1] %-24s", "asst1");

238 
	`¥ötf
("[2] %-24s\n", "asst2");

239 
	`¥ötf
("[3] %-24s", "asst3");

240 
	`¥ötf
("[4] %-24s\n", "asst4");

241 
	`¥ötf
("[*] %-24s", "all");

242 
	`¥ötf
("[!] %-24s\n", "quit");

243 
	}
}

247 
	$runô
(
›
)

249 
i
, 
k
;

251 i‡(
›
=='!') {

252 
	`exô
(0);

255 i‡(
›
=='?') {

256 
	`míu
();

260 i‡(
›
=='*') {

261 
i
=0; 
›s
[i].
«me
; i++) {

262 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

263 
›s
[
i
].
	`f
();

268 i‡(
›
>='1' && op <= '4') {

269 
k
 = 
›
-'0';

270 
i
=0; 
›s
[i].
«me
; i++) {

271 i‡(
›s
[
i
].
as°
 <
k
) {

272 
	`¥ötf
("[%s]\n", 
›s
[
i
].
«me
);

273 
›s
[
i
].
	`f
();

279 i‡(
›
 < 
LOWEST
 || o∞> 
HIGHEST
) {

280 
	`¥ötf
("InvÆidÑeque° %c\n", 
›
);

284 
›s
[
›
-'a'].
	`f
();

285 
	}
}

288 
	$maö
(
¨gc
, **
¨gv
)

290 
›
, 
i
, 
j
;

292 
	`¥ötf
("[%c-%c, 1-4, *, ?=míu, !=quô]\n", 
LOWEST
, 
HIGHEST
);

294 i‡(
¨gc
 > 1) {

295 
i
=1; i<
¨gc
; i++) {

296 
j
=0; 
¨gv
[
i
][j]; j++) {

297 
	`¥ötf
("Choose: %c\n",

298 
¨gv
[
i
][
j
]);

299 
	`runô
(
¨gv
[
i
][
j
]);

304 
	`míu
();

306 
	`¥ötf
("Choose: ");

307 
›
 = 
	`gëch¨
();

308 i‡(
›
==
EOF
) {

311 
	`¥ötf
("%c\n", 
›
);

312 
	`runô
(
›
);

317 
	}
}

	@user/testbin/badcall/test.h

30 
	#TESTFILE
 "badˇŒfûe"

	)

31 
	#TESTDIR
 "badˇŒdú"

	)

32 
	#TESTLINK
 "badˇŒlök"

	)

35 
ªp‹t_survivÆ
(
rv
, 
îr‹
, c⁄° *
desc
);

36 
ªp‹t_ã°
(
rv
, 
îr‹
, 
right_îr‹
, c⁄° *
desc
);

37 
ªp‹t_ã°2
(
rv
, 
îr‹
, 
okîr1
, 
okîr2
, c⁄° *
desc
);

38 
›í_ã°fûe
(c⁄° *
°r
);

39 
¸óã_ã°fûe
();

40 
¸óã_ã°dú
();

41 
¸óã_ã°lök
();

44 
ã°_ªad_buf
();

45 
ã°_wrôe_buf
();

46 
ã°_gëdúíåy_buf
();

47 
ã°_gëcwd_buf
();

48 
ã°_ªadlök_buf
();

51 
ã°_ªad_fd
();

52 
ã°_wrôe_fd
();

53 
ã°_˛o£_fd
();

54 
ã°_io˘l_fd
();

55 
ã°_l£ek_fd
();

56 
ã°_fsync_fd
();

57 
ã°_·runˇã_fd
();

58 
ã°_f°©_fd
();

59 
ã°_gëdúíåy_fd
();

60 
ã°_dup2_fd
();

63 
ã°_›í_∑th
();

64 
ã°_ªmove_∑th
();

65 
ã°_ª«me_∑ths
();

66 
ã°_lök_∑ths
();

67 
ã°_mkdú_∑th
();

68 
ã°_rmdú_∑th
();

69 
ã°_chdú_∑th
();

70 
ã°_symlök_∑ths
();

71 
ã°_ªadlök_∑th
();

72 
ã°_°©_∑th
();

73 
ã°_l°©_∑th
();

76 
ã°_execv
();

77 
ã°_waôpid
();

78 
ã°_›í
();

79 
ã°_ªad
();

80 
ã°_wrôe
();

81 
ã°_˛o£
();

82 
ã°_ªboŸ
();

83 
ã°_sbrk
();

84 
ã°_io˘l
();

85 
ã°_l£ek
();

86 
ã°_fsync
();

87 
ã°_·runˇã
();

88 
ã°_f°©
();

89 
ã°_ªmove
();

90 
ã°_ª«me
();

91 
ã°_lök
();

92 
ã°_mkdú
();

93 
ã°_rmdú
();

94 
ã°_chdú
();

95 
ã°_gëdúíåy
();

96 
ã°_symlök
();

97 
ã°_ªadlök
();

98 
ã°_dup2
();

99 
ã°_pùe
();

100 
ã°_time
();

101 
ã°_gëcwd
();

102 
ã°_°©
();

103 
ã°_l°©
();

	@user/testbin/bigfile/bigfile.c

39 
	~<°dlib.h
>

40 
	~<°dio.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<îr.h
>

45 
	gbuf„r
[100];

48 
	$maö
(
¨gc
, *
¨gv
[])

50 c⁄° *
fûíame
;

51 
i
, 
size
;

52 
fûeid
;

53 
Àn
;

55 i‡(
¨gc
 != 3) {

56 
	`îrx
(1, "Usage: bigfile <filename> <size>");

59 
fûíame
 = 
¨gv
[1];

60 
size
 = 
	`©oi
(
¨gv
[2]);

62 
	`¥ötf
("Cª©ögá fûêo‡sizê%d\n", 
size
);

64 
fûeid
 = 
	`›í
(
fûíame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
);

65 i‡(
fûeid
 < 0) {

66 
	`îr
(1, "%s: cª©e", 
fûíame
);

69 
i
=0;

70 
i
<
size
) {

71 
	`¢¥ötf
(
buf„r
, (buf„r), "%-10d", 
i
);

72 
Àn
 = 
	`wrôe
(
fûeid
, 
buf„r
, 
	`°æí
(buffer));

73 i‡(
Àn
<0) {

74 
	`îr
(1, "%s: wrôe", 
fûíame
);

76 
i
 +
Àn
;

79 
	`˛o£
(
fûeid
);

82 
	}
}

	@user/testbin/conman/conman.c

37 
	~<uni°d.h
>

38 
	~<îr.h
>

41 
	$maö
() {

42 
ch
=0;

43 
Àn
;

45 
ch
!='q') {

46 
Àn
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

47 i‡(
Àn
 < 0) {

48 
	`îr
(1, "stdin:Ñead");

50 i‡(
Àn
==0) {

54 
	`wrôe
(
STDOUT_FILENO
, &
ch
, 1);

57 
	}
}

	@user/testbin/crash/crash.c

44 
	~<°dio.h
>

45 
	~<°döt.h
>

46 
	~<uni°d.h
>

47 
	~<îr.h
>

49 #i‡
deföed
(
__mùs__
)

50 
	#KERNEL_ADDR
 0x80000000

	)

51 
	#INVAL_ADDR
 0x40000000

	)

52 
	#INSN_TYPE
 
uöt32_t


	)

53 
	#INVAL_INSN
 0x0000003f

	)

58 (*
	tfunc
)();

62 
	$ªad_‰om_nuŒ
()

64 *
nuŒ
 = 
NULL
;

65 vﬁ©ûê
x
;

66 
x
 = *
nuŒ
;

67 
	}
}

71 
	$ªad_‰om_övÆ
()

73 *
±r
 = (*Ë
INVAL_ADDR
;

74 vﬁ©ûê
x
;

75 
x
 = *
±r
;

76 
	}
}

80 
	$ªad_‰om_kî√l
()

82 *
±r
 = (*Ë
KERNEL_ADDR
;

83 vﬁ©ûê
x
;

84 
x
 = *
±r
;

85 
	}
}

89 
	$wrôe_to_nuŒ
()

91 *
nuŒ
 = 
NULL
;

92 *
nuŒ
 = 6;

93 
	}
}

97 
	$wrôe_to_övÆ
()

99 *
±r
 = (*Ë
INVAL_ADDR
;

100 *
±r
 = 8;

101 
	}
}

105 
	$wrôe_to_code
()

107 
INSN_TYPE
 *
x
 = (INSN_TYPE *)
wrôe_to_code
;

108 *
x
 = 
INVAL_INSN
;

109 
	}
}

113 
	$wrôe_to_kî√l
()

115 *
±r
 = (*Ë
KERNEL_ADDR
;

116 *
±r
 = 8;

117 
	}
}

121 
	$jump_to_nuŒ
()

123 
func
 
f
 = 
NULL
;

124 
	`f
();

125 
	}
}

129 
	$jump_to_övÆ
()

131 
func
 
f
 = (funcË
INVAL_ADDR
;

132 
	`f
();

133 
	}
}

137 
	$jump_to_kî√l
()

139 
func
 
f
 = (funcË
KERNEL_ADDR
;

140 
	`f
();

141 
	}
}

146 
	$ûÀgÆ_ö°ru˘i⁄
()

148 #i‡
	`deföed
(
__mùs__
)

149 
	`asm
(".long 0x0000003f");

153 
	}
}

157 
	$Æignmít_îr‹
()

159 
x
;

160 *
±r
 = &
x
;

161 *
bad±r
 = (*)(((*)
±r
)+1);

163 vﬁ©ûê
j
;

164 
j
 = *
bad±r
;

165 
	}
}

169 
	$divide_by_zîo
()

171 vﬁ©ûê
x
 = 6;

172 vﬁ©ûê
z
 = 0;

173 vﬁ©ûê
a
;

175 
a
 = 
x
/
z
;

176 
	}
}

180 
	$mod_by_zîo
()

182 vﬁ©ûê
x
 = 6;

183 vﬁ©ûê
z
 = 0;

184 vﬁ©ûê
a
;

186 
a
 = 
x
%
z
;

187 
	}
}

191 
	$ªcur£_öf
()

193 vﬁ©ûê
buf
[16];

194 
buf
[0] = 0;

195 
	`ªcur£_öf
();

196 
buf
[0] = 1;

197 
	}
}

202 
	mch
;

203 c⁄° *
	m«me
;

204 
func
 
	mf
;

205 } 
	g›s
[] = {

206 { 'a', "ªad from NULL", 
ªad_‰om_nuŒ
 },

207 { 'b', "ªad from invÆidáddªss", 
ªad_‰om_övÆ
 },

208 { 'c', "ªad from kî√»addªss", 
ªad_‰om_kî√l
 },

209 { 'd', "wrôêtÿNULL", 
wrôe_to_nuŒ
 },

210 { 'e', "wrôêtÿövÆidáddªss", 
wrôe_to_övÆ
 },

211 { 'f', "wrôêtÿcodê£gmít", 
wrôe_to_code
 },

212 { 'g', "wrôêtÿkî√»addªss", 
wrôe_to_kî√l
 },

213 { 'h', "jum∞tÿNULL", 
jump_to_nuŒ
 },

214 { 'i', "jum∞tÿövÆidáddªss", 
jump_to_övÆ
 },

215 { 'j', "jum∞tÿkî√»addªss", 
jump_to_kî√l
 },

216 { 'k', "Æignmíàîr‹", 
Æignmít_îr‹
 },

217 { 'l', "ûÀgÆ in°ru˘i⁄", 
ûÀgÆ_ö°ru˘i⁄
 },

218 { 'm', "dividêby zîo", 
divide_by_zîo
 },

219 { 'n', "mod by zîo", 
mod_by_zîo
 },

220 { 'o', "Recur£ inföôñy", 
ªcur£_öf
 },

221 { 0, 
NULL
, NULL }

225 
	$maö
(
¨gc
, **
¨gv
)

227 
›
, 
i
, 
°©us
;

228 
pid_t
 
pid
;

230 i‡(
¨gc
 == 2) {

231 
›
 = 
¨gv
[1][0];

234 
i
=0; 
›s
[i].
«me
; i++) {

235 
	`¥ötf
("[%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

237 
	`¥ötf
("[*] RunÉverything (in subprocesses)\n");

238 
	`¥ötf
("Note: [f] mayÇot causeánÉxception on some "

241 
	`¥ötf
("Choose: ");

242 
›
 = 
	`gëch¨
();

245 i‡(
›
=='*') {

246 
i
=0; 
›s
[i].
«me
; i++) {

247 
	`¥ötf
("Ru¬ög: [%c] %s\n", 
›s
[
i
].
ch
, ops[i].
«me
);

248 
pid
 = 
	`f‹k
();

249 i‡(
pid
<0) {

251 
	`w¨n
("fork");

253 i‡(
pid
==0) {

255 
›s
[
i
].
	`f
();

256 
	`¥ötf
("I wasn't killed -Åest fails!\n");

257 
	`_exô
(1);

259 
	`waôpid
(
pid
, &
°©us
, 0);

260 i‡(
	`WIFSIGNALED
(
°©us
)) {

261 
	`¥ötf
("Sig«»%d\n", 
	`WTERMSIG
(
°©us
));

264 
	`¥ötf
("Exô %d\n", 
	`WEXITSTATUS
(
°©us
));

270 
›s
[
›
-'a'].
	`f
();

272 
	`¥ötf
("I wasn't killed -Åest fails!\n");

276 
	}
}

	@user/testbin/ctest/ctest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

47 
	#SIZE
 (1024*1024/(
íåy
))

	)

48 
	#DEFAULT
 477

	)

50 
	síåy
 {

51 
íåy
 *
	me
;

54 
íåy
 
	g¨øy
[
SIZE
];

57 
	$maö
(
¨gc
, **
¨gv
)

59 vﬁ©ûê
íåy
 *
e
;

60 
i
, 
°ride
;

62 
°ride
 = 
DEFAULT
;

63 i‡(
¨gc
 == 2) {

64 
°ride
 = 
	`©oi
(
¨gv
[1]);

66 i‡(
°ride
 <0 || 
¨gc
 > 2) {

67 
	`¥ötf
("Usage: ctest [stridesize]\n");

68 
	`¥ötf
(" stridesize shouldÇot beá multiple of 2.\n");

72 
	`¥ötf
("Sèπög cã°: såidê%d\n", 
°ride
);

81 
i
=0; i<
SIZE
; i++) {

82 
¨øy
[
i
].
e
 = &¨øy[(i+
°ride
Ë% 
SIZE
];

91 
e
 = &
¨øy
[0];

92 
i
=0; i<
SIZE
; i++) {

93 i‡(
i
 % 
°ride
 == 0) {

94 
	`putch¨
('.');

96 
e
 =É->e;

99 
	`¥ötf
("\nDone!\n");

101 
	}
}

	@user/testbin/dirconc/dirconc.c

37 
	~<sys/ty≥s.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/°©.h
>

40 
	~<î∫o.h
>

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

44 
	~<°d¨g.h
>

45 
	~<°rög.h
>

47 
	#NTRIES
 100

	)

48 
	#NPROCS
 5

	)

50 
	#TESTDIR
 "dúc⁄c"

	)

51 
	#NNAMES
 4

	)

52 
	#NAMESIZE
 32

	)

56 c⁄° *c⁄° 
	g«mes
[
NNAMES
] = {

65 
	$choo£_«me
(*
buf
, 
size_t
 
Àn
)

67 c⁄° *
a
, *
b
, *
c
;

69 
a
 = 
«mes
[
	`øndom
()%
NNAMES
];

70 i‡(
	`øndom
()%2==0) {

71 
	`¢¥ötf
(
buf
, 
Àn
, "%s", 
a
);

74 
b
 = 
«mes
[
	`øndom
()%
NNAMES
];

75 i‡(
	`øndom
()%2==0) {

76 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s", 
a
, 
b
);

79 
c
 = 
«mes
[
	`øndom
()%
NNAMES
];

80 
	`¢¥ötf
(
buf
, 
Àn
, "%s/%s/%s", 
a
, 
b
, 
c
);

81 
	}
}

91 #ifde‡
__GNUC__


92 
__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 1, 2)))

94 
	$ßy
(c⁄° *
fmt
, ...)

96 
buf
[512];

97 
va_li°
 
≠
;

98 
	`va_°¨t
(
≠
, 
fmt
);

99 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

100 
	`va_íd
(
≠
);

101 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

102 
	}
}

108 
	$d‹íame
(c⁄° *
«me1
, c⁄° *
«me2
)

110 i‡(
	`ª«me
(
«me1
, 
«me2
) < 0) {

111 
î∫o
) {

112 
ENOENT
:

113 
ENOTEMPTY
:

114 
EINVAL
:

117 
	`ßy
("pid %d:Ñename %s -> %s: %s\n",

118 
	`gëpid
(), 
«me1
, 
«me2
, 
	`°ªº‹
(
î∫o
));

122 
	}
}

126 
	$domkdú
(c⁄° *
«me
)

128 i‡(
	`mkdú
(
«me
, 0775)<0) {

129 
î∫o
) {

130 
ENOENT
:

131 
EEXIST
:

134 
	`ßy
("pid %d: mkdir %s: %s\n",

135 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

139 
	}
}

143 
	$d‹mdú
(c⁄° *
«me
)

145 i‡(
	`rmdú
(
«me
)<0) {

146 
î∫o
) {

147 
ENOENT
:

148 
ENOTEMPTY
:

151 
	`ßy
("pid %d:Ñmdir %s: %s\n",

152 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

156 
	}
}

160 
	$˛ónup_rmdú
(c⁄° *
«me
)

162 i‡(
	`rmdú
(
«me
)<0) {

163 
î∫o
) {

164 
ENOENT
:

167 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

168 
	`gëpid
(), 
«me
, 
	`°ªº‹
(
î∫o
));

172 
	}
}

178 
	$ª«me_¥oc
()

180 
«me1
[
NAMESIZE
], 
«me2
[NAMESIZE];

181 
˘
;

183 
˘
=0; ct<
NTRIES
; ct++) {

184 
	`choo£_«me
(
«me1
, (name1));

185 
	`choo£_«me
(
«me2
, (name2));

186 
	`ßy
("pid %2d:Ñíamê%†-> %s\n", ()
	`gëpid
(), 
«me1
, 
«me2
);

187 
	`d‹íame
(
«me1
, 
«me2
);

189 
	}
}

193 
	$mkdú_¥oc
()

195 
«me
[
NAMESIZE
];

196 
˘
;

198 
˘
=0; ct<
NTRIES
; ct++) {

199 
	`choo£_«me
(
«me
, (name));

200 
	`ßy
("pid %2d: mkdú %s\n", ()
	`gëpid
(), 
«me
);

201 
	`domkdú
(
«me
);

203 
	}
}

207 
	$rmdú_¥oc
()

209 
«me
[
NAMESIZE
];

210 
˘
;

212 
˘
=0; ct<
NTRIES
; ct++) {

213 
	`choo£_«me
(
«me
, (name));

214 
	`ßy
("pid %2d:Ñmdú %s\n", ()
	`gëpid
(), 
«me
);

215 
	`d‹mdú
(
«me
);

217 
	}
}

222 
pid_t


223 
dof‹k
((*
func
)())

225 
pid_t
 
pid
;

227 
pid
 = 
	`f‹k
();

228 i‡(
pid
 < 0) {

229 
	`ßy
("f‹k: %s\n", 
	`°ªº‹
(
î∫o
));

232 i‡(
pid
 == 0) {

234 
	`func
();

235 
	`exô
(0);

237  
pid
;

238 
	}
}

242 
	$run
()

244 
pid_t
 
pids
[
NPROCS
*4], 
wp
;

245 
i
, 
°©us
;

247 
i
=0; i<
NPROCS
; i++) {

248 
pids
[
i
*4] = 
	`dof‹k
(
mkdú_¥oc
);

249 
pids
[
i
*4+1] = 
	`dof‹k
(
mkdú_¥oc
);

250 
pids
[
i
*4+2] = 
	`dof‹k
(
ª«me_¥oc
);

251 
pids
[
i
*4+3] = 
	`dof‹k
(
rmdú_¥oc
);

254 
i
=0; i<
NPROCS
*4; i++) {

255 i‡(
pids
[
i
]>=0) {

256 
wp
 = 
	`waôpid
(
pids
[
i
], &
°©us
, 0);

257 i‡(
wp
<0) {

258 
	`ßy
("waôpid %d: %s\n", (Ë
pids
[
i
],

259 
	`°ªº‹
(
î∫o
));

261 i‡(
	`WIFSIGNALED
(
°©us
)) {

262 
	`ßy
("pid %d: sig«»%d\n", (Ë
pids
[
i
],

263 
	`WTERMSIG
(
°©us
));

265 i‡(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status)!=0) {

266 
	`ßy
("pid %d:Éxô %d\n", (Ë
pids
[
i
],

267 
	`WEXITSTATUS
(
°©us
));

271 
	}
}

277 
	$£tup
(c⁄° *
fs
)

279 i‡(
	`chdú
(
fs
)<0) {

280 
	`ßy
("chdú: %s: %s\n", 
fs
, 
	`°ªº‹
(
î∫o
));

281 
	`exô
(1);

283 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

284 
	`ßy
("mkdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

285 
	`exô
(1);

287 i‡(
	`chdú
(
TESTDIR
)<0) {

288 
	`ßy
("chdú: %s: %s\n", 
TESTDIR
, 
	`°ªº‹
(
î∫o
));

289 
	`exô
(1);

291 
	}
}

295 
	$ªcursive_˛ónup
(c⁄° *
soÁr
, 
dïth
)

297 
buf
[
NAMESIZE
*32];

298 
i
;

300 
i
=0; i<
NNAMES
; i++) {

301 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
soÁr
, 
«mes
[
i
]);

302 i‡(
	`rmdú
(
buf
)<0) {

303 i‡(
î∫o
==
ENOTEMPTY
) {

304 
	`ªcursive_˛ónup
(
buf
, 
dïth
+1);

305 
	`˛ónup_rmdú
(
buf
);

307 i‡(
î∫o
!=
ENOENT
) {

308 
	`ßy
("cleanup (pid %d):Ñmdir %s: %s\n",

309 
	`gëpid
(), 
buf
, 
	`°ªº‹
(
î∫o
));

313 
	}
}

317 
	$˛ónup
()

319 
	`ªcursive_˛ónup
(".", 0);

321 
	`chdú
("..");

322 
	`˛ónup_rmdú
(
TESTDIR
);

323 
	}
}

328 
	$maö
(
¨gc
, *
¨gv
[])

330 c⁄° *
fs
;

331 
£ed
 = 0;

333 
	`ßy
("Concurrent directory opsÅest\n");

335 i‡(
¨gc
==0 || 
¨gv
==
NULL
) {

336 
	`ßy
("Warning:árgc is 0 -ássuming you meanÅoÑun onÜhd1: "

338 
fs
 = "lhd1:";

340 i‡(
¨gc
==2) {

341 
fs
 = 
¨gv
[1];

343 i‡(
¨gc
==3) {

344 
fs
 = 
¨gv
[1];

345 
£ed
 = 
	`©oi
(
¨gv
[2]);

348 
	`ßy
("Usage: dirconc filesystem [random-seed]\n");

349 
	`exô
(1);

352 
	`§™dom
(
£ed
);

353 
	`£tup
(
fs
);

354 
	`ßy
("Sèπög i¿%s/%s\n", 
fs
, 
TESTDIR
);

356 
	`run
();

358 
	`ßy
("Cleaning up\n");

359 
	`˛ónup
();

362 
	}
}

	@user/testbin/dirseek/dirseek.c

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<uni°d.h
>

52 
	~<°rög.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<îr.h
>

57 
	#TESTDIR
 "£ekã°dú"

	)

60 c⁄° *
	m«me
;

61 
	mmake_ô
;

62 
off_t
 
	mpos
;

63 } 
	gã°fûes
[] = {

84 { 
NULL
, 0, 0 }

91 
	gdúfd
;

95 
	$födíåy
(c⁄° *
«me
)

97 
i
;

99 
i
=0; 
ã°fûes
[i].
«me
; i++) {

100 i‡(!
	`°rcmp
(
ã°fûes
[
i
].
«me
,Çame)) {

101  
i
;

105 
	}
}

109 
	$›íô
()

111 
dúfd
 = 
	`›í
(".", 
O_RDONLY
);

112 i‡(
dúfd
 < 0) {

113 
	`îr
(1, ".: open");

115 
	}
}

119 
	$˛o£ô
()

121 i‡(
	`˛o£
(
dúfd
)<0) {

122 
	`îr
(1, ".: close");

124 
dúfd
 = -1;

125 
	}
}

129 
	$ªadô
()

131 
buf
[4096];

132 
off_t
 
pos
;

133 
Àn
;

134 
n
, 
i
, 
ix
;

136 
i
=0; 
ã°fûes
[i].
«me
; i++) {

137 
ã°fûes
[
i
].
pos
 = -1;

140 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

141 i‡(
pos
 < 0) {

142 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

144 
n
 = 0;

146 (
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1)) > 0) {

148 i‡(()
Àn
 >(
buf
)-1) {

149 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

150 "övÆidÜígth %d", 
n
, 
Àn
);

152 
buf
[
Àn
] = 0;

153 
ix
 = 
	`födíåy
(
buf
);

154 i‡(
ix
 < 0) {

155 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

156 "u√x≥˘edÇamê%s", 
n
, 
buf
);

159 i‡(
ã°fûes
[
ix
].
pos
 >= 0) {

160 
	`îrx
(1, ".:Éntry %d: getdirentryÑeturned "

161 "%†®£c⁄dÅime", 
n
, 
buf
);

164 
ã°fûes
[
ix
].
pos
 =Öos;

166 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

167 i‡(
pos
 < 0) {

168 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

170 
n
++;

172 i‡(
Àn
<0) {

173 
	`îr
(1, ".:É¡ry %d: gëdúíåy", 
n
);

176 
i
=0; 
ã°fûes
[i].
«me
; i++) {

177 i‡(
ã°fûes
[
i
].
pos
 < 0) {

178 
	`îrx
(1, ".: getdirentry failedÅoÑeturn %s",

179 
ã°fûes
[
i
].
«me
);

182 i‡(
i
!=
n
) {

189 
	`îrx
(1, ".: getdirentryÑeturned %dÇames,Çot %d (huh...?)",

190 
n
, 
i
);

192 
	}
}

196 
	$fú°ªad
()

198 
off_t
 
pos
;

200 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_CUR
);

201 i‡(
pos
 < 0) {

202 
	`îr
(1, ".:Üseek(0, SEEK_CUR)");

204 i‡(
pos
 != 0) {

205 
	`îrx
(1, ".: FileÖositionáfter openÇot 0");

208 
	`¥ötf
("Scanning directory...\n");

210 
	`ªadô
();

211 
	}
}

215 
	$d‹ód©0
()

217 
off_t
 
pos
;

219 
	`¥ötf
("Rewinding directoryándÑeading itágain...\n");

221 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_SET
);

222 i‡(
pos
 < 0) {

223 
	`îr
(1, ".:Üseek(0, SEEK_SET)");

225 i‡(
pos
 != 0) {

226 
	`îrx
(1, ".:Ü£ek(0, SEEK_SETËªtu∫ed %ld", (Ë
pos
);

229 
	`ªadô
();

230 
	}
}

234 
	$ªad⁄e
(c⁄° *
shouldbe
)

236 
buf
[4096];

237 
Àn
;

239 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

240 i‡(
Àn
 < 0) {

241 
	`îr
(1, ".: getdirentry");

243 i‡(()
Àn
 >(
buf
)-1) {

244 
	`îrx
(1, ".: gëdúíåyÑëu∫ed invÆidÜígth %d", 
Àn
);

246 
buf
[
Àn
] = 0;

248 i‡(
	`°rcmp
(
buf
, 
shouldbe
)) {

249 
	`îrx
(1, ".: getdirentryÑeturned %s (expected %s)",

250 
buf
, 
shouldbe
);

252 
	}
}

256 
	$d‹ód⁄e
(
which
)

258 
off_t
 
pos
;

259 
pos
 = 
	`l£ek
(
dúfd
, 
ã°fûes
[
which
].pos, 
SEEK_SET
);

260 i‡(
pos
<0) {

261 
	`îr
(1, ".:Ü£ek(%ld, SEEK_SET)", (Ë
ã°fûes
[
which
].
pos
);

263 i‡(
pos
 !
ã°fûes
[
which
].pos) {

264 
	`îrx
(1, ".:Üseek(%ld, SEEK_SET)Ñeturned %ld",

265 (Ë
ã°fûes
[
which
].
pos
, ()Öos);

268 
	`ªad⁄e
(
ã°fûes
[
which
].
«me
);

269 
	}
}

273 
	$ªadÆl⁄eby⁄e
()

275 
i
;

277 
	`¥ötf
("TryingÅoÑeadÉachÉntryágain...\n");

278 
i
=0; 
ã°fûes
[i].
«me
; i++) {

279 
	`d‹ód⁄e
(
i
);

281 
	}
}

285 
	$ªadÆÃ™domly
()

287 
n
, 
i
, 
x
;

289 
	`¥ötf
("TryingÅoÑeadá bunch ofÉntriesÑandomly...\n");

291 
i
=0; 
ã°fûes
[i].
«me
; i++);

292 
n
 = 
i
;

294 
	`§™dom
(39584);

295 
i
=0; i<512; i++) {

296 
x
 = ()(
	`øndom
()%
n
);

297 
	`d‹ód⁄e
(
x
);

299 
	}
}

303 
	$ªad©eof
()

305 
buf
[4096];

306 
Àn
;

308 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

309 i‡(
Àn
 < 0) {

310 
	`îr
(1, ".:át EOF: getdirentry");

312 i‡(
Àn
==0) {

315 i‡(()
Àn
 >(
buf
)-1) {

316 
	`îrx
(1, ".:át EOF: getdirentryÑeturned "

317 "övÆidÜígth %d", 
Àn
);

319 
buf
[
Àn
] = 0;

320 
	`îrx
(1, ".:áàEOF: gŸ u√x≥˘edÇamê%s", 
buf
);

321 
	}
}

325 
	$d‹ód©eof
()

327 
off_t
 
pos
;

328 
i
;

330 
	`¥ötf
("TryingÅoÑeadáfter goingÅo EOF...\n");

332 
pos
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

333 i‡(
pos
<0) {

334 
	`îr
(1, ".:Üseek(0, SEEK_END)");

337 
i
=0; 
ã°fûes
[i].
«me
; i++) {

338 i‡(
pos
 <
ã°fûes
[
i
].pos) {

339 
	`îrx
(1, ".: EOFÖosition %ld belowÖosition %ld of %s",

340 
pos
, 
ã°fûes
[
i
].pos,Åe°fûes[i].
«me
);

344 
	`ªad©eof
();

345 
	}
}

349 
	$övÆ_ªad
()

351 
buf
[4096];

352 
Àn
;

354 
Àn
 = 
	`gëdúíåy
(
dúfd
, 
buf
, (buf)-1);

357 ()
Àn
;

358 
	}
}

362 
	$dobadªads
()

364 
off_t
 
pos
, 
pos2
, 
eof
;

365 
vÆid
, 
i
, 
k
=0;

367 
	`¥ötf
("Trying someÖossibly invalidÑeads...\n");

369 
eof
 = 
	`l£ek
(
dúfd
, 0, 
SEEK_END
);

370 i‡(
eof
 < 0) {

371 
	`îr
(1, ".:Üseek(0, SEEK_END)");

374 
pos
=0;Öo†< 
eof
;Öos++) {

375 
vÆid
 = 0;

376 
i
=0; 
ã°fûes
[i].
«me
; i++) {

377 i‡(
pos
==
ã°fûes
[
i
].pos) {

378 
vÆid
 = 1;

381 i‡(
vÆid
) {

386 
pos2
 = 
	`l£ek
(
dúfd
, 
pos
, 
SEEK_SET
);

387 i‡(
pos2
 < 0) {

391 
	`övÆ_ªad
();

392 
k
++;

396 i‡(
k
>0) {

397 
	`¥ötf
("Survived %d invÆidÑóds...\n", 
k
);

400 
	`¥ötf
("Couldn't findány invalid offsetsÅoÅry...\n");

403 
	`¥ötf
("TryingÅoÑead beyond EOF...\n");

404 
pos2
 = 
	`l£ek
(
dúfd
, 
eof
 + 1000, 
SEEK_SET
);

405 i‡(
pos2
 < 0) {

409 
	`övÆ_ªad
();

411 
	}
}

415 
	$dŸe°
()

417 
	`¥ötf
("Opening directory...\n");

418 
	`›íô
();

420 
	`¥ötf
("RunningÅests...\n");

423 
	`fú°ªad
();

426 
	`ªad©eof
();

429 
	`ªadÆl⁄eby⁄e
();

432 
	`d‹ód©eof
();

435 
	`ªadÆÃ™domly
();

438 
	`d‹ód©0
();

441 
	`dobadªads
();

444 
	`d‹ód©0
();

446 
	`¥ötf
("Closing directory...\n");

447 
	`˛o£ô
();

448 
	}
}

456 
	$mkfûe
(c⁄° *
«me
)

458 
fd
, 
i
, 
r
;

459 c⁄° 
mesßge
[] = "TheÅurtle moves!\n";

460 
buf
[32*(
mesßge
)+1];

462 
buf
[0]=0;

463 
i
=0; i<32; i++) {

464 
	`°rˇt
(
buf
, 
mesßge
);

468 
fd
 = 
	`›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0664);

469 i‡(
fd
<0) {

470 
	`îr
(1, "%s: cª©e", 
«me
);

473 
r
 = 
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf));

474 i‡(
r
<0) {

475 
	`îr
(1, "%s: wrôe", 
«me
);

477 i‡(()
r
 !
	`°æí
(
buf
)) {

478 
	`îrx
(1, "%s: sh‹àwrôê(%d byãs)", 
«me
, 
r
);

481 i‡(
	`˛o£
(
fd
)<0) {

482 
	`îr
(1, "%s: clo£", 
«me
);

484 
	}
}

488 
	$£tup
()

490 
i
;

492 
	`¥ötf
("Makög dúe˘‹y %s...\n", 
TESTDIR
);

495 i‡(
	`mkdú
(
TESTDIR
, 0775)<0) {

496 
	`îr
(1, "%s: mkdú", 
TESTDIR
);

500 i‡(
	`chdú
(
TESTDIR
)<0) {

501 
	`îr
(1, "%s: chdú", 
TESTDIR
);

504 
	`¥ötf
("Making some files...\n");

507 
i
=0; 
ã°fûes
[i].
«me
; i++) {

508 i‡(
ã°fûes
[
i
].
make_ô
) {

509 
	`mkfûe
(
ã°fûes
[
i
].
«me
);

511 
ã°fûes
[
i
].
pos
 = -1;

513 
	}
}

517 
	$˛ónup
()

519 
i
;

521 
	`¥ötf
("Cleaning up...\n");

524 
i
=0; 
ã°fûes
[i].
«me
; i++) {

525 i‡(
ã°fûes
[
i
].
make_ô
) {

526 i‡(
	`ªmove
(
ã°fûes
[
i
].
«me
)<0) {

527 
	`îr
(1, "%s:Ñemove", 
ã°fûes
[
i
].
«me
);

533 i‡(
	`chdú
("..")<0) {

534 
	`îr
(1, "..: chdir");

538 i‡(
	`rmdú
(
TESTDIR
)<0) {

539 
	`îr
(1, "%s:Ñmdú", 
TESTDIR
);

541 
	}
}

545 
	$maö
()

547 
	`£tup
();

550 
	`dŸe°
();

551 
	`dŸe°
();

553 
	`˛ónup
();

555 
	}
}

	@user/testbin/dirtest/dirtest.c

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<°dio.h
>

45 
	~<uni°d.h
>

46 
	~<°rög.h
>

47 
	~<îr.h
>

49 
	#MAXLEVELS
 5

	)

52 
	$maö
()

54 
i
;

55 c⁄° *
⁄íame
 = "testdir";

56 
dú«me
[512];

58 
	`°r˝y
(
dú«me
, 
⁄íame
);

60 
i
=0; i<
MAXLEVELS
; i++) {

61 
	`¥ötf
("Cª©ög dúe˘‹y: %s\n", 
dú«me
);

63 i‡(
	`mkdú
(
dú«me
, 0755)) {

64 
	`îr
(1, "%s: mkdú", 
dú«me
);

67 
	`°rˇt
(
dú«me
, "/");

68 
	`°rˇt
(
dú«me
, 
⁄íame
);

71 
	`¥ötf
("Passed directory creationÅest.\n");

73 
i
=0; i<
MAXLEVELS
; i++) {

74 
dú«me
[
	`°æí
(dú«meË- såÀn(
⁄íame
) - 1] = 0;

76 
	`¥ötf
("Removög dúe˘‹y: %s\n", 
dú«me
);

78 i‡(
	`rmdú
(
dú«me
)) {

79 
	`îr
(1, "%s:Ñmdú", 
dú«me
);

82 
	`¥ötf
("Passed directoryÑemovalÅest.\n");

85 
	}
}

	@user/testbin/f_test/f_hdr.h

30 
sub¥oc_ªad
();

31 
sub¥oc_wrôe
();

	@user/testbin/f_test/f_read.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<°dio.h
>

54 
	~<uni°d.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

62 
	$check_buf„r
()

64 
i
;

65 
ch
 = 
buf„r
[0];

67 
i
 = 1; i < 
Se˘‹Size
 + 1; i++) {

68 i‡(
buf„r
[
i
] !
ch
) {

69 
	`îrx
(1, "RódÉº‹: %s", 
buf„r
);

73 
	`putch¨
(
ch
);

74 
	}
}

77 
	$sub¥oc_ªad
()

79 
fd
;

80 
i
, 
ªs
;

82 
	`¥ötf
("File Reader starting ...\n\n");

84 
fd
 = 
	`›í
(
FNAME
, 
O_RDONLY
);

85 i‡(
fd
 < 0) {

86 
	`îr
(1, "%s: o≥n", 
FNAME
);

89 
i
=0; i<
TMULT
; i++) {

90 
ªs
 = 
	`ªad
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

91 i‡(
ªs
 < 0) {

92 
	`îr
(1, "%s:Ñód", 
FNAME
);

97 i‡(
ªs
 !
Se˘‹Size
 + 1) {

98 
	`îrx
(1, "%s:Ñód: sh‹àcou¡", 
FNAME
);

100 
	`check_buf„r
();

103 
	`˛o£
(
fd
);

105 
	`¥ötf
("File ReadÉxited successfully!\n");

106 
	}
}

	@user/testbin/f_test/f_test.c

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<îr.h
>

49 
	~"f_hdr.h
"

51 
	#SECTOR_SIZE
 512

	)

54 
	#BUFFER_SIZE
 (2 * 
SECTOR_SIZE
 + 1)

	)

55 
	#BIGFILE_SIZE
 (270 * 
BUFFER_SIZE
)

	)

56 
	#BIGFILE_NAME
 "œrge-f"

	)

58 
	#LETTER
(
x
Ë('a' + (x % 31))

	)

60 
	gfbuf„r
[
BUFFER_SIZE
];

61 
	gibuf„r
[32];

64 
	#DIR_DEPTH
 8

	)

65 
	#DIR_NAME
 "/t"

	)

66 
	#DIRFILE_NAME
 "a"

	)

69 
	#FNAME
 "f-ã°fûe"

	)

70 
	#TMULT
 50

	)

71 
	#FSIZE
 ((
SECTOR_SIZE
 + 1Ë* 
TMULT
)

	)

73 
	#READCHAR
 'r'

	)

74 
	#WRITECHAR
 'w'

	)

76 
	gcbuf„r
[
SECTOR_SIZE
 + 1];

84 
pid_t


85 
f‹koff
((*
func
)())

87 
pid_t
 
pid
 = 
	`f‹k
();

88 
pid
) {

90 
	`w¨n
("fork");

93 
	`func
();

94 
	`_exô
(0);

97  
pid
;

98 
	}
}

102 
	$dowaô
(
pid
)

104 
°©us
;

106 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

107 
	`w¨n
("waôpid f‹ %d", 
pid
);

109 i‡(
	`WIFSIGNALED
(
°©us
)) {

110 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
°©us
));

112 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

113 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
°©us
));

115 
	}
}

123 
	$big_fûe
(
size
)

125 
i
, 
j
, 
fûeid
;

127 
	`¥ötf
("[BIGFILE]Åest starting :\n");

128 
	`¥ötf
("\tCª©ögá fûêo‡size: %d\n", 
size
);

130 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

131 i‡(
fûeid
 < 0) {

132 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹ wrôe", 
BIGFILE_NAME
);

135 
i
 = 0; i < 
BUFFER_SIZE
; i++) {

136 
fbuf„r
[
i
] = 
	`LETTER
(i);

139 
	`¥ötf
("\tWritingÅo file.\n");

140 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

141 
	`wrôe
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

143 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

144 
	`¥ötf
("\rBW : %d", 
i
);

148 
	`¥ötf
("\n\tReading from file.\n");

149 
	`˛o£
(
fûeid
);

151 
fûeid
 = 
	`›í
(
BIGFILE_NAME
, 
O_RDONLY
);

152 i‡(
fûeid
 < 0) {

153 
	`îr
(1, "[BIGFILE]: %s: o≥¿f‹Ñód", 
BIGFILE_NAME
);

156 
i
 = 0; i < 
size
; i +
BUFFER_SIZE
) {

157 
j
 = 
	`ªad
(
fûeid
, 
fbuf„r
, 
BUFFER_SIZE
);

158 i‡(
j
<0) {

159 
	`îr
(1, "[BIGFILE]:Ñead");

161 i‡(
j
 !
BUFFER_SIZE
) {

162 
	`îrx
(1, "[BIGFILE]:Ñód: o∆y %d byãs", 
j
);

166 i‡(!(
i
 % (10 * 
BUFFER_SIZE
))) {

167 
	`¥ötf
("\rBR : %d", 
i
);

171 
j
 = 0; j < 
BUFFER_SIZE
; j++) {

172 i‡(
fbuf„r
[
j
] !
	`LETTER
(j)) {

173 
	`îrx
(1, "[BIGFILE] : FailedÑead check : "

174 "öc⁄si°íàd©®ªad: %d", 
i
+
j
);

179 
	`˛o£
(
fûeid
);

180 i‡(
	`ªmove
(
BIGFILE_NAME
)) {

181 
	`îr
(1, "[BIGFILE]: %s:Ñemove", 
BIGFILE_NAME
);

184 
	`¥ötf
("\n[BIGFILE] : Success!\n");

185 
	}
}

193 
	$c⁄cur
()

195 
i
, 
fd
;

196 
r1
, 
r2
, 
w1
;

198 
	`¥ötf
("Spawning 2Ñeaders, 1 writer.\n");

201 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

202 i‡(
fd
 < 0) {

203 
	`îr
(1, "[CONCUR]: %s: o≥n", 
FNAME
);

206 
	`¥ötf
("InitializingÅest file: ");

208 
i
 = 0; i < 
SECTOR_SIZE
 + 1; i++) {

209 
cbuf„r
[
i
] = 
READCHAR
;

212 
i
 = 0; i < 
TMULT
; i++) {

213 
	`wrôe
(
fd
, 
cbuf„r
, 
SECTOR_SIZE
 + 1);

217 
	`˛o£
(
fd
);

219 
	`¥ötf
("Done initializing. StartingÖrocesses...\n");

221 
r1
 = 
	`f‹koff
(
sub¥oc_ªad
);

222 
w1
 = 
	`f‹koff
(
sub¥oc_wrôe
);

223 
r2
 = 
	`f‹koff
(
sub¥oc_ªad
);

225 
	`¥ötf
("Waiting forÖrocesses.\n");

227 
	`dowaô
(
r1
);

228 
	`dowaô
(
r2
);

229 
	`dowaô
(
w1
);

231 i‡(
	`ªmove
(
FNAME
)) {

232 
	`îr
(1, "[CONCUR]: %s:Ñemove", 
FNAME
);

235 
	`¥ötf
("[CONCUR] Done!\n");

236 
	}
}

244 
	$dú_ã°
(
dïth
)

246 
i
, 
fd
;

247 
tmp
[] = 
DIR_NAME
;

248 
fmp
[] = 
DIRFILE_NAME
;

249 
dú«me
[64];

251 
	`°r˝y
(
dú«me
, ".");

253 
i
 = 0; i < 
dïth
; i++) {

254 
	`°rˇt
(
dú«me
, 
tmp
);

256 
	`¥ötf
("\tCª©ög dú : %s\n", 
dú«me
);

258 i‡(
	`mkdú
(
dú«me
, 0775) < 0) {

259 
	`îr
(1, "[DIRTEST]: %s: mkdú", 
dú«me
);

262 
	`°rˇt
(
dú«me
, 
fmp
);

263 
	`¥ötf
("\tCª©ög fûe: %s\n", 
dú«me
);

265 
fd
 = 
	`›í
(
dú«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

266 i‡(
fd
<0) {

267 
	`îr
(1, "[DIRTEST]: %s: o≥n", 
dú«me
);

270 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

273 
	`¥ötf
("[DIRTEST] : Passed directory creationÅest.\n");

275 
i
 = 0; i < 
dïth
; i++) {

276 
	`°rˇt
(
dú«me
, 
fmp
);

278 
	`¥ötf
("\tDñëög fûe: %s\n", 
dú«me
);

280 i‡(
	`ªmove
(
dú«me
)) {

281 
	`îr
(1, "[DIRTEST]: %s:Ñemove", 
dú«me
);

284 
dú«me
[
	`°æí
(dú«meË- såÀn(
fmp
)] = '\0';

285 
	`¥ötf
("\tRemovög dú : %s\n", 
dú«me
);

287 i‡(
	`rmdú
(
dú«me
)) {

288 
	`îr
(1, "[DIRTEST]: %s:Ñmdú", 
dú«me
);

291 
dú«me
[
	`°æí
(dú«meË- såÀn(
tmp
)] = '\0';

294 
	`¥ötf
("[DIRTEST] : Passed directoryÑemovalÅest.\n");

295 
	`¥ötf
("[DIRTEST] : Success!\n");

296 
	}
}

302 
	#RUNBIGFILE
 0x1

	)

303 
	#RUNDIRTEST
 0x2

	)

304 
	#RUNCONCUR
 0x4

	)

305 
	#RUNTHEMALL
 (
RUNBIGFILE
 | 
RUNDIRTEST
 | 
RUNCONCUR
)

	)

308 
	$maö
(
¨gc
, * 
¨gv
[])

310 
tv
 = 0;

312 i‡(
¨gc
 > 1) {

313 i‡(*
¨gv
[1]=='1') {

314 
tv
 = 
RUNBIGFILE
;

316 i‡(*
¨gv
[1]=='2') {

317 
tv
 = 
RUNDIRTEST
;

319 i‡(*
¨gv
[1]=='3') {

320 
tv
 = 
RUNCONCUR
;

324 
tv
 = 
RUNTHEMALL
;

327 i‡(
tv
 & 
RUNBIGFILE
) {

328 
	`¥ötf
("[BIGFILE] : Run #1\n");

329 
	`big_fûe
(
BIGFILE_SIZE
);

330 
	`¥ötf
("[BIGFILE] : Run #2\n");

331 
	`big_fûe
(
BIGFILE_SIZE
);

334 i‡(
tv
 & 
RUNDIRTEST
) {

335 
	`¥ötf
("[DIRTEST] : Run #1\n");

336 
	`dú_ã°
(
DIR_DEPTH
);

337 
	`¥ötf
("[DIRTEST] : Run #2\n");

338 
	`dú_ã°
(
DIR_DEPTH
);

341 i‡(
tv
 & 
RUNCONCUR
) {

342 
	`¥ötf
("[CONCUR]\n");

343 
	`c⁄cur
();

346 
	}
}

	@user/testbin/f_test/f_write.c

44 
	#Se˘‹Size
 512

	)

46 
	#TMULT
 50

	)

47 
	#FSIZE
 ((
Se˘‹Size
 + 1Ë* 
TMULT
)

	)

49 
	#FNAME
 "f-ã°fûe"

	)

50 
	#READCHAR
 'r'

	)

51 
	#WRITECHAR
 'w'

	)

53 
	~<uni°d.h
>

54 
	~<°dio.h
>

55 
	~<îr.h
>

56 
	~"f_hdr.h
"

58 
	gbuf„r
[
Se˘‹Size
 + 1];

61 
	$sub¥oc_wrôe
()

63 
fd
;

64 
i
;

66 
i
=0; i < 
Se˘‹Size
 + 1; i++) {

67 
buf„r
[
i
] = 
WRITECHAR
;

70 
	`¥ötf
("File Writer starting ...\n");

72 
fd
 = 
	`›í
(
FNAME
, 
O_WRONLY
);

73 i‡(
fd
 < 0) {

74 
	`îr
(1, "%s: o≥n", 
FNAME
);

77 
i
=0; i<
TMULT
; i++) {

79 
	`wrôe
(
fd
, 
buf„r
, 
Se˘‹Size
 + 1);

82 
	`˛o£
(
fd
);

84 
	`¥ötf
("File WriteÉxited successfully!\n");

85 
	}
}

	@user/testbin/farm/farm.c

40 
	~<uni°d.h
>

41 
	~<îr.h
>

43 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 *
	gˇrgv
[3] = { (*)"ˇt", (*)"ˇtfûe", 
NULL
 };

46 
	#MAXPROCS
 6

	)

47 
	gpids
[
MAXPROCS
], 
	g≈ids
;

51 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

53 
pid
 = 
	`f‹k
();

54 
pid
) {

56 
	`îr
(1, "fork");

59 
	`execv
(
¥og
, 
¨gv
);

60 
	`îr
(1, "%s", 
¥og
);

63 
pids
[
≈ids
++] = 
pid
;

66 
	}
}

70 
	$waôÆl
()

72 
i
, 
°©us
;

73 
i
=0; i<
≈ids
; i++) {

74 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

75 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

77 i‡(
	`WIFSIGNALED
(
°©us
)) {

78 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

80 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

81 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

84 
	}
}

88 
	$hog
()

90 
	`•awnv
("/ã°bö/hog", 
h¨gv
);

91 
	}
}

95 
	$ˇt
()

97 
	`•awnv
("/bö/ˇt", 
ˇrgv
);

98 
	}
}

101 
	$maö
()

103 
	`hog
();

104 
	`hog
();

105 
	`hog
();

106 
	`ˇt
();

108 
	`waôÆl
();

111 
	}
}

	@user/testbin/faulter/faulter.c

39 
	~<°dio.h
>

41 
	#REALLY_BIG_ADDRESS
 0x40000000

	)

44 
	$maö
()

46 vﬁ©ûê
i
;

48 
	`¥ötf
("\nEnteringÅhe faulterÖrogram - I should die immediately\n");

49 
i
 = *(*)
REALLY_BIG_ADDRESS
;

50 
	`¥ötf
("I didn't get killed! Program hasá bug\n");

52 
	}
}

	@user/testbin/filetest/filetest.c

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<îr.h
>

47 
	$maö
(
¨gc
, *
¨gv
[])

49 
wrôebuf
[40] = "Twiddle dee dee, Twiddle dum dum.......\n";

50 
ªadbuf
[41];

52 
fd
, 
rv
;

54 i‡(
¨gc
!=2) {

55 
	`îrx
(1, "Usage: filetest <filename>");

58 
fd
 = 
	`›í
(
¨gv
[1], 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

59 i‡(
fd
<0) {

60 
	`îr
(1, "%s: o≥¿f‹ wrôe", 
¨gv
[1]);

64 
rv
 = 
	`wrôe
(
fd
, 
wrôebuf
, 40);

65 i‡(
rv
<0) {

66 
	`îr
(1, "%s: wrôe", 
¨gv
[1]);

69 
rv
 = 
	`˛o£
(
fd
);

70 i‡(
rv
<0) {

71 
	`îr
(1, "%s: clo£ (1°Åime)", 
¨gv
[1]);

74 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

75 i‡(
fd
<0) {

76 
	`îr
(1, "%s: o≥¿f‹Ñód", 
¨gv
[1]);

79 
rv
 = 
	`ªad
(
fd
, 
ªadbuf
, 40);

80 i‡(
rv
<0) {

81 
	`îr
(1, "%s:Ñód", 
¨gv
[1]);

83 
rv
 = 
	`˛o£
(
fd
);

84 i‡(
rv
<0) {

85 
	`îr
(1, "%s: clo£ (2ndÅime)", 
¨gv
[1]);

88 
ªadbuf
[40] = 0;

90 i‡(
	`°rcmp
(
ªadbuf
, 
wrôebuf
)) {

91 
	`îrx
(1, "Buffer data mismatch!");

94 
rv
 = 
	`ªmove
(
¨gv
[1]);

95 i‡(
rv
<0) {

96 
	`îr
(1, "%s:Ñemove", 
¨gv
[1]);

98 
	`¥ötf
("Passed filetest.\n");

100 
	}
}

	@user/testbin/forkbomb/forkbomb.c

50 
	~<uni°d.h
>

51 
	~<îr.h
>

53 vﬁ©ûê
	gpid
;

56 
	$maö
()

58 
i
;

61 
	`f‹k
();

63 
pid
 = 
	`gëpid
();

66 
i
=0; i<300; i++) {

67 vﬁ©ûê
£ípid
;

68 
£ípid
 = 
pid
;

69 i‡(
£ípid
 !
	`gëpid
()) {

70 
	`îrx
(1, "pid mismatch (%d, should be %d) "

72 
£ípid
, 
	`gëpid
());

76 
	}
}

	@user/testbin/forktest/forktest.c

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

43 
	~<îr.h
>

49 vﬁ©ûê
	gmypid
;

56 
	$dof‹k
()

58 
pid
;

59 
pid
 = 
	`f‹k
();

60 i‡(
pid
 < 0) {

61 
	`w¨n
("fork");

63  
pid
;

64 
	}
}

73 
	$check
()

75 
i
;

77 
mypid
 = 
	`gëpid
();

80 
i
=0; i<800; i++) {

81 vﬁ©ûê
£ípid
;

82 
£ípid
 = 
mypid
;

83 i‡(
£ípid
 !
	`gëpid
()) {

84 
	`îrx
(1, "pid mismatch (%d, should be %d) "

86 
£ípid
, 
	`gëpid
());

89 
	}
}

102 
	$dowaô
(
nowaô
, 
pid
)

104 
x
;

106 i‡(
pid
<0) {

110 i‡(
pid
==0) {

112 
	`exô
(0);

115 i‡(!
nowaô
) {

116 i‡(
	`waôpid
(
pid
, &
x
, 0)<0) {

117 
	`w¨n
("waitpid");

119 i‡(
	`WIFSIGNALED
(
x
)) {

120 
	`w¨nx
("pid %d: sig«»%d", 
pid
, 
	`WTERMSIG
(
x
));

122 i‡(
	`WEXITSTATUS
(
x
) != 0) {

123 
	`w¨nx
("pid %d:Éxô %d", 
pid
, 
	`WEXITSTATUS
(
x
));

126 
	}
}

133 
	$ã°
(
nowaô
)

135 
pid0
, 
pid1
, 
pid2
, 
pid3
;

144 
pid0
 = 
	`dof‹k
();

145 
	`putch¨
('0');

146 
	`check
();

147 
pid1
 = 
	`dof‹k
();

148 
	`putch¨
('1');

149 
	`check
();

150 
pid2
 = 
	`dof‹k
();

151 
	`putch¨
('2');

152 
	`check
();

153 
pid3
 = 
	`dof‹k
();

154 
	`putch¨
('3');

155 
	`check
();

161 
	`dowaô
(
nowaô
, 
pid3
);

162 
	`dowaô
(
nowaô
, 
pid2
);

163 
	`dowaô
(
nowaô
, 
pid1
);

164 
	`dowaô
(
nowaô
, 
pid0
);

166 
	`putch¨
('\n');

167 
	}
}

170 
	$maö
(
¨gc
, *
¨gv
[])

172 
nowaô
=0;

174 i‡(
¨gc
==2 && !
	`°rcmp
(
¨gv
[1], "-w")) {

175 
nowaô
=1;

177 i‡(
¨gc
!=1 &&árgc!=0) {

178 
	`w¨nx
("usage: forktest [-w]");

181 
	`w¨nx
("Starting.");

183 
	`ã°
(
nowaô
);

185 
	`w¨nx
("Complete.");

187 
	}
}

	@user/testbin/guzzle/guzzle.c

37 
	~<°dio.h
>

38 
	~<uni°d.h
>

40 
	#TOP
 1<<25

	)

46 
	$maö
(
¨gc
, *
¨gv
[])

48 vﬁ©ûê
i
;

49 
ch
 = '+';

51 i‡(
¨gc
 == 2) {

52 
ch
 = 
¨gv
[1][0];

55 
i
=0; i<
TOP
; i++) {

57 i‡–(
i
%10000) == 0) {

58 
	`putch¨
(
ch
);

62 
	}
}

	@user/testbin/hash/hash.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

43 
	~<f˙é.h
>

44 
	~<îr.h
>

46 #ifde‡
HOST


47 
	~"ho°com∑t.h
"

50 
	#HASHP
 104729

	)

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
fd
;

56 
ªadbuf
[1];

57 
j
 = 0;

59 #ifde‡
HOST


60 
	`ho°com∑t_öô
(
¨gc
, 
¨gv
);

63 i‡(
¨gc
 != 2) {

64 
	`îrx
(1, "Usage: hash filename");

67 
fd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
, 0664);

69 i‡(
fd
<0) {

70 
	`îr
(1, "%s", 
¨gv
[1]);

74 i‡(
	`ªad
(
fd
, 
ªadbuf
, 1) <= 0) ;

75 
j
 = ((j*8Ë+ (Ë
ªadbuf
[0]Ë% 
HASHP
;

78 
	`˛o£
(
fd
);

80 
	`¥ötf
("Hash : %d\n", 
j
);

83 
	}
}

	@user/testbin/hog/hog.c

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++)

46 
	}
}

	@user/testbin/huge/huge.c

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

43 
	#PageSize
 4096

	)

44 
	#NumPages
 512

	)

46 
	g•¨£
[
NumPages
][
PageSize
];

49 
	$maö
()

51 
i
,
j
;

53 
	`¥ötf
("EnteringÅhe hugeÖrogram - I will stressÅest your VM\n");

56 
i
=0; i<
NumPages
; i++) {

57 
•¨£
[
i
][0]=i;

60 
	`¥ötf
("stage [1] done\n");

63 
j
=0; j<5; j++) {

64 
i
=0; i<
NumPages
; i++) {

65 
•¨£
[
i
][0]++;

67 
	`¥ötf
("°agê[2.%d] d⁄e\n", 
j
);

70 
	`¥ötf
("stage [2] done\n");

73 
i
=
NumPages
-1; i>=0; i--) {

74 i‡(
•¨£
[
i
][0]!=i+5) {

75 
	`¥ötf
("BAD NEWS!!! - your VM mechanism hasá bug!\n");

76 
	`exô
(1);

80 
	`¥ötf
("YouÖassed!\n");

83 
	}
}

	@user/testbin/kitchen/kitchen.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

41 *
	gßrgv
[2] = { (*)"sök", 
NULL
 };

43 
	#MAXPROCS
 6

	)

44 
	gpids
[
MAXPROCS
], 
	g≈ids
;

48 
	$sök
()

50 
pid
 = 
	`f‹k
();

51 
pid
) {

53 
	`îr
(1, "fork");

56 
	`execv
("/ã°bö/sök", 
ßrgv
);

57 
	`îr
(1, "/testbin/sink");

60 
pids
[
≈ids
++] = 
pid
;

63 
	}
}

67 
	$waôÆl
()

69 
i
, 
°©us
;

70 
i
=0; i<
≈ids
; i++) {

71 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

72 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

74 i‡(
	`WIFSIGNALED
(
°©us
)) {

75 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

77 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

78 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

85 
	$maö
()

87 
	`sök
();

88 
	`sök
();

89 
	`sök
();

90 
	`sök
();

92 
	`waôÆl
();

95 
	}
}

	@user/testbin/malloctest/malloctest.c

40 
	~<°döt.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<îr.h
>

48 
	#_PATH_RANDOM
 "øndom:"

	)

50 
	#SMALLSIZE
 72

	)

51 
	#MEDIUMSIZE
 896

	)

52 
	#BIGSIZE
 16384

	)

53 
	#HUGESIZE
 (1024 * 1024 * 1024)

	)

56 
	#OVERHEAD
 32

	)

59 
	#ABSURD_OVERHEAD
 256

	)

63 
	$gëi
()

65 
vÆ
=0;

66 
ch
, 
digôs
=0;

69 
ch
 = 
	`gëch¨
();

70 i‡(
ch
=='\n' || ch=='\r') {

71 
	`putch¨
('\n');

74 i‡((
ch
=='\b' || ch==127Ë&& 
digôs
>0) {

75 
	`¥ötf
("\b \b");

76 
vÆ
 = val/10;

77 
digôs
--;

79 i‡(
ch
>='0' && ch<='9') {

80 
	`putch¨
(
ch
);

81 
vÆ
 = vÆ*10 + (
ch
-'0');

82 
digôs
++;

85 
	`putch¨
('\a');

89 i‡(
digôs
==0) {

92  
vÆ
;

93 
	}
}

102 
	$m¨kblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

104 
size_t
 
n
, 
i
;

105 *
∂
;

106 
vÆ
;

108 
∂
 = (*)
±r
;

109 
n
 = 
size
 / ();

111 
i
=0; i<
n
; i++) {

112 
vÆ
 = (()
i
 ^ ()
büs
);

113 
∂
[
i
] = 
vÆ
;

114 i‡(
d›röt
 && (
i
%64==63)) {

115 
	`¥ötf
(".");

118 i‡(
d›röt
) {

119 
	`¥ötf
("\n");

121 
	}
}

128 
	$checkblock
(vﬁ©ûê*
±r
, 
size_t
 
size
, 
büs
, 
d›röt
)

130 
size_t
 
n
, 
i
;

131 *
∂
;

132 
vÆ
;

134 
∂
 = (*)
±r
;

135 
n
 = 
size
 / ();

137 
i
=0; i<
n
; i++) {

138 
vÆ
 = (()
i
 ^ ()
büs
);

139 i‡(
∂
[
i
] !
vÆ
) {

140 i‡(
d›röt
) {

141 
	`¥ötf
("\n");

143 
	`¥ötf
("FAILED: data mismatchát offset %lu of block "

145 (Ë(
i
*()),

146 ()(
uöçå_t
)
∂
,

147 
∂
[
i
], 
vÆ
);

150 i‡(
d›röt
 && (
i
%64==63)) {

151 
	`¥ötf
(".");

154 i‡(
d›röt
) {

155 
	`¥ötf
("\n");

159 
	}
}

172 
	$ã°1
()

174 vﬁ©ûê*
x
;

176 
	`¥ötf
("*** MallocÅest 1 ***\n");

177 
	`¥ötf
("AŒoˇtög %u byãs\n", 
BIGSIZE
);

178 
x
 = 
	`mÆloc
(
BIGSIZE
);

179 i‡(
x
==
NULL
) {

180 
	`¥ötf
("FAILED: malloc failed\n");

184 
	`m¨kblock
(
x
, 
BIGSIZE
, 0, 0);

185 i‡(
	`checkblock
(
x
, 
BIGSIZE
, 0, 0)) {

186 
	`¥ötf
("FAILED: data corrupt\n");

190 
	`‰ì
((*)
x
);

192 
	`¥ötf
("Passed mallocÅest 1.\n");

193 
	}
}

230 
	$ã°2
()

232 vﬁ©ûê*
x
;

233 
size_t
 
size
;

235 
	`¥ötf
("Entering mallocÅest 2.\n");

236 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

239 
	`¥ötf
("Testing how much memory we canállocate:\n");

241 
size
 = 
HUGESIZE
; (
x
 = 
	`mÆloc
(size))==
NULL
; size = size/2) {

242 
	`¥ötf
(" %9lu byãs: faûed\n", (Ë
size
);

244 
	`¥ötf
(" %9lu byãs: suc˚eded\n", (Ë
size
);

246 
	`¥ötf
("PassedÖart 1\n");

248 
	`¥ötf
("TouchingállÅhe words inÅhe block.\n");

249 
	`m¨kblock
(
x
, 
size
, 0, 1);

251 
	`¥ötf
("ValidatingÅhe words inÅhe block.\n");

252 i‡(
	`checkblock
(
x
, 
size
, 0, 1)) {

253 
	`¥ötf
("FAILED: data corrupt\n");

256 
	`¥ötf
("PassedÖart 2\n");

259 
	`¥ötf
("FreeingÅhe block\n");

260 
	`‰ì
((*)
x
);

261 
	`¥ötf
("PassedÖart 3\n");

262 
	`¥ötf
("Allocatingánother block\n");

264 
x
 = 
	`mÆloc
(
size
);

265 i‡(
x
==
NULL
) {

266 
	`¥ötf
("FAILED: free didn'tÑeturnÅhe memory?\n");

269 
	`‰ì
((*)
x
);

271 
	`¥ötf
("Passed mallocÅest 2.\n");

272 
	}
}

288 
	sã°3
 {

289 
ã°3
 *
	m√xt
;

290 
	mjunk
[(
SMALLSIZE
 - (
ã°3
 *))];

295 
	$ã°3
()

297 
ã°3
 *
li°
 = 
NULL
, *
tmp
;

298 
size_t
 
tŸ
=0;

299 
˘
=0, 
Áûed
=0;

300 *
x
;

302 
	`¥ötf
("Entering mallocÅest 3.\n");

303 
	`¥ötf
("Make sure youÑeadánd understandÅhe comment in malloctest.c "

306 
	`¥ötf
("Testing how much memory we canállocate:\n");

308 (
tmp
 = 
	`mÆloc
((
ã°3
))Ë!
NULL
) {

310 
tmp
->
√xt
 = 
li°
;

311 
li°
 = 
tmp
;

313 
tŸ
 +(
ã°3
);

315 
	`m¨kblock
(
li°
->
junk
, ÷i°->junk), (
uöçå_t
)list, 0);

317 
˘
++;

318 i‡(
˘
%128==0) {

319 
	`¥ötf
(".");

323 
	`¥ötf
("AŒoˇãd %lu byãs\n", (Ë
tŸ
);

325 
	`¥ötf
("Trying some moreállocations which IÉxpectÅo fail...\n");

327 
x
 = 
	`mÆloc
(
SMALLSIZE
);

328 i‡(
x
 !
NULL
) {

329 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
SMALLSIZE
);

333 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

334 i‡(
x
 !
NULL
) {

335 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
MEDIUMSIZE
);

339 
x
 = 
	`mÆloc
(
BIGSIZE
);

340 i‡(
x
 !
NULL
) {

341 
	`¥ötf
("FAILED: mÆloc(%uËsuc˚eded\n", 
BIGSIZE
);

345 
	`¥ötf
("Ok,Çow I'm goingÅo freeÉverything...\n");

347 
li°
 !
NULL
) {

348 
tmp
 = 
li°
->
√xt
;

350 i‡(
	`checkblock
(
li°
->
junk
, (list->junk),

351 (
uöçå_t
)
li°
, 0)) {

352 
Áûed
 = 1;

355 
	`‰ì
(
li°
);

356 
li°
 = 
tmp
;

359 i‡(
Áûed
) {

360 
	`¥ötf
("FAILED: data corruption\n");

364 
	`¥ötf
("Let me see if I canállocate some moreÇow...\n");

366 
x
 = 
	`mÆloc
(
MEDIUMSIZE
);

367 i‡(
x
 =
NULL
) {

368 
	`¥ötf
("FAIL: Nope, I couldn't.\n");

371 
	`‰ì
(
x
);

373 
	`¥ötf
("Passed mallocÅest 3\n");

374 
	}
}

389 
	$ã°4
()

391 *
x
, *
y
, *
z
;

392 
lx
, 
ly
, 
lz
, 
ovîhód
, 
zsize
;

394 
	`¥ötf
("Entering mallocÅest 4.\n");

395 
	`¥ötf
("ThisÅest is intended for first/best-fit based mallocs.\n");

396 
	`¥ötf
("ThisÅest mayÇot work correctly ifÑunáfter otherÅests.\n");

398 
	`¥ötf
("Testing freeÜist coalescing:\n");

400 
x
 = 
	`mÆloc
(
SMALLSIZE
);

401 i‡(
x
==
NULL
) {

402 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
SMALLSIZE
);

406 
y
 = 
	`mÆloc
(
MEDIUMSIZE
);

407 i‡(
y
==
NULL
) {

408 
	`¥ötf
("FAILED: mÆloc(%uËÁûed\n", 
MEDIUMSIZE
);

413 
	`¥ötf
("Buh? I can't fitá void * inán unsignedÜong\n");

414 
	`¥ötf
("ENVIRONMENT FAILED...\n");

418 
lx
 = ()
x
;

419 
ly
 = ()
y
;

421 
	`¥ötf
("x i†0x%lx; y i†0x%lx\n", 
lx
, 
ly
);

432 i‡(
lx
 =
ly
) {

433 
	`¥ötf
("FAIL: x == y\n");

443 i‡(
lx
 < 
ly
 &&Üx + 
SMALLSIZE
 >Üy) {

444 
	`¥ötf
("FAIL: y starts within x\n");

447 i‡(
ly
 < 
lx
 &&Üy + 
MEDIUMSIZE
 >Üx) {

448 
	`¥ötf
("FAIL: x starts within y\n");

457 i‡(
ly
 < 
lx
) {

458 
	`¥ötf
("TEST UNSUITABLE: y is below x\n");

465 
ovîhód
 = 
ly
 - (
lx
 + 
SMALLSIZE
);

466 
	`¥ötf
("Aµ¨íàblock ovîhód: %lu\n", 
ovîhód
);

468 i‡(
ovîhód
 > 
ABSURD_OVERHEAD
) {

469 
	`¥ötf
("TEST UNSUITABLE: block overheadábsurdlyÜarge.\n");

472 i‡(
ovîhód
 > 
OVERHEAD
) {

473 
	`¥ötf
("FAIL: block overhead isÅooÜarge.\n");

477 
	`¥ötf
("Freeing blocks...\n");

478 
	`‰ì
(
x
);

479 
	`‰ì
(
y
);

481 
zsize
 = 
SMALLSIZE
 + 
MEDIUMSIZE
 + 
ovîhód
;

483 
	`¥ötf
("NowáŒoˇtög %lu byãs... shouldÑeu£Åhê•a˚.\n", 
zsize
);

484 
z
 = 
	`mÆloc
(
zsize
);

485 i‡(
z
 =
NULL
) {

486 
	`¥ötf
("FAIL: Allocation failed...\n");

490 
lz
 = (Ë
z
;

492 
	`¥ötf
("z i†0x%lx (x wa†0x%lx, y 0x%lx)\n", 
lz
, 
lx
, 
ly
);

494 i‡(
lz
==
lx
) {

495 
	`¥ötf
("Passed.\n");

498 
	`¥ötf
("Failed.\n");

501 
	`‰ì
(
z
);

502 
	}
}

518 
	$ã°567
(
ã°no
, 
£ed
)

520 c⁄° 
sizes
[8] = { 13, 17, 69, 176, 433, 871, 1150, 6060 };

522 *
±rs
[32];

523 
psizes
[32];

524 
i
, 
n
, 
size
, 
Áûed
=0;

526 
	`§™dom
(
£ed
);

527 
	`¥ötf
("SìdedÑ™domÇumbî gíî©‹ wôh %lu.\n", 
£ed
);

529 
i
=0; i<32; i++) {

530 
±rs
[
i
] = 
NULL
;

531 
psizes
[
i
] = 0;

534 
i
=0; i<100000; i++) {

535 
n
 = 
	`øndom
()%32;

536 i‡(
±rs
[
n
] =
NULL
) {

537 
size
 = 
sizes
[
	`øndom
()%8];

538 
±rs
[
n
] = 
	`mÆloc
(
size
);

539 
psizes
[
n
] = 
size
;

540 i‡(
±rs
[
n
] =
NULL
) {

541 
	`¥ötf
("\nmÆlo¯%u faûed\n", 
size
);

542 
Áûed
 = 1;

545 
	`m¨kblock
(
±rs
[
n
], 
size
,Ç, 0);

548 
size
 = 
psizes
[
n
];

549 i‡(
	`checkblock
(
±rs
[
n
], 
size
,Ç, 0)) {

550 
Áûed
 = 1;

553 
	`‰ì
(
±rs
[
n
]);

554 
±rs
[
n
] = 
NULL
;

555 
psizes
[
n
] = 0;

557 i‡(
i
%256==0) {

558 
	`¥ötf
(".");

561 
	`¥ötf
("\n");

563 
i
=0; i<32; i++) {

564 i‡(
±rs
[
i
] !
NULL
) {

565 
	`‰ì
(
±rs
[
i
]);

569 i‡(
Áûed
) {

570 
	`¥ötf
("FAILED mÆlo¯ã° %d\n", 
ã°no
);

573 
	`¥ötf
("Pas£d mÆlo¯ã° %d\n", 
ã°no
);

575 
	}
}

579 
	$ã°5
()

581 
	`¥ötf
("Beginning mallocÅest 5\n");

582 
	`ã°567
(5, 0);

583 
	}
}

587 
	$ã°6
()

589 
fd
, 
Àn
;

590 
£ed
;

592 
	`¥ötf
("Beginning mallocÅest 6\n");

594 
fd
 = 
	`›í
(
_PATH_RANDOM
, 
O_RDONLY
);

595 i‡(
fd
 < 0) {

596 
	`îr
(1, "%s", 
_PATH_RANDOM
);

598 
Àn
 = 
	`ªad
(
fd
, &
£ed
, (seed));

599 i‡(
Àn
 < 0) {

600 
	`îr
(1, "%s", 
_PATH_RANDOM
);

602 i‡(
Àn
 < ()(
£ed
)) {

603 
	`îrx
(1, "%s: Sh‹àªad", 
_PATH_RANDOM
);

605 
	`˛o£
(
fd
);

607 
	`ã°567
(6, 
£ed
);

608 
	}
}

612 
	$ã°7
()

614 
£ed
;

616 
	`¥ötf
("Beginning mallocÅest 7\n");

618 
	`¥ötf
("EnterÑandom seed: ");

619 
£ed
 = 
	`gëi
();

621 
	`ã°567
(7, 
£ed
);

622 
	}
}

627 
	mnum
;

628 c⁄° *
	mdesc
;

629 (*
	mfunc
)();

630 } 
	gã°s
[] = {

631 { 1, "Sim∂êÆloˇti⁄Åe°", 
ã°1
 },

632 { 2, "AŒoˇãáŒ mem‹y i¿®big chunk", 
ã°2
 },

633 { 3, "AŒoˇãáŒ mem‹y i¿smÆ»chunks", 
ã°3
 },

634 { 4, "Fªêli° cﬂÀscögÅe° (fú°/√xt/be°-fô o∆y)", 
ã°4
 },

635 { 5, "Såes†ã°", 
ã°5
 },

636 { 6, "R™domized såes†ã°", 
ã°6
 },

637 { 7, "Såes†ã° wôhÖ¨ticuœ∏£ed", 
ã°7
 },

638 { -1, 
NULL
, NULL }

643 
	$dŸe°
(
ä
)

645 
i
;

646 
i
=0; 
ã°s
[i].
num
>=0; i++) {

647 i‡(
ã°s
[
i
].
num
 =
ä
) {

648 
ã°s
[
i
].
	`func
();

653 
	}
}

656 
	$maö
(
¨gc
, *
¨gv
[])

658 
i
, 
ä
, 
míu
=1;

660 i‡(
¨gc
 > 1) {

661 
i
=1; i<
¨gc
; i++) {

662 
	`dŸe°
(
	`©oi
(
¨gv
[
i
]));

668 i‡(
míu
) {

669 
i
=0; 
ã°s
[i].
num
>=0; i++) {

670 
	`¥ötf
(" %2d %s\n", 
ã°s
[
i
].
num
,

671 
ã°s
[
i
].
desc
);

673 
míu
 = 0;

675 
	`¥ötf
("malloctest: ");

676 
ä
 = 
	`gëi
();

677 i‡(
ä
 < 0) {

681 i‡(
	`dŸe°
(
ä
)) {

682 
míu
 = 1;

687 
	}
}

	@user/testbin/matmult/matmult-orig.c

48 
	~<uni°d.h
>

49 
	~<°dio.h
>

51 
	#Dim
 360

	)

55 
	#RIGHT
 46397160

	)

57 
	gA
[
Dim
][Dim];

58 
	gB
[
Dim
][Dim];

59 
	gC
[
Dim
][Dim];

62 
	$maö
()

64 
i
, 
j
, 
k
, 
r
;

66 
i
 = 0; i < 
Dim
; i++)

67 
j
 = 0; j < 
Dim
; j++) {

68 
A
[
i
][
j
] = i;

69 
B
[
i
][
j
] = j;

70 
C
[
i
][
j
] = 0;

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
A
[i][
k
] * 
B
[k][j];

78 
	`¥ötf
("matmult-orig finished.\n");

79 
r
 = 
C
[
Dim
-1][Dim-1];

80 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

81 i‡(
r
 !
RIGHT
) {

82 
	`¥ötf
("FAILED\n");

85 
	`¥ötf
("Passed.\n");

88 
	}
}

	@user/testbin/matmult/matmult.c

42 
	~<uni°d.h
>

43 
	~<°dio.h
>

45 
	#Dim
 72

	)

49 
	#RIGHT
 8772192

	)

51 
	gA
[
Dim
][Dim];

52 
	gB
[
Dim
][Dim];

53 
	gC
[
Dim
][Dim];

54 
	gT
[
Dim
][Dim][Dim];

57 
	$maö
()

59 
i
, 
j
, 
k
, 
r
;

61 
i
 = 0; i < 
Dim
; i++)

62 
j
 = 0; j < 
Dim
; j++) {

63 
A
[
i
][
j
] = i;

64 
B
[
i
][
j
] = j;

65 
C
[
i
][
j
] = 0;

68 
i
 = 0; i < 
Dim
; i++)

69 
j
 = 0; j < 
Dim
; j++)

70 
k
 = 0; k < 
Dim
; k++)

71 
T
[
i
][
j
][
k
] = 
A
[i][k] * 
B
[k][j];

73 
i
 = 0; i < 
Dim
; i++)

74 
j
 = 0; j < 
Dim
; j++)

75 
k
 = 0; k < 
Dim
; k++)

76 
C
[
i
][
j
] +
T
[i][j][
k
];

78 
r
 = 0;

79 
i
 = 0; i < 
Dim
; i++)

80 
r
 +
C
[
i
][i];

82 
	`¥ötf
("matmult finished.\n");

83 
	`¥ötf
("™swî is: %d (should bê%d)\n", 
r
, 
RIGHT
);

84 i‡(
r
 !
RIGHT
) {

85 
	`¥ötf
("FAILED\n");

88 
	`¥ötf
("Passed.\n");

90 
	}
}

	@user/testbin/palin/palin.c

84 
	~<°dio.h
>

85 
	~<°rög.h
>

87 
	g∑lödrome
[8000] =

174 
	$maö
()

176 *
°¨t
, *
íd
;

178 
	`¥ötf
("WelcomeÅoÅheÖalindromeÅester!\n");

179 
	`¥ötf
("I willÅakeáÜargeÖalindromeándÅest it.\n");

180 
	`¥ötf
("Here it is:\n");

181 
	`¥ötf
("%s\n", 
∑lödrome
);

183 
	`¥ötf
("Testing...");

185 
íd
 = 
∑lödrome
+
	`°æí
(palindrome);

186 
íd
--;

188 
°¨t
 = 
∑lödrome
; sèπ <
íd
; start++,Énd--) {

189 
	`putch¨
('.');

190 i‡(*
°¨t
 !*
íd
) {

191 
	`¥ötf
("NOTáÖalindrome\n");

196 
	`¥ötf
("ISáÖalindrome\n");

198 
	}
}

	@user/testbin/parallelvm/parallelvm.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/waô.h
>

41 
	~<°d¨g.h
>

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<°dlib.h
>

45 
	~<uni°d.h
>

46 
	~<îr.h
>

48 
	#NJOBS
 24

	)

50 
	#DIM
 35

	)

51 
	#NMATS
 11

	)

52 
	#JOBSIZE
 ((
NMATS
+1)*
DIM
*DIM*())

	)

54 c⁄° 
	gright_™swîs
[
NJOBS
] = {

83 
	sm©rix
 {

84 
	mm_d©a
[
DIM
][DIM];

95 
	$ßy
(c⁄° *
fmt
, ...)

97 
buf
[256];

98 
va_li°
 
≠
;

99 
	`va_°¨t
(
≠
, 
fmt
);

100 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

101 
	`va_íd
(
≠
);

102 
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
	`°æí
(buf));

103 
	}
}

109 
	$mu…ùly
(
m©rix
 *
ªs
, c⁄° m©rix *
m1
, c⁄° m©rix *
m2
)

111 
i
, 
j
, 
k
;

113 
i
=0; i<
DIM
; i++) {

114 
j
=0; j<
DIM
; j++) {

115 
vÆ
=0;

116 
k
=0; k<
DIM
; k++) {

117 
vÆ
 +
m1
->
m_d©a
[
i
][
k
]*
m2
->m_d©a[k][
j
];

119 
ªs
->
m_d©a
[
i
][
j
] = 
vÆ
;

122 
	}
}

126 
	$addeq
(
m©rix
 *
m1
, c⁄° m©rix *
m2
)

128 
i
, 
j
;

129 
i
=0; i<
DIM
; i++) {

130 
j
=0; j<
DIM
; j++) {

131 
m1
->
m_d©a
[
i
][
j
] +
m2
->m_data[i][j];

134 
	}
}

138 
	$åa˚
(c⁄° 
m©rix
 *
m1
)

140 
i
, 
t
=0;

141 
i
=0; i<
DIM
; i++) {

142 
t
 +
m1
->
m_d©a
[
i
][i];

144  
t
;

145 
	}
}

149 
m©rix
 
	gm©s
[
NMATS
];

153 
	$p›uœã_öôül_m©rixes
(
mynum
)

155 
i
,
j
;

156 
m©rix
 *
m
 = &
m©s
[0];

157 
i
=0; i<
DIM
; i++) {

158 
j
=0; j<
DIM
; j++) {

159 
m
->
m_d©a
[
i
][
j
] = 
mynum
+i-2*j;

163 
	`mu…ùly
(&
m©s
[1], &mats[0], &mats[0]);

164 
	}
}

168 
	$compuã
(
n
)

170 
m©rix
 
tmp
;

171 
i
, 
j
;

173 
i
=0,
j
=
n
-1; i<j; i++,j--) {

174 
	`mu…ùly
(&
tmp
, &
m©s
[
i
], &m©s[
j
]);

175 
	`addeq
(&
m©s
[
n
], &
tmp
);

177 
	}
}

181 
	$compuãÆl
(
mynum
)

183 
i
;

184 
	`p›uœã_öôül_m©rixes
(
mynum
);

185 
i
=2; i<
NMATS
; i++) {

186 
	`compuã
(
i
);

188 
	}
}

192 
	$™swî
()

194  
	`åa˚
(&
m©s
[
NMATS
-1]);

195 
	}
}

199 
	$go
(
mynum
)

201 
r
;

203 
	`ßy
("Pro˚s†%d (pid %dË°¨tög compuèti⁄...\n", 
mynum
,

204 (Ë
	`gëpid
());

206 
	`compuãÆl
(
mynum
);

207 
r
 = 
	`™swî
();

209 i‡(
r
 !
right_™swîs
[
mynum
]) {

210 
	`ßy
("Process %dánswer %d: FAILED, should be %d\n",

211 
mynum
, 
r
, 
right_™swîs
[mynum]);

212 
	`exô
(1);

214 
	`ßy
("Pro˚s†%dánswî %d:Öas£d\n", 
mynum
, 
r
);

215 
	`exô
(0);

216 
	}
}

222 
	$°©us_is_Áûuª
(
°©us
)

225 i‡(
	`WIFSIGNALED
(
°©us
)) {

228 i‡(!
	`WIFEXITED
(
°©us
)) {

232 
°©us
 = 
	`WEXITSTATUS
(status);

233  
°©us
 != 0;

234 
	}
}

238 
	$makïrocs
()

240 
i
, 
°©us
, 
Áûcou¡
;

241 
pid_t
 
pids
[
NJOBS
];

243 
	`¥ötf
("Job sizê≠¥oxim©ñy %lu byãs\n", (Ë
JOBSIZE
);

244 
	`¥ötf
("F‹kög %d jobs;ÅŸÆÜﬂd %luk\n", 
NJOBS
,

245 (Ë(
NJOBS
 * 
JOBSIZE
)/1024);

247 
i
=0; i<
NJOBS
; i++) {

248 
pids
[
i
] = 
	`f‹k
();

249 i‡(
pids
[
i
]<0) {

250 
	`w¨n
("fork");

252 i‡(
pids
[
i
]==0) {

254 
	`go
(
i
);

258 
Áûcou¡
=0;

259 
i
=0; i<
NJOBS
; i++) {

260 i‡(
pids
[
i
]<0) {

261 
Áûcou¡
++;

264 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

265 
	`îr
(1, "waitpid");

267 i‡(
	`°©us_is_Áûuª
(
°©us
)) {

268 
Áûcou¡
++;

273 i‡(
Áûcou¡
>0) {

274 
	`¥ötf
("%d sub¥o˚s£†Áûed\n", 
Áûcou¡
);

275 
	`exô
(1);

277 
	`¥ötf
("Test complete\n");

278 
	}
}

281 
	$maö
()

283 
	`makïrocs
();

285 
	}
}

	@user/testbin/psort/psort.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/waô.h
>

42 
	~<°dio.h
>

43 
	~<°d¨g.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~<as£π.h
>

47 
	~<uni°d.h
>

48 
	~<f˙é.h
>

49 
	~<î∫o.h
>

51 #i‚de‡
RANDOM_MAX


53 
	#RANDOM_MAX
 
RAND_MAX


	)

56 
	#PATH_KEYS
 "s‹tkeys"

	)

57 
	#PATH_SORTED
 "ouçut"

	)

58 
	#PATH_TESTDIR
 "ps‹tdú"

	)

59 
	#PATH_RANDOM
 "ønd:"

	)

61 
	#WORKNUM
 (128*1024)

	)

64 
	gw‹k•a˚
[
WORKNUM
];

66 c⁄° *
	g¥og«me
;

68 
	gnum¥ocs
 = 4;

69 
	gnumkeys
 = 10000;

70 
	gøndom£ed
 = 15432753;

72 
off_t
 
	gc‹ª˘size
;

73 
	gchecksum
;

75 
	#NOBODY
 (-1)

	)

76 
	gme
 = 
NOBODY
;

82 
	$s‹töts
(*
v
, 
num
)

84 
pivŸvÆ
, 
pivŸpoöt
, 
pivŸcou¡
;

85 
‰⁄ços
, 
ªadpos
, 
ídpos
, 
i
, 
j
;

86 
tmp
;

88 i‡(
num
 < 2) {

92 
pivŸpoöt
 = 
num
/2;

93 
pivŸvÆ
 = 
v
[
pivŸpoöt
];

94 
pivŸcou¡
 = 0;

96 
‰⁄ços
 = 0;

97 
ªadpos
 = 0;

98 
ídpos
 = 
num
;

99 
ªadpos
 < 
ídpos
) {

100 i‡(
v
[
ªadpos
] < 
pivŸvÆ
) {

101 
v
[
‰⁄ços
++] = v[
ªadpos
++];

103 i‡(
v
[
ªadpos
] =
pivŸvÆ
) {

104 
ªadpos
++;

105 
pivŸcou¡
++;

108 
tmp
 = 
v
[--
ídpos
];

109 
v
[
ídpos
] = v[
ªadpos
];

110 
v
[
ªadpos
] = 
tmp
;

113 
	`as£π
(
ªadpos
 =
ídpos
);

114 
	`as£π
(
‰⁄ços
 + 
pivŸcou¡
 =
ªadpos
);

116 
i
=
‰⁄ços
; i<
ídpos
; i++) {

117 
v
[
i
] = 
pivŸvÆ
;

120 
i
=
ídpos
, 
j
=
num
-1; i<j; i++,j--) {

121 
tmp
 = 
v
[
i
];

122 
v
[
i
] = v[
j
];

123 
v
[
j
] = 
tmp
;

126 
	`s‹töts
(
v
, 
‰⁄ços
);

127 
	`s‹töts
(&
v
[
ídpos
], 
num
-endpos);

128 
	}
}

134 
	$öô¥og«me
(c⁄° *
av0
)

136 i‡(
av0
) {

137 
¥og«me
 = 
	`°ºchr
(
av0
, '/');

138 i‡(
¥og«me
) {

139 
¥og«me
++;

142 
¥og«me
 = 
av0
;

146 
¥og«me
 = "psort";

148 
	}
}

152 
	$vscom∂aö
(*
buf
, 
size_t
 
Àn
, c⁄° *
fmt
, 
va_li°
 
≠
, 
îr
)

154 
size_t
 
pos
;

156 i‡(
me
 >= 0) {

157 
	`¢¥ötf
(
buf
, 
Àn
, "%s:Öro¯%d: ", 
¥og«me
, 
me
);

160 
	`¢¥ötf
(
buf
, 
Àn
, "%s: ", 
¥og«me
);

162 
pos
 = 
	`°æí
(
buf
);

164 
	`v¢¥ötf
(
buf
+
pos
, 
Àn
-pos, 
fmt
, 
≠
);

165 
pos
 = 
	`°æí
(
buf
);

167 i‡(
îr
 >= 0) {

168 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, ": %s\n", 
	`°ªº‹
(
îr
));

171 
	`¢¥ötf
(
buf
+
pos
, 
Àn
-pos, "\n");

173 
	}
}

177 
	$com∂aöx
(c⁄° *
fmt
, ...)

179 
rc
;

180 
buf
[256];

181 
va_li°
 
≠
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, -1);

185 
	`va_íd
(
≠
);

188 
rc
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

191 ()
rc
;

192 
	}
}

196 
	$com∂aö
(c⁄° *
fmt
, ...)

198 
rc
;

199 
buf
[256];

200 
va_li°
 
≠
;

201 
îr
 = 
î∫o
;

203 
	`va_°¨t
(
≠
, 
fmt
);

204 
	`vscom∂aö
(
buf
, (buf), 
fmt
, 
≠
, 
îr
);

205 
	`va_íd
(
≠
);

208 
rc
 = 
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

211 ()
rc
;

212 
	}
}

218 
	$do›í
(c⁄° *
∑th
, 
Êags
, 
mode
)

220 
fd
;

222 
fd
 = 
	`›í
(
∑th
, 
Êags
, 
mode
);

223 i‡(
fd
<0) {

224 
	`com∂aö
("%s", 
∑th
);

225 
	`exô
(1);

227  
fd
;

228 
	}
}

232 
	$do˛o£
(c⁄° *
∑th
, 
fd
)

234 i‡(
	`˛o£
(
fd
)) {

235 
	`com∂aö
("%s: clo£", 
∑th
);

236 
	`exô
(1);

238 
	}
}

242 
	$do¸óã
(c⁄° *
∑th
)

244 
fd
;

246 
fd
 = 
	`do›í
(
∑th
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

247 
	`do˛o£
(
∑th
, 
fd
);

248 
	}
}

252 
	$d‹emove
(c⁄° *
∑th
)

254 
n‹emove
;

256 i‡(
n‹emove
) {

260 i‡(
	`ªmove
(
∑th
) < 0) {

261 i‡(
î∫o
 =
ENOSYS
) {

263 
n‹emove
 = 1;

265 
	`com∂aö
("%s:Ñemove", 
∑th
);

267 
	}
}

270 
off_t


271 
	$gësize
(c⁄° *
∑th
)

273 
°©
 
buf
;

274 
fd
;

275 
no_°©
, 
no_f°©
;

277 i‡(!
no_°©
) {

278 i‡(
	`°©
(
∑th
, &
buf
) == 0) {

279  
buf
.
°_size
;

281 i‡(
î∫o
 !
ENOSYS
) {

282 
	`com∂aö
("%s: sèt", 
∑th
);

283 
	`exô
(1);

286 
no_°©
 = 1;

289 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

290 i‡(!
no_f°©
) {

291 i‡(
	`f°©
(
fd
, &
buf
) == 0) {

292 
	`˛o£
(
fd
);

293  
buf
.
°_size
;

295 i‡(
î∫o
 !
ENOSYS
) {

296 
	`com∂aö
("%s: sèt", 
∑th
);

297 
	`exô
(1);

300 
no_f°©
 = 1;

304 i‡(
	`l£ek
(
fd
, 0, 
SEEK_END
) >= 0) {

305 
buf
.
°_size
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

306 i‡(
buf
.
°_size
 >= 0) {

307  
buf
.
°_size
;

310 
	`com∂aö
("%s: gëtög fûêsizêwôhÜ£ek", 
∑th
);

311 
	`˛o£
(
fd
);

312 
	`exô
(1);

313 
	}
}

316 
size_t


317 
	$d‹ód
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

319 
ªsu…
;

321 
ªsu…
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

322 i‡(
ªsu…
 < 0) {

323 
	`com∂aö
("%s:Ñód", 
∑th
);

324 
	`exô
(1);

326  (
size_t
Ë
ªsu…
;

327 
	}
}

331 
	$d€xa˘ªad
(c⁄° *
∑th
, 
fd
, *
buf
, 
size_t
 
Àn
)

333 
size_t
 
ªsu…
;

335 
ªsu…
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, 
Àn
);

336 i‡(
ªsu…
 !
Àn
) {

337 
	`com∂aöx
("%s:Ñód: sh‹àcou¡", 
∑th
);

338 
	`exô
(1);

340 
	}
}

344 
	$dowrôe
(c⁄° *
∑th
, 
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

346 
ªsu…
;

348 
ªsu…
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

349 i‡(
ªsu…
 < 0) {

350 
	`com∂aö
("%s: wrôe", 
∑th
);

351 
	`exô
(1);

353 i‡((
size_t
Ë
ªsu…
 !
Àn
) {

354 
	`com∂aöx
("%s: wrôe: sh‹àcou¡", 
∑th
);

355 
	`exô
(1);

357 
	}
}

361 
	$dﬁ£ek
(c⁄° *
«me
, 
fd
, 
off_t
 
off£t
, 
whí˚
)

363 i‡(
	`l£ek
(
fd
, 
off£t
, 
whí˚
) < 0) {

364 
	`com∂aö
("%s:Ü£ek", 
«me
);

365 
	`exô
(1);

367 
	}
}

372 
	$dochdú
(c⁄° *
∑th
)

374 i‡(
	`chdú
(
∑th
) < 0) {

375 
	`com∂aö
("%s: chdú", 
∑th
);

376 
	`exô
(1);

378 
	}
}

382 
	$domkdú
(c⁄° *
∑th
, 
mode
)

384 i‡(
	`mkdú
(
∑th
, 
mode
) < 0) {

385 
	`com∂aö
("%s: mkdú", 
∑th
);

386 
	`exô
(1);

388 
	}
}

392 
pid_t


393 
	$dof‹k
()

395 
pid_t
 
pid
;

397 
pid
 = 
	`f‹k
();

398 i‡(
pid
 < 0) {

399 
	`com∂aö
("fork");

403  
pid
;

404 
	}
}

410 
	$dowaô
(
guy
, 
pid_t
 
pid
)

412 
°©us
, 
ªsu…
;

414 
ªsu…
 = 
	`waôpid
(
pid
, &
°©us
, 0);

415 i‡(
ªsu…
 < 0) {

416 
	`com∂aö
("waitpid");

419 i‡(
	`WIFSIGNALED
(
°©us
)) {

420 
	`com∂aöx
("¥o¯%d: sig«»%d", 
guy
, 
	`WTERMSIG
(
°©us
));

423 
	`as£π
(
	`WIFEXITED
(
°©us
));

424 
°©us
 = 
	`WEXITSTATUS
(status);

425 i‡(
°©us
) {

426 
	`com∂aöx
("¥o¯%d:Éxô %d", 
guy
, 
°©us
);

430 
	}
}

434 
dof‹kÆl
(c⁄° *
pha£«me
, (*
func
)())

436 
i
, 
bad
 = 0;

437 
pid_t
 
pids
[
num¥ocs
];

439 
i
=0; i<
num¥ocs
; i++) {

440 
pids
[
i
] = 
	`dof‹k
();

441 i‡(
pids
[
i
] < 0) {

442 
bad
 = 1;

444 i‡(
pids
[
i
] == 0) {

446 
me
 = 
i
;

447 
	`func
();

448 
	`exô
(0);

452 
i
=0; i<
num¥ocs
; i++) {

453 i‡(
pids
[
i
] > 0 && 
	`dowaô
(i,Öids[i])) {

454 
bad
 = 1;

458 i‡(
bad
) {

459 
	`com∂aöx
("%†Áûed.", 
pha£«me
);

460 
	`exô
(1);

462 
	}
}

466 
	$£ekmy∂a˚
(c⁄° *
«me
, 
fd
)

468 
keys_≥r
, 
myfú°
;

469 
off_t
 
off£t
;

471 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

472 
myfú°
 = 
me
*
keys_≥r
;

473 
off£t
 = 
myfú°
 * ();

475 
	`dﬁ£ek
(
«me
, 
fd
, 
off£t
, 
SEEK_SET
);

476 
	}
}

480 
	$gëmykeys
()

482 
keys_≥r
, 
myfú°
, 
mykeys
;

484 
keys_≥r
 = 
numkeys
 / 
num¥ocs
;

485 
myfú°
 = 
me
*
keys_≥r
;

486 
mykeys
 = (
me
 < 
num¥ocs
-1Ë? 
keys_≥r
 : 
numkeys
 - 
myfú°
;

488  
mykeys
;

489 
	}
}

495 
	$checksum_fûe
(c⁄° *
∑th
)

497 
fd
;

498 
buf
[512];

499 
size_t
 
cou¡
, 
i
;

500 
sum
 = 0;

502 
fd
 = 
	`do›í
(
∑th
, 
O_RDONLY
, 0);

504 (
cou¡
 = 
	`d‹ód
(
∑th
, 
fd
, 
buf
, (buf))) > 0) {

505 
i
=0; i<
cou¡
; i++) {

506 
sum
 +(Ë
buf
[
i
];

510 
	`do˛o£
(
∑th
, 
fd
);

512  
sum
;

513 
	}
}

517 *
	g£eds
;

521 
	$gíkeys_sub
()

523 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
, 
vÆue
;

525 
fd
 = 
	`do›í
(
PATH_KEYS
, 
O_WRONLY
, 0);

527 
mykeys
 = 
	`gëmykeys
();

528 
	`£ekmy∂a˚
(
PATH_KEYS
, 
fd
);

530 
	`§™dom
(
£eds
[
me
]);

531 
keys_d⁄e
 = 0;

532 
keys_d⁄e
 < 
mykeys
) {

533 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

534 i‡(
keys_to_do
 > 
WORKNUM
) {

535 
keys_to_do
 = 
WORKNUM
;

538 
i
=0; i<
keys_to_do
; i++) {

539 
vÆue
 = 
	`øndom
();

542 
	`as£π
(
vÆue
 >= 0);

543 
	`as£π
(
vÆue
 <
RANDOM_MAX
);

546 
vÆue
 =0 || vÆuê=
RANDOM_MAX
) {

547 
vÆue
 = 
	`øndom
();

550 
w‹k•a˚
[
i
] = 
vÆue
;

553 
	`dowrôe
(
PATH_KEYS
, 
fd
, 
w‹k•a˚
, 
keys_to_do
*());

554 
keys_d⁄e
 +
keys_to_do
;

557 
	`do˛o£
(
PATH_KEYS
, 
fd
);

558 
	}
}

562 
	$gíkeys
()

564 
£ed•a˚
[
num¥ocs
];

565 
i
;

568 
	`do¸óã
(
PATH_KEYS
);

571 
	`§™dom
(
øndom£ed
);

572 
i
=0; i<
num¥ocs
; i++) {

573 
£ed•a˚
[
i
] = 
	`øndom
();

577 
£eds
 = 
£ed•a˚
;

578 
	`dof‹kÆl
("Inôüliz©i⁄", 
gíkeys_sub
);

579 
£eds
 = 
NULL
;

582 i‡(
	`gësize
(
PATH_KEYS
Ë!
c‹ª˘size
) {

583 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_KEYS
);

584 
	`exô
(1);

588 
checksum
 = 
	`checksum_fûe
(
PATH_KEYS
);

589 
	`com∂aöx
("Checksum o‡uns‹ãd keys: %ld", 
checksum
);

590 
	}
}

596 
	$bö«me
(
a
, 
b
)

598 
rv
[32];

599 
	`¢¥ötf
(
rv
, ‘v), "bö-%d-%d", 
a
, 
b
);

600  
rv
;

601 
	}
}

605 
	$mîged«me
(
a
)

607 
rv
[32];

608 
	`¢¥ötf
(
rv
, ‘v), "mîged-%d", 
a
);

609  
rv
;

610 
	}
}

614 
	$bö
()

616 
öfd
, 
outfds
[
num¥ocs
];

617 c⁄° *
«me
;

618 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

619 
key
, 
pivŸ
, 
bönum
;

621 
öfd
 = 
	`do›í
(
PATH_KEYS
, 
O_RDONLY
, 0);

623 
mykeys
 = 
	`gëmykeys
();

624 
	`£ekmy∂a˚
(
PATH_KEYS
, 
öfd
);

626 
i
=0; i<
num¥ocs
; i++) {

627 
«me
 = 
	`bö«me
(
me
, 
i
);

628 
outfds
[
i
] = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

631 
pivŸ
 = (
RANDOM_MAX
 / 
num¥ocs
);

633 
keys_d⁄e
 = 0;

634 
keys_d⁄e
 < 
mykeys
) {

635 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

636 i‡(
keys_to_do
 > 
WORKNUM
) {

637 
keys_to_do
 = 
WORKNUM
;

640 
	`d€xa˘ªad
(
PATH_KEYS
, 
öfd
, 
w‹k•a˚
,

641 
keys_to_do
 * ());

643 
i
=0; i<
keys_to_do
; i++) {

644 
key
 = 
w‹k•a˚
[
i
];

646 
bönum
 = 
key
 / 
pivŸ
;

647 i‡(
key
 <= 0) {

648 
	`com∂aöx
("¥o¯%d: g¨bagêkey %d", 
me
, 
key
);

649 
key
 = 0;

651 
	`as£π
(
bönum
 >= 0);

652 
	`as£π
(
bönum
 < 
num¥ocs
);

653 
	`dowrôe
("bö", 
outfds
[
bönum
], &
key
, (key));

656 
keys_d⁄e
 +
keys_to_do
;

658 
	`do˛o£
(
PATH_KEYS
, 
öfd
);

660 
i
=0; i<
num¥ocs
; i++) {

661 
	`do˛o£
(
	`bö«me
(
me
, 
i
), 
outfds
[i]);

663 
	}
}

667 
	$s‹tbös
()

669 c⁄° *
«me
;

670 
i
, 
fd
;

671 
off_t
 
bösize
;

673 
i
=0; i<
num¥ocs
; i++) {

674 
«me
 = 
	`bö«me
(
me
, 
i
);

675 
bösize
 = 
	`gësize
(
«me
);

676 i‡(
bösize
 % () != 0) {

677 
	`com∂aöx
("%s: bö sizê%ldÇÿgood", 
«me
,

678 (Ë
bösize
);

679 
	`exô
(1);

681 i‡(
bösize
 > (
off_t
Ë(
w‹k•a˚
)) {

682 
	`com∂aöx
("¥o¯%d: %s: böÅoÿœrge", 
me
, 
«me
);

683 
	`exô
(1);

686 
fd
 = 
	`do›í
(
«me
, 
O_RDWR
, 0);

687 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

689 
	`s‹töts
(
w‹k•a˚
, 
bösize
/());

691 
	`dﬁ£ek
(
«me
, 
fd
, 0, 
SEEK_SET
);

692 
	`dowrôe
(
«me
, 
fd
, 
w‹k•a˚
, 
bösize
);

693 
	`do˛o£
(
«me
, 
fd
);

695 
	}
}

699 
	$mîgebös
()

701 
öfds
[
num¥ocs
], 
outfd
;

702 
vÆues
[
num¥ocs
], 
ªady
[numprocs];

703 c⁄° *
«me
, *
ouäame
;

704 
i
, 
ªsu…
;

705 
numªady
, 
∂a˚
, 
vÆ
, 
w‹knum
;

707 
ouäame
 = 
	`mîged«me
(
me
);

708 
outfd
 = 
	`do›í
(
ouäame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

710 
i
=0; i<
num¥ocs
; i++) {

711 
«me
 = 
	`bö«me
(
i
, 
me
);

712 
öfds
[
i
] = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

713 
vÆues
[
i
] = 0;

714 
ªady
[
i
] = 0;

717 
w‹knum
 = 0;

720 
numªady
 = 0;

721 
i
=0; i<
num¥ocs
; i++) {

722 i‡(
öfds
[
i
] < 0) {

726 i‡(!
ªady
[
i
]) {

727 
ªsu…
 = 
	`d‹ód
("bö", 
öfds
[
i
],

728 &
vÆ
, ());

729 i‡(
ªsu…
 == 0) {

730 
	`do˛o£
("bö", 
öfds
[
i
]);

731 
öfds
[
i
] = -1;

734 i‡((
size_t
Ë
ªsu…
 != ()) {

735 
	`com∂aöx
("%s:Ñead: short count",

736 
	`bö«me
(
i
, 
me
));

737 
	`exô
(1);

739 
vÆues
[
i
] = 
vÆ
;

740 
ªady
[
i
] = 1;

742 
numªady
++;

744 i‡(
numªady
 == 0) {

749 
∂a˚
 = -1;

750 
i
=0; i<
num¥ocs
; i++) {

751 i‡(!
ªady
[
i
]) {

754 i‡(
∂a˚
 < 0 || 
vÆues
[
i
] < 
vÆ
) {

755 
vÆ
 = 
vÆues
[
i
];

756 
∂a˚
 = 
i
;

759 
	`as£π
(
∂a˚
 >= 0);

761 
w‹k•a˚
[
w‹knum
++] = 
vÆ
;

762 i‡(
w‹knum
 >
WORKNUM
) {

763 
	`as£π
(
w‹knum
 =
WORKNUM
);

764 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
,

765 
w‹knum
 * ());

766 
w‹knum
 = 0;

768 
ªady
[
∂a˚
] = 0;

771 
	`dowrôe
(
ouäame
, 
outfd
, 
w‹k•a˚
, 
w‹knum
 * ());

772 
	`do˛o£
(
ouäame
, 
outfd
);

774 
i
=0; i<
num¥ocs
; i++) {

775 
	`as£π
(
öfds
[
i
] < 0);

777 
	}
}

781 
	$as£mbÀ
()

783 
off_t
 
mypos
;

784 
i
, 
fd
;

785 c⁄° *
¨gs
[3];

787 
mypos
 = 0;

788 
i
=0; i<
me
; i++) {

789 
mypos
 +
	`gësize
(
	`mîged«me
(
i
));

792 
fd
 = 
	`do›í
(
PATH_SORTED
, 
O_WRONLY
, 0);

793 
	`dﬁ£ek
(
PATH_SORTED
, 
fd
, 
mypos
, 
SEEK_SET
);

795 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) < 0) {

796 
	`com∂aö
("dup2");

797 
	`exô
(1);

800 
	`do˛o£
(
PATH_SORTED
, 
fd
);

802 
¨gs
[0] = "cat";

803 
¨gs
[1] = 
	`mîged«me
(
me
);

804 
¨gs
[2] = 
NULL
;

805 
	`execv
("/bö/ˇt", (**Ë
¨gs
);

806 
	`com∂aö
("/bin/cat:Éxec");

807 
	`exô
(1);

808 
	}
}

812 
	$checksize_bös
()

814 
off_t
 
tŸsize
;

815 
i
, 
j
;

817 
tŸsize
 = 0;

818 
i
=0; i<
num¥ocs
; i++) {

819 
j
=0; j<
num¥ocs
; j++) {

820 
tŸsize
 +
	`gësize
(
	`bö«me
(
i
, 
j
));

823 i‡(
tŸsize
 !
c‹ª˘size
) {

824 
	`com∂aö
("Sum of bin sizes is wrong (%ld, should be %ld)",

825 (Ë
tŸsize
, (Ë
c‹ª˘size
);

826 
	`exô
(1);

828 
	}
}

832 
	$checksize_mîge
()

834 
off_t
 
tŸsize
;

835 
i
;

837 
tŸsize
 = 0;

838 
i
=0; i<
num¥ocs
; i++) {

839 
tŸsize
 +
	`gësize
(
	`mîged«me
(
i
));

841 i‡(
tŸsize
 !
c‹ª˘size
) {

842 
	`com∂aö
("Sum of merged sizes is wrong (%ld, should be %ld)",

843 (Ë
tŸsize
, (Ë
c‹ª˘size
);

844 
	`exô
(1);

846 
	}
}

850 
	$s‹t
()

852 
s‹ãdsum
;

853 
i
, 
j
;

856 
	`dof‹kÆl
("Tossög", 
bö
);

857 
	`checksize_bös
();

858 
	`com∂aöx
("DoneÅossing into bins.");

861 
	`dof‹kÆl
("S‹tög", 
s‹tbös
);

862 
	`checksize_bös
();

863 
	`com∂aöx
("Done sortingÅhe bins.");

866 
	`dof‹kÆl
("Mîgög", 
mîgebös
);

867 
	`checksize_mîge
();

868 
	`com∂aöx
("Done mergingÅhe bins.");

871 
i
=0; i<
num¥ocs
; i++) {

872 
j
=0; j<
num¥ocs
; j++) {

873 
	`d‹emove
(
	`bö«me
(
i
, 
j
));

878 
	`do¸óã
(
PATH_SORTED
);

879 
	`dof‹kÆl
("FöÆás£mbly", 
as£mbÀ
);

880 i‡(
	`gësize
(
PATH_SORTED
Ë!
c‹ª˘size
) {

881 
	`com∂aöx
("%s: fûêi†wr⁄g size", 
PATH_SORTED
);

882 
	`exô
(1);

886 
i
=0; i<
num¥ocs
; i++) {

887 
	`d‹emove
(
	`mîged«me
(
i
));

891 
s‹ãdsum
 = 
	`checksum_fûe
(
PATH_SORTED
);

892 
	`com∂aöx
("Checksum o‡s‹ãd keys: %ld", 
s‹ãdsum
);

894 i‡(
s‹ãdsum
 !
checksum
) {

895 
	`com∂aöx
("Sums doÇot match");

896 
	`exô
(1);

898 
	}
}

904 
	$vÆid«me
(
a
)

906 
rv
[32];

907 
	`¢¥ötf
(
rv
, ‘v), "vÆid-%d", 
a
);

908  
rv
;

909 
	}
}

913 
	$checksize_vÆid
()

915 
off_t
 
tŸvsize
, 
c‹ª˘vsize
;

916 
i
;

918 
c‹ª˘vsize
 = (
off_t
Ë
num¥ocs
*2*();

920 
tŸvsize
 = 0;

921 
i
=0; i<
num¥ocs
; i++) {

922 
tŸvsize
 +
	`gësize
(
	`vÆid«me
(
i
));

924 i‡(
tŸvsize
 !
c‹ª˘vsize
) {

925 
	`com∂aöx
("Sum of validation sizes is wrong "

927 (Ë
tŸvsize
, (Ë
c‹ª˘vsize
);

928 
	`exô
(1);

930 
	}
}

934 
	$dovÆid©e
()

936 c⁄° *
«me
;

937 
fd
, 
i
, 
mykeys
, 
keys_d⁄e
, 
keys_to_do
;

938 
key
, 
smÆÀ°
, 
œrge°
;

940 
«me
 = 
PATH_SORTED
;

941 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

943 
mykeys
 = 
	`gëmykeys
();

944 
	`£ekmy∂a˚
(
«me
, 
fd
);

946 
smÆÀ°
 = 
RANDOM_MAX
;

947 
œrge°
 = 0;

949 
keys_d⁄e
 = 0;

950 
keys_d⁄e
 < 
mykeys
) {

951 
keys_to_do
 = 
mykeys
 - 
keys_d⁄e
;

952 i‡(
keys_to_do
 > 
WORKNUM
) {

953 
keys_to_do
 = 
WORKNUM
;

956 
	`d€xa˘ªad
(
«me
, 
fd
, 
w‹k•a˚
, 
keys_to_do
 * ());

958 
i
=0; i<
keys_to_do
; i++) {

959 
key
 = 
w‹k•a˚
[
i
];

961 i‡(
key
 < 0) {

962 
	`com∂aö
("%s: foundÇeg©ivêkey", 
«me
);

963 
	`exô
(1);

965 i‡(
key
 == 0) {

966 
	`com∂aö
("%s: found zîÿkey", 
«me
);

967 
	`exô
(1);

969 i‡(
key
 >
RANDOM_MAX
) {

970 
	`com∂aö
("%s: foundÅoo-œrgêkey", 
«me
);

971 
	`exô
(1);

974 i‡(
key
 < 
smÆÀ°
) {

975 
smÆÀ°
 = 
key
;

977 i‡(
key
 > 
œrge°
) {

978 
œrge°
 = 
key
;

982 
keys_d⁄e
 +
keys_to_do
;

984 
	`do˛o£
(
«me
, 
fd
);

986 
«me
 = 
	`vÆid«me
(
me
);

987 
fd
 = 
	`do›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

988 
	`dowrôe
(
«me
, 
fd
, &
smÆÀ°
, (smallest));

989 
	`dowrôe
(
«me
, 
fd
, &
œrge°
, (largest));

990 
	`do˛o£
(
«me
, 
fd
);

991 
	}
}

995 
	$vÆid©e
()

997 
smÆÀ°
, 
œrge°
, 
¥ev_œrge°
;

998 
i
, 
fd
;

999 c⁄° *
«me
;

1001 
	`dof‹kÆl
("VÆid©i⁄", 
dovÆid©e
);

1002 
	`checksize_vÆid
();

1004 
¥ev_œrge°
 = 1;

1006 
i
=0; i<
num¥ocs
; i++) {

1007 
«me
 = 
	`vÆid«me
(
i
);

1008 
fd
 = 
	`do›í
(
«me
, 
O_RDONLY
, 0);

1010 
	`d€xa˘ªad
(
«me
, 
fd
, &
smÆÀ°
, ());

1011 
	`d€xa˘ªad
(
«me
, 
fd
, &
œrge°
, ());

1013 i‡(
smÆÀ°
 < 1) {

1014 
	`com∂aöx
("VÆid©i⁄: block %d: bad SMALLEST", 
i
);

1015 
	`exô
(1);

1017 i‡(
œrge°
 >
RANDOM_MAX
) {

1018 
	`com∂aöx
("VÆid©i⁄: block %d: bad LARGEST", 
i
);

1019 
	`exô
(1);

1021 i‡(
smÆÀ°
 > 
œrge°
) {

1022 
	`com∂aöx
("Validation: block %d: SMALLEST > LARGEST",

1023 
i
);

1024 
	`exô
(1);

1027 i‡(
smÆÀ°
 < 
¥ev_œrge°
) {

1028 
	`com∂aö
("Validation: block %d smallest key %d",

1029 
i
, 
smÆÀ°
);

1030 
	`com∂aö
("Validation:Örevious blockÜargest key %d",

1031 
¥ev_œrge°
);

1032 
	`com∂aö
("Validation failed");

1033 
	`exô
(1);

1038 
i
=0; i<
num¥ocs
; i++) {

1039 
	`d‹emove
(
	`vÆid«me
(
i
));

1041 
	}
}

1047 
	$£tdú
()

1050 
	`domkdú
(
PATH_TESTDIR
, 0775);

1051 
	`dochdú
(
PATH_TESTDIR
);

1053 
	}
}

1057 
	$un£tdú
()

1059 
	`d‹emove
(
PATH_KEYS
);

1060 
	`d‹emove
(
PATH_SORTED
);

1062 
	`dochdú
("..");

1064 i‡(
	`rmdú
(
PATH_TESTDIR
) < 0) {

1065 
	`com∂aö
("%s:Ñmdú", 
PATH_TESTDIR
);

1069 
	}
}

1075 
	$øndomize
()

1077 
fd
;

1079 
fd
 = 
	`do›í
(
PATH_RANDOM
, 
O_RDONLY
, 0);

1080 
	`d€xa˘ªad
(
PATH_RANDOM
, 
fd
, &
øndom£ed
, (randomseed));

1081 
	`do˛o£
(
PATH_RANDOM
, 
fd
);

1082 
	}
}

1086 
	$ußge
()

1088 
	`com∂aö
("Ußge: %†[-∞¥ocs] [-k keys] [-†£ed] [-r]", 
¥og«me
);

1089 
	`exô
(1);

1090 
	}
}

1094 
	$dﬂrgs
(
¨gc
, *
¨gv
[])

1096 
i
, 
ch
, 
vÆ
, 
¨g
;

1098 
i
=1; i<
¨gc
; i++) {

1099 i‡(
¨gv
[
i
][0] != '-') {

1100 
	`ußge
();

1103 
ch
 = 
¨gv
[
i
][1];

1104 
ch
) {

1105 'p': 
¨g
 = 1; ;

1106 'k': 
¨g
 = 1; ;

1107 's': 
¨g
 = 1; ;

1108 'r': 
¨g
 = 0; ;

1109 : 
	`ußge
(); ;

1111 i‡(
¨g
) {

1112 i‡(
¨gv
[
i
][2]) {

1113 
vÆ
 = 
	`©oi
(
¨gv
[
i
]+2);

1116 
i
++;

1117 i‡(!
¨gv
[
i
]) {

1118 
	`com∂aö
("Option -%cÑequiresán "

1119 "¨gumít", 
ch
);

1120 
	`exô
(1);

1122 
vÆ
 = 
	`©oi
(
¨gv
[
i
]);

1124 
ch
) {

1125 'p': 
num¥ocs
 = 
vÆ
; ;

1126 'k': 
numkeys
 = 
vÆ
; ;

1127 's': 
øndom£ed
 = 
vÆ
; ;

1128 : 
	`as£π
(0); ;

1132 
ch
) {

1133 'r': 
	`øndomize
(); ;

1134 : 
	`as£π
(0); ;

1138 
	}
}

1141 
	$maö
(
¨gc
, *
¨gv
[])

1143 
	`öô¥og«me
(
¨gc
 > 0 ? 
¨gv
[0] : 
NULL
);

1145 
	`dﬂrgs
(
¨gc
, 
¨gv
);

1146 
c‹ª˘size
 = (
off_t
Ë(
numkeys
*());

1148 
	`£tdú
();

1150 
	`gíkeys
();

1151 
	`s‹t
();

1152 
	`vÆid©e
();

1153 
	`com∂aöx
("Succeeded.");

1155 
	`un£tdú
();

1158 
	}
}

	@user/testbin/randcall/calls.c

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<as£π.h
>

5 
	~<uni°d.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<î∫o.h
>

9 
	~<îr.h
>

11 
	~"exã∫.h
"

13 (*
	tåyfunc
)(
	tdof‹k
);

17 
	$åy_execv
(
dof‹k
)

19 * 
a0
 = 
	`ønd±r
();

20 * 
a1
 = 
	`ønd±r
();

21 
ªsu…
, 
pid
, 
°©us
;

22 
buf
[128];

24 
	`¢¥ötf
(
buf
, (buf), "execv(%p, %p)",

25 (
a0
), (
a1
));

26 
	`¥ötf
("%-47s", 
buf
);

28 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

29 i‡(
pid
<0) {

30 
	`îr
(1, "fork");

32 i‡(
pid
>0) {

33 
	`waôpid
(
pid
, &
°©us
, 0);

37 
ªsu…
 = 
	`execv
(
a0
, 
a1
);

38 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

39 i‡(
dof‹k
) {

40 
	`exô
(0);

42 
	}
}

46 
	$åy_waôpid
(
dof‹k
)

48 
a0
 = 
	`øndöt
();

49 * 
a1
 = 
	`ønd±r
();

50 
a2
 = 
	`øndöt
();

51 
ªsu…
, 
pid
, 
°©us
;

52 
buf
[128];

54 
	`¢¥ötf
(
buf
, (buf), "waitpid(%d, %p, %d)",

55 (
a0
), (
a1
), (
a2
));

56 
	`¥ötf
("%-47s", 
buf
);

58 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

59 i‡(
pid
<0) {

60 
	`îr
(1, "fork");

62 i‡(
pid
>0) {

63 
	`waôpid
(
pid
, &
°©us
, 0);

67 
ªsu…
 = 
	`waôpid
(
a0
, 
a1
, 
a2
);

68 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

69 i‡(
dof‹k
) {

70 
	`exô
(0);

72 
	}
}

76 
	$åy_›í
(
dof‹k
)

78 * 
a0
 = 
	`ønd±r
();

79 
a1
 = 
	`øndöt
();

80 
a2
 = 
	`øndöt
();

81 
ªsu…
, 
pid
, 
°©us
;

82 
buf
[128];

84 
	`¢¥ötf
(
buf
, (buf), "open(%p, %d, %d)",

85 (
a0
), (
a1
), (
a2
));

86 
	`¥ötf
("%-47s", 
buf
);

88 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

89 i‡(
pid
<0) {

90 
	`îr
(1, "fork");

92 i‡(
pid
>0) {

93 
	`waôpid
(
pid
, &
°©us
, 0);

97 
ªsu…
 = 
	`›í
(
a0
, 
a1
, 
a2
);

98 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

99 i‡(
dof‹k
) {

100 
	`exô
(0);

102 
	}
}

106 
	$åy_ªad
(
dof‹k
)

108 
a0
 = 
	`øndöt
();

109 * 
a1
 = 
	`ønd±r
();

110 
size_t
 
a2
 = 
	`øndsize
();

111 
ªsu…
, 
pid
, 
°©us
;

112 
buf
[128];

114 
	`¢¥ötf
(
buf
, (buf), "read(%d, %p, %lu)",

115 (
a0
), (
a1
), ()(
a2
));

116 
	`¥ötf
("%-47s", 
buf
);

118 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

119 i‡(
pid
<0) {

120 
	`îr
(1, "fork");

122 i‡(
pid
>0) {

123 
	`waôpid
(
pid
, &
°©us
, 0);

127 
ªsu…
 = 
	`ªad
(
a0
, 
a1
, 
a2
);

128 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

129 i‡(
dof‹k
) {

130 
	`exô
(0);

132 
	}
}

136 
	$åy_wrôe
(
dof‹k
)

138 
a0
 = 
	`øndöt
();

139 * 
a1
 = 
	`ønd±r
();

140 
size_t
 
a2
 = 
	`øndsize
();

141 
ªsu…
, 
pid
, 
°©us
;

142 
buf
[128];

144 
	`¢¥ötf
(
buf
, (buf), "write(%d, %p, %lu)",

145 (
a0
), (
a1
), ()(
a2
));

146 
	`¥ötf
("%-47s", 
buf
);

148 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

149 i‡(
pid
<0) {

150 
	`îr
(1, "fork");

152 i‡(
pid
>0) {

153 
	`waôpid
(
pid
, &
°©us
, 0);

157 
ªsu…
 = 
	`wrôe
(
a0
, 
a1
, 
a2
);

158 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

159 i‡(
dof‹k
) {

160 
	`exô
(0);

162 
	}
}

166 
	$åy_˛o£
(
dof‹k
)

168 
a0
 = 
	`øndöt
();

169 
ªsu…
, 
pid
, 
°©us
;

170 
buf
[128];

172 
	`¢¥ötf
(
buf
, (buf), "close(%d)",

173 (
a0
));

174 
	`¥ötf
("%-47s", 
buf
);

176 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

177 i‡(
pid
<0) {

178 
	`îr
(1, "fork");

180 i‡(
pid
>0) {

181 
	`waôpid
(
pid
, &
°©us
, 0);

185 
ªsu…
 = 
	`˛o£
(
a0
);

186 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

187 i‡(
dof‹k
) {

188 
	`exô
(0);

190 
	}
}

194 
	$åy_io˘l
(
dof‹k
)

196 
a0
 = 
	`øndöt
();

197 
a1
 = 
	`øndöt
();

198 * 
a2
 = 
	`ønd±r
();

199 
ªsu…
, 
pid
, 
°©us
;

200 
buf
[128];

202 
	`¢¥ötf
(
buf
, (buf), "ioctl(%d, %d, %p)",

203 (
a0
), (
a1
), (
a2
));

204 
	`¥ötf
("%-47s", 
buf
);

206 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

207 i‡(
pid
<0) {

208 
	`îr
(1, "fork");

210 i‡(
pid
>0) {

211 
	`waôpid
(
pid
, &
°©us
, 0);

215 
ªsu…
 = 
	`io˘l
(
a0
, 
a1
, 
a2
);

216 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

217 i‡(
dof‹k
) {

218 
	`exô
(0);

220 
	}
}

224 
	$åy_l£ek
(
dof‹k
)

226 
a0
 = 
	`øndöt
();

227 
off_t
 
a1
 = 
	`øndoff
();

228 
a2
 = 
	`øndöt
();

229 
ªsu…
, 
pid
, 
°©us
;

230 
buf
[128];

232 
	`¢¥ötf
(
buf
, (buf), "lseek(%d, %ld, %d)",

233 (
a0
), ()(
a1
), (
a2
));

234 
	`¥ötf
("%-47s", 
buf
);

236 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

237 i‡(
pid
<0) {

238 
	`îr
(1, "fork");

240 i‡(
pid
>0) {

241 
	`waôpid
(
pid
, &
°©us
, 0);

245 
ªsu…
 = 
	`l£ek
(
a0
, 
a1
, 
a2
);

246 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

247 i‡(
dof‹k
) {

248 
	`exô
(0);

250 
	}
}

254 
	$åy_fsync
(
dof‹k
)

256 
a0
 = 
	`øndöt
();

257 
ªsu…
, 
pid
, 
°©us
;

258 
buf
[128];

260 
	`¢¥ötf
(
buf
, (buf), "fsync(%d)",

261 (
a0
));

262 
	`¥ötf
("%-47s", 
buf
);

264 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

265 i‡(
pid
<0) {

266 
	`îr
(1, "fork");

268 i‡(
pid
>0) {

269 
	`waôpid
(
pid
, &
°©us
, 0);

273 
ªsu…
 = 
	`fsync
(
a0
);

274 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

275 i‡(
dof‹k
) {

276 
	`exô
(0);

278 
	}
}

282 
	$åy_·runˇã
(
dof‹k
)

284 
a0
 = 
	`øndöt
();

285 
off_t
 
a1
 = 
	`øndoff
();

286 
ªsu…
, 
pid
, 
°©us
;

287 
buf
[128];

289 
	`¢¥ötf
(
buf
, (buf), "ftruncate(%d, %ld)",

290 (
a0
), ()(
a1
));

291 
	`¥ötf
("%-47s", 
buf
);

293 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

294 i‡(
pid
<0) {

295 
	`îr
(1, "fork");

297 i‡(
pid
>0) {

298 
	`waôpid
(
pid
, &
°©us
, 0);

302 
ªsu…
 = 
	`·runˇã
(
a0
, 
a1
);

303 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

304 i‡(
dof‹k
) {

305 
	`exô
(0);

307 
	}
}

311 
	$åy_f°©
(
dof‹k
)

313 
a0
 = 
	`øndöt
();

314 * 
a1
 = 
	`ønd±r
();

315 
ªsu…
, 
pid
, 
°©us
;

316 
buf
[128];

318 
	`¢¥ötf
(
buf
, (buf), "fstat(%d, %p)",

319 (
a0
), (
a1
));

320 
	`¥ötf
("%-47s", 
buf
);

322 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

323 i‡(
pid
<0) {

324 
	`îr
(1, "fork");

326 i‡(
pid
>0) {

327 
	`waôpid
(
pid
, &
°©us
, 0);

331 
ªsu…
 = 
	`f°©
(
a0
, 
a1
);

332 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

333 i‡(
dof‹k
) {

334 
	`exô
(0);

336 
	}
}

340 
	$åy_ªmove
(
dof‹k
)

342 * 
a0
 = 
	`ønd±r
();

343 
ªsu…
, 
pid
, 
°©us
;

344 
buf
[128];

346 
	`¢¥ötf
(
buf
, (buf), "remove(%p)",

347 (
a0
));

348 
	`¥ötf
("%-47s", 
buf
);

350 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

351 i‡(
pid
<0) {

352 
	`îr
(1, "fork");

354 i‡(
pid
>0) {

355 
	`waôpid
(
pid
, &
°©us
, 0);

359 
ªsu…
 = 
	`ªmove
(
a0
);

360 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

361 i‡(
dof‹k
) {

362 
	`exô
(0);

364 
	}
}

368 
	$åy_ª«me
(
dof‹k
)

370 * 
a0
 = 
	`ønd±r
();

371 * 
a1
 = 
	`ønd±r
();

372 
ªsu…
, 
pid
, 
°©us
;

373 
buf
[128];

375 
	`¢¥ötf
(
buf
, (buf), "rename(%p, %p)",

376 (
a0
), (
a1
));

377 
	`¥ötf
("%-47s", 
buf
);

379 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

380 i‡(
pid
<0) {

381 
	`îr
(1, "fork");

383 i‡(
pid
>0) {

384 
	`waôpid
(
pid
, &
°©us
, 0);

388 
ªsu…
 = 
	`ª«me
(
a0
, 
a1
);

389 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

390 i‡(
dof‹k
) {

391 
	`exô
(0);

393 
	}
}

397 
	$åy_lök
(
dof‹k
)

399 * 
a0
 = 
	`ønd±r
();

400 * 
a1
 = 
	`ønd±r
();

401 
ªsu…
, 
pid
, 
°©us
;

402 
buf
[128];

404 
	`¢¥ötf
(
buf
, (buf), "link(%p, %p)",

405 (
a0
), (
a1
));

406 
	`¥ötf
("%-47s", 
buf
);

408 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

409 i‡(
pid
<0) {

410 
	`îr
(1, "fork");

412 i‡(
pid
>0) {

413 
	`waôpid
(
pid
, &
°©us
, 0);

417 
ªsu…
 = 
	`lök
(
a0
, 
a1
);

418 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

419 i‡(
dof‹k
) {

420 
	`exô
(0);

422 
	}
}

426 
	$åy_mkdú
(
dof‹k
)

428 * 
a0
 = 
	`ønd±r
();

429 
a1
 = 
	`øndöt
();

430 
ªsu…
, 
pid
, 
°©us
;

431 
buf
[128];

433 
	`¢¥ötf
(
buf
, (buf), "mkdir(%p, %d)",

434 (
a0
), (
a1
));

435 
	`¥ötf
("%-47s", 
buf
);

437 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

438 i‡(
pid
<0) {

439 
	`îr
(1, "fork");

441 i‡(
pid
>0) {

442 
	`waôpid
(
pid
, &
°©us
, 0);

446 
ªsu…
 = 
	`mkdú
(
a0
, 
a1
);

447 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

448 i‡(
dof‹k
) {

449 
	`exô
(0);

451 
	}
}

455 
	$åy_rmdú
(
dof‹k
)

457 * 
a0
 = 
	`ønd±r
();

458 
ªsu…
, 
pid
, 
°©us
;

459 
buf
[128];

461 
	`¢¥ötf
(
buf
, (buf), "rmdir(%p)",

462 (
a0
));

463 
	`¥ötf
("%-47s", 
buf
);

465 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

466 i‡(
pid
<0) {

467 
	`îr
(1, "fork");

469 i‡(
pid
>0) {

470 
	`waôpid
(
pid
, &
°©us
, 0);

474 
ªsu…
 = 
	`rmdú
(
a0
);

475 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

476 i‡(
dof‹k
) {

477 
	`exô
(0);

479 
	}
}

483 
	$åy_chdú
(
dof‹k
)

485 * 
a0
 = 
	`ønd±r
();

486 
ªsu…
, 
pid
, 
°©us
;

487 
buf
[128];

489 
	`¢¥ötf
(
buf
, (buf), "chdir(%p)",

490 (
a0
));

491 
	`¥ötf
("%-47s", 
buf
);

493 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

494 i‡(
pid
<0) {

495 
	`îr
(1, "fork");

497 i‡(
pid
>0) {

498 
	`waôpid
(
pid
, &
°©us
, 0);

502 
ªsu…
 = 
	`chdú
(
a0
);

503 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

504 i‡(
dof‹k
) {

505 
	`exô
(0);

507 
	}
}

511 
	$åy_gëdúíåy
(
dof‹k
)

513 
a0
 = 
	`øndöt
();

514 * 
a1
 = 
	`ønd±r
();

515 
size_t
 
a2
 = 
	`øndsize
();

516 
ªsu…
, 
pid
, 
°©us
;

517 
buf
[128];

519 
	`¢¥ötf
(
buf
, (buf), "getdirentry(%d, %p, %lu)",

520 (
a0
), (
a1
), ()(
a2
));

521 
	`¥ötf
("%-47s", 
buf
);

523 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

524 i‡(
pid
<0) {

525 
	`îr
(1, "fork");

527 i‡(
pid
>0) {

528 
	`waôpid
(
pid
, &
°©us
, 0);

532 
ªsu…
 = 
	`gëdúíåy
(
a0
, 
a1
, 
a2
);

533 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

534 i‡(
dof‹k
) {

535 
	`exô
(0);

537 
	}
}

541 
	$åy_symlök
(
dof‹k
)

543 * 
a0
 = 
	`ønd±r
();

544 * 
a1
 = 
	`ønd±r
();

545 
ªsu…
, 
pid
, 
°©us
;

546 
buf
[128];

548 
	`¢¥ötf
(
buf
, (buf), "symlink(%p, %p)",

549 (
a0
), (
a1
));

550 
	`¥ötf
("%-47s", 
buf
);

552 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

553 i‡(
pid
<0) {

554 
	`îr
(1, "fork");

556 i‡(
pid
>0) {

557 
	`waôpid
(
pid
, &
°©us
, 0);

561 
ªsu…
 = 
	`symlök
(
a0
, 
a1
);

562 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

563 i‡(
dof‹k
) {

564 
	`exô
(0);

566 
	}
}

570 
	$åy_ªadlök
(
dof‹k
)

572 * 
a0
 = 
	`ønd±r
();

573 * 
a1
 = 
	`ønd±r
();

574 
size_t
 
a2
 = 
	`øndsize
();

575 
ªsu…
, 
pid
, 
°©us
;

576 
buf
[128];

578 
	`¢¥ötf
(
buf
, (buf), "readlink(%p, %p, %lu)",

579 (
a0
), (
a1
), ()(
a2
));

580 
	`¥ötf
("%-47s", 
buf
);

582 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

583 i‡(
pid
<0) {

584 
	`îr
(1, "fork");

586 i‡(
pid
>0) {

587 
	`waôpid
(
pid
, &
°©us
, 0);

591 
ªsu…
 = 
	`ªadlök
(
a0
, 
a1
, 
a2
);

592 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

593 i‡(
dof‹k
) {

594 
	`exô
(0);

596 
	}
}

600 
	$åy_dup2
(
dof‹k
)

602 
a0
 = 
	`øndöt
();

603 
a1
 = 
	`øndöt
();

604 
ªsu…
, 
pid
, 
°©us
;

605 
buf
[128];

607 
	`¢¥ötf
(
buf
, (buf), "dup2(%d, %d)",

608 (
a0
), (
a1
));

609 
	`¥ötf
("%-47s", 
buf
);

611 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

612 i‡(
pid
<0) {

613 
	`îr
(1, "fork");

615 i‡(
pid
>0) {

616 
	`waôpid
(
pid
, &
°©us
, 0);

620 
ªsu…
 = 
	`dup2
(
a0
, 
a1
);

621 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

622 i‡(
dof‹k
) {

623 
	`exô
(0);

625 
	}
}

629 
	$åy_pùe
(
dof‹k
)

631 * 
a0
 = 
	`ønd±r
();

632 
ªsu…
, 
pid
, 
°©us
;

633 
buf
[128];

635 
	`¢¥ötf
(
buf
, (buf), "pipe(%p)",

636 (
a0
));

637 
	`¥ötf
("%-47s", 
buf
);

639 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

640 i‡(
pid
<0) {

641 
	`îr
(1, "fork");

643 i‡(
pid
>0) {

644 
	`waôpid
(
pid
, &
°©us
, 0);

648 
ªsu…
 = 
	`pùe
(
a0
);

649 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

650 i‡(
dof‹k
) {

651 
	`exô
(0);

653 
	}
}

657 
	$åy___time
(
dof‹k
)

659 * 
a0
 = 
	`ønd±r
();

660 * 
a1
 = 
	`ønd±r
();

661 
ªsu…
, 
pid
, 
°©us
;

662 
buf
[128];

664 
	`¢¥ötf
(
buf
, (buf), "__time(%p, %p)",

665 (
a0
), (
a1
));

666 
	`¥ötf
("%-47s", 
buf
);

668 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

669 i‡(
pid
<0) {

670 
	`îr
(1, "fork");

672 i‡(
pid
>0) {

673 
	`waôpid
(
pid
, &
°©us
, 0);

677 
ªsu…
 = 
	`__time
(
a0
, 
a1
);

678 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

679 i‡(
dof‹k
) {

680 
	`exô
(0);

682 
	}
}

686 
	$åy___gëcwd
(
dof‹k
)

688 * 
a0
 = 
	`ønd±r
();

689 
size_t
 
a1
 = 
	`øndsize
();

690 
ªsu…
, 
pid
, 
°©us
;

691 
buf
[128];

693 
	`¢¥ötf
(
buf
, (buf), "__getcwd(%p, %lu)",

694 (
a0
), ()(
a1
));

695 
	`¥ötf
("%-47s", 
buf
);

697 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

698 i‡(
pid
<0) {

699 
	`îr
(1, "fork");

701 i‡(
pid
>0) {

702 
	`waôpid
(
pid
, &
°©us
, 0);

706 
ªsu…
 = 
	`__gëcwd
(
a0
, 
a1
);

707 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

708 i‡(
dof‹k
) {

709 
	`exô
(0);

711 
	}
}

715 
	$åy_°©
(
dof‹k
)

717 * 
a0
 = 
	`ønd±r
();

718 * 
a1
 = 
	`ønd±r
();

719 
ªsu…
, 
pid
, 
°©us
;

720 
buf
[128];

722 
	`¢¥ötf
(
buf
, (buf), "stat(%p, %p)",

723 (
a0
), (
a1
));

724 
	`¥ötf
("%-47s", 
buf
);

726 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

727 i‡(
pid
<0) {

728 
	`îr
(1, "fork");

730 i‡(
pid
>0) {

731 
	`waôpid
(
pid
, &
°©us
, 0);

735 
ªsu…
 = 
	`°©
(
a0
, 
a1
);

736 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

737 i‡(
dof‹k
) {

738 
	`exô
(0);

740 
	}
}

744 
	$åy_l°©
(
dof‹k
)

746 * 
a0
 = 
	`ønd±r
();

747 * 
a1
 = 
	`ønd±r
();

748 
ªsu…
, 
pid
, 
°©us
;

749 
buf
[128];

751 
	`¢¥ötf
(
buf
, (buf), "lstat(%p, %p)",

752 (
a0
), (
a1
));

753 
	`¥ötf
("%-47s", 
buf
);

755 
pid
 = 
dof‹k
 ? 
	`f‹k
() : 0;

756 i‡(
pid
<0) {

757 
	`îr
(1, "fork");

759 i‡(
pid
>0) {

760 
	`waôpid
(
pid
, &
°©us
, 0);

764 
ªsu…
 = 
	`l°©
(
a0
, 
a1
);

765 
	`¥ötf
("Ñesu… %d,Éºnÿ%d\n", 
ªsu…
, 
î∫o
);

766 i‡(
dof‹k
) {

767 
	`exô
(0);

769 
	}
}

771 
åyfunc
 
	gfuncs2
[] = {

772 
åy_execv
,

773 
åy_waôpid
,

774 
åy_›í
,

775 
åy_ªad
,

776 
åy_wrôe
,

777 
åy_˛o£
,

778 
åy_l£ek
,

779 
åy_chdú
,

780 
åy_dup2
,

781 
åy___gëcwd
,

782 
NULL


785 
åyfunc
 
	gfuncs3
[] = {

786 
åy_execv
,

787 
åy_waôpid
,

788 
åy_›í
,

789 
åy_ªad
,

790 
åy_wrôe
,

791 
åy_˛o£
,

792 
åy_l£ek
,

793 
åy_chdú
,

794 
åy_dup2
,

795 
åy___gëcwd
,

796 
NULL


799 
åyfunc
 
	gfuncs4
[] = {

800 
åy_execv
,

801 
åy_waôpid
,

802 
åy_›í
,

803 
åy_ªad
,

804 
åy_wrôe
,

805 
åy_˛o£
,

806 
åy_l£ek
,

807 
åy_fsync
,

808 
åy_·runˇã
,

809 
åy_f°©
,

810 
åy_ªmove
,

811 
åy_ª«me
,

812 
åy_mkdú
,

813 
åy_rmdú
,

814 
åy_chdú
,

815 
åy_gëdúíåy
,

816 
åy_dup2
,

817 
åy___gëcwd
,

818 
NULL


821 
åyfunc
 
	gfuncs5
[] = {

822 
åy_execv
,

823 
åy_waôpid
,

824 
åy_›í
,

825 
åy_ªad
,

826 
åy_wrôe
,

827 
åy_˛o£
,

828 
åy_io˘l
,

829 
åy_l£ek
,

830 
åy_fsync
,

831 
åy_·runˇã
,

832 
åy_f°©
,

833 
åy_ªmove
,

834 
åy_ª«me
,

835 
åy_lök
,

836 
åy_mkdú
,

837 
åy_rmdú
,

838 
åy_chdú
,

839 
åy_gëdúíåy
,

840 
åy_symlök
,

841 
åy_ªadlök
,

842 
åy_dup2
,

843 
åy_pùe
,

844 
åy___time
,

845 
åy___gëcwd
,

846 
åy_°©
,

847 
åy_l°©
,

848 
NULL


851 
åyfunc
 *
	gèbÀs
[4] = {

852 
funcs2
,

853 
funcs3
,

854 
funcs4
,

855 
funcs5
,

859 
	$åyˇŒs
(
as°
, 
dof‹k
, 
cou¡
)

861 
åyfunc
 *
li°
;

862 
i
, 
j
;

864 
	`as£π
(
as°
>=2 &&ásst<=5);

865 
li°
 = 
èbÀs
[
as°
-2];

867 
i
=0; i<
cou¡
; i++) {

868 
j
=0; 
li°
[j]; j++) {

869 (*
li°
[
j
])(
dof‹k
);

872 
	}
}

	@user/testbin/randcall/extern.h

30 
	~<sys/ty≥s.h
>

32 *
ønd±r
();

33 
øndöt
();

34 
off_t
 
øndoff
();

35 
size_t
 
øndsize
();

37 
åyˇŒs
(
as°
, 
dof‹k
, 
cou¡
);

	@user/testbin/randcall/main.c

30 
	~<°dlib.h
>

31 
	~<°dio.h
>

32 
	~<°rög.h
>

34 
	~"exã∫.h
"

38 
	$øndch¨
(*
c
)

40 #i‡
RAND_MAX
 != 0x7fffffff

44 
lbôs
 = 0;

45 
 um
 = 0;

47 
bô
;

48 
˘
 = 0;

50 *
c
 = 0;

52 
˘
 < 
CHAR_BIT
) {

53 i‡(
 um
==0) {

54 
lbôs
 = 
	`øndom
();

55 
 um
 = 31;

58 
bô
 = 
lbôs
 & 1;

59 i‡(
bô
) {

60 (*
c
) |= 1;

62 (*
c
) <<= 1;

63 
˘
++;

64 
lbôs
 >>= 1;

65 
 um
--;

67 
	}
}

71 
	$fûÃ™d
(*
p
, 
size_t
 
Àn
)

73 
size_t
 
i
;

74 *
˝
 = 
p
;

75 
i
=0; i<
Àn
; i++) {

76 
	`øndch¨
(&
˝
[
i
]);

78 
	}
}

81 
	$ønd±r
()

83 *
x
;

84 
	`fûÃ™d
(&
x
, (x));

85  
x
;

86 
	}
}

89 
	$øndöt
()

91 
x
;

92 
	`fûÃ™d
(&
x
, (x));

93  
x
;

94 
	}
}

96 
off_t


97 
	$øndoff
()

99 
off_t
 
x
;

100 
	`fûÃ™d
(&
x
, (x));

101  
x
;

102 
	}
}

104 
size_t


105 
	$øndsize
()

107 
size_t
 
x
;

108 
	`fûÃ™d
(&
x
, (x));

109  
x
;

110 
	}
}

114 
	$ußge
()

116 
	`¥ötf
("Usage:Ñandcall [-f] [-c count] [-r seed] 2|3|4|all\n");

117 
	`¥ötf
(" -f suppress forking\n");

118 
	`¥ötf
(" -c set iteration count (default 100)\n");

119 
	`¥ötf
(" -r setÖseudorandom seed (default 0)\n");

120 
	`exô
(1);

121 
	}
}

124 
	$maö
(
¨gc
, *
¨gv
[])

126 
cou¡
=100, 
£ed
 = 0, 
dof‹k
 = 1;

127 
™
, 
i
;

129 
i
=1; i<
¨gc
; i++) {

130 i‡(!
	`°rcmp
(
¨gv
[
i
], "-f")) {

131 
dof‹k
 = 0;

133 i‡(!
	`°rcmp
(
¨gv
[
i
], "-c"Ë&& i<
¨gc
-1) {

134 
cou¡
 = 
	`©oi
(
¨gv
[++
i
]);

136 i‡(!
	`°rcmp
(
¨gv
[
i
], "-r"Ë&& i<
¨gc
-1) {

137 
£ed
 = 
	`©oi
(
¨gv
[++
i
]);

139 i‡(
¨gv
[
i
][0] == '-') {

140 
	`ußge
();

146 i‡(
i
 !
¨gc
-1) {

147 
	`ußge
();

150 i‡(!
	`°rcmp
(
¨gv
[
i
], "all")) {

151 
™
 = 5;

154 
™
 = 
	`©oi
(
¨gv
[
i
]);

155 i‡(
™
 <2 ||án > 4) {

156 
	`ußge
();

160 
	`¥ötf
("Sìd: %d Cou¡: %d\n", 
£ed
, 
cou¡
);

162 
	`§™dom
(
£ed
);

163 
	`åyˇŒs
(
™
, 
dof‹k
, 
cou¡
);

166 
	}
}

	@user/testbin/rmdirtest/rmdirtest.c

39 
	~<sys/ty≥s.h
>

40 
	~<sys/°©.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<î∫o.h
>

46 
	~<limôs.h
>

47 
	~<îr.h
>

50 c⁄° 
	gã°dú
[] = "testdir";

51 
	g°¨çoöt
[
PATH_MAX
 - (
ã°dú
)];

60 
	$°¨tup
()

62 i‡(
	`gëcwd
(
°¨çoöt
, (°¨çoöt))==
NULL
) {

63 
	`îr
(1, "getcwd (not inÅest dir)");

66 i‡(
	`mkdú
(
ã°dú
, 0775) < 0) {

67 
	`îr
(1, "%s: mkdú", 
ã°dú
);

70 i‡(
	`chdú
(
ã°dú
) < 0) {

71 
	`îr
(1, "%s: chdú", 
ã°dú
);

73 
	}
}

85 
	$kûldú
()

87 
tmp
[
PATH_MAX
];

89 
	`¢¥ötf
(
tmp
, —mp), "%s/%s", 
°¨çoöt
, 
ã°dú
);

90 i‡(
	`rmdú
(
tmp
)<0) {

91 
	`îr
(1, "%s:Ñmdú", 
tmp
);

93 
	}
}

102 
	$föish
()

104 i‡(
	`chdú
(
°¨çoöt
)<0) {

105 
	`îr
(1, "%s: chdú", 
°¨çoöt
);

107 
	}
}

117 
	$ã°1
()

119 
	`¥ötf
("Makög %s\n", 
ã°dú
);

120 
	`°¨tup
();

122 
	`¥ötf
("Removög %†whûêö it\n", 
ã°dú
);

123 
	`kûldú
();

125 
	`¥ötf
("LeavingÅheÅest directory\n");

126 
	`föish
();

127 
	}
}

135 
	$ã°2
()

137 
fd
;

139 
	`¥ötf
("NowÅrying withÅhe directory open...\n");

140 
	`°¨tup
();

141 
fd
 = 
	`›í
(".", 
O_RDONLY
);

142 i‡(
fd
<0) {

143 
	`îr
(1, ".: open");

145 
	`kûldú
();

146 
	`föish
();

149 i‡(
	`˛o£
(
fd
)<0) {

150 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

152 
	}
}

160 
	$ã°3
()

162 
buf
[
PATH_MAX
];

163 
fd
;

165 
	`¥ötf
("Checking if .ÉxistsáfterÑmdir\n");

166 
	`°¨tup
();

167 
	`kûldú
();

169 
fd
 = 
	`›í
(".", 
O_RDONLY
);

170 i‡(
fd
<0) {

171 
î∫o
) {

172 
EINVAL
:

173 
EIO
:

174 
ENOENT
:

177 
	`îr
(1, ".");

182 
	`˛o£
(
fd
);

185 
fd
 = 
	`›í
("..", 
O_RDONLY
);

186 i‡(
fd
<0) {

187 
î∫o
) {

188 
EINVAL
:

189 
EIO
:

190 
ENOENT
:

193 
	`îr
(1, "..");

198 
	`w¨nx
("..: openableáfterÑmdir - might be bad");

199 
	`˛o£
(
fd
);

202 
	`¢¥ötf
(
buf
, (buf), "../%s", 
ã°dú
);

203 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

204 i‡(
fd
<0) {

205 
î∫o
) {

206 
EINVAL
:

207 
EIO
:

208 
ENOENT
:

211 
	`îr
(1, "%s", 
buf
);

216 
	`îrx
(1, "%s: w‹k†a·îÑmdú", 
buf
);

219 
	`föish
();

220 
	}
}

228 
	$ã°4
()

230 
buf
[4096];

231 
fd
;

233 
	`¥ötf
("Checking if creating files worksáfterÑmdir...\n");

234 
	`°¨tup
();

235 
	`kûldú
();

237 
fd
 = 
	`›í
("√wfûe", 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664);

238 i‡(
fd
<0) {

239 
î∫o
) {

240 
EINVAL
:

241 
EIO
:

242 
ENOENT
:

245 
	`îr
(1, "%s", 
buf
);

250 
	`w¨nx
("newfile: creating filesáfterÑmdir works");

251 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

256 
	`mem£t
(
buf
, 'J', (buf));

257 
	`wrôe
(
fd
, 
buf
, (buf));

258 
	`wrôe
(
fd
, 
buf
, (buf));

259 
	`wrôe
(
fd
, 
buf
, (buf));

260 
	`wrôe
(
fd
, 
buf
, (buf));

261 
	`˛o£
(
fd
);

264 
	`föish
();

265 
	}
}

273 
	$ã°5
()

275 
	`¥ötf
("Checking if creating subdirs worksáfterÑmdir...\n");

276 
	`°¨tup
();

277 
	`kûldú
();

279 i‡(
	`mkdú
("newdir", 0775)<0) {

280 
î∫o
) {

281 
EINVAL
:

282 
EIO
:

283 
ENOENT
:

286 
	`îr
(1, "mkdir inÑemoved dir");

291 
	`w¨nx
("newfile: creating directoriesáfterÑmdir works");

292 
	`w¨nx
("(this is only ok ifÅhe space getsÑeclaimed)");

297 
	`mkdú
("newdir/t0", 0775);

298 
	`mkdú
("newdir/t1", 0775);

299 
	`mkdú
("newdir/t2", 0775);

300 
	`mkdú
("newdir/t3", 0775);

301 
	`mkdú
("newdir/t4", 0775);

302 
	`mkdú
("newdir/t5", 0775);

305 
	`föish
();

306 
	}
}

313 
	$ã°6
()

315 
buf
[
PATH_MAX
];

316 
fd
, 
Àn
;

318 
	`¥ötf
("NowÅryingÅoÜistÅhe directory...\n");

319 
	`°¨tup
();

320 
fd
 = 
	`›í
(".", 
O_RDONLY
);

321 i‡(
fd
<0) {

322 
	`îr
(1, ".: open");

324 
	`kûldú
();

326 (
Àn
 = 
	`gëdúíåy
(
fd
, 
buf
, (buf)-1))>0) {

327 i‡(()
Àn
 >(
buf
)-1) {

328 
	`îrx
(1, ".: getdirentry:Ñeturned invalidÜength");

330 
buf
[
Àn
] = 0;

331 i‡(!
	`°rcmp
(
buf
, ".") || !strcmp(buf, "..")) {

335 
	`îrx
(1, ".: gëdúíåy:Ñëu∫ed u√x≥˘edÇamê%s", 
buf
);

337 i‡(
Àn
==0) {

341 
î∫o
) {

342 
EINVAL
:

343 
EIO
:

346 
	`îr
(1, ".: getdirentry");

351 
	`föish
();

354 i‡(
	`˛o£
(
fd
)<0) {

355 
	`îr
(1, "ªmoved %s: clo£", 
ã°dú
);

357 
	}
}

364 
	$ã°7
()

366 
buf
[
PATH_MAX
];

368 
	`°¨tup
();

369 
	`kûldú
();

370 i‡(
	`gëcwd
(
buf
, (buf))==
NULL
) {

371 
î∫o
) {

372 
EINVAL
:

373 
EIO
:

374 
ENOENT
:

377 
	`îr
(1, "gëcwdá·îÑemovög %s", 
ã°dú
);

382 
	`îrx
(1, "getcwdáfterÑemoving %s: succeeded (got %s)",

383 
ã°dú
, 
buf
);

386 
	`föish
();

387 
	}
}

392 
	$maö
()

394 
	`ã°1
();

395 
	`ã°2
();

396 
	`ã°3
();

397 
	`ã°4
();

398 
	`ã°5
();

399 
	`ã°6
();

400 
	`ã°7
();

402 
	`¥ötf
("Whew... survived.\n");

404 
	}
}

	@user/testbin/rmtest/rmtest.c

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 
	~<uni°d.h
>

43 
	~<î∫o.h
>

44 
	~<îr.h
>

46 
	#TEST
 "rmd©a"

	)

47 
	#TESTDATA
 "I wish I wa†®hódlight. -- Jîry G¨cü"

	)

48 
	#TESTLEN
 ((
TESTDATA
)-1)

	)

52 
	$d‹m
(
fd
)

63 
pid_t
 
pid
;

64 
°©us
;

66 
pid
 = 
	`f‹k
();

67 i‡(
pid
<0) {

68 
	`îr
(1, "fork");

70 i‡(
pid
==0) {

72 
	`˛o£
(
fd
);

73 i‡(
	`ªmove
(
TEST
)) {

74 
	`îr
(1, "%s:Ñemove", 
TEST
);

76 
	`_exô
(0);

79 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

80 
	`îr
(1, "waitpid");

82 i‡(
	`WIFSIGNALED
(
°©us
)) {

83 
	`w¨n
("chûdÖro˚s†exôed wôh sig«»%d", 
	`WTERMSIG
(
°©us
));

85 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

86 
	`w¨nx
("chûdÖro˚s†exôed wôh codê%d",
	`WEXITSTATUS
(
°©us
));

88 
	}
}

92 
	$ßme
(c⁄° *
a
, c⁄° *
b
, 
Àn
)

94 
Àn
-- > 0) {

95 i‡(*
a
++ !*
b
++)  0;

98 
	}
}

101 
	$maö
()

103 
fûe
, 
Àn
;

104 
buf
[
TESTLEN
];

107 
fûe
 = 
	`›í
(
TEST
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0664);

108 
	`wrôe
(
fûe
, 
TESTDATA
, 
TESTLEN
);

109 
	`˛o£
(
fûe
);

112 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

113 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

114 i‡(
Àn
 < 0) {

115 
	`w¨n
("read: before deletion");

117 i‡(
Àn
 < ()
TESTLEN
) {

118 
	`w¨nx
("ªad: bef‹êdñëi⁄: sh‹àcou¡ %d", 
Àn
);

120 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

121 
	`îrx
(1, "Failed: dataÑead back wasÇotÅhe same");

125 i‡(
	`l£ek
(
fûe
, 0, 
SEEK_SET
)) {

126 
	`îr
(1, "lseek");

130 
	`d‹m
(
fûe
);

133 
	`mem£t
(
buf
, '\0', 
TESTLEN
);

134 
Àn
 = 
	`ªad
(
fûe
, 
buf
, 
TESTLEN
);

135 i‡(
Àn
 < 0) {

136 
	`w¨n
("read:áfter deletion");

138 i‡(
Àn
 < ()
TESTLEN
) {

139 
	`w¨nx
("ªad:á·î dñëi⁄: sh‹àcou¡ %d", 
Àn
);

142 i‡(!
	`ßme
(
buf
, 
TESTDATA
, 
TESTLEN
)) {

143 
	`îrx
(1, "Failed: dataÑeadáfter deletion wasÇotÅhe same");

147 
	`˛o£
(
fûe
);

150 
fûe
 = 
	`›í
(
TEST
, 
O_RDONLY
);

151 i‡(
fûe
 >= 0) {

152 
	`˛o£
(
fûe
);

153 
	`îrx
(1, "Failed:Åhe file could still be opened");

156 i‡(
î∫o
!=
ENOENT
) {

157 
	`îr
(1, "UnexpectedÉrrorÑeopeningÅhe file");

160 
	`¥ötf
("Succeeded!\n");

163 
	}
}

	@user/testbin/sink/sink.c

38 
	~<uni°d.h
>

39 
	~<îr.h
>

42 
	$maö
()

44 
ch
=0;

45 
r
;

47 
ch
!='q') {

48 
r
 = 
	`ªad
(
STDIN_FILENO
, &
ch
, 1);

49 i‡(
r
<0) {

50 
	`îr
(1, "stdin");

52 i‡(
r
==0) {

59 
	}
}

	@user/testbin/sort/sort.c

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<îr.h
>

44 
	#SIZE
 (144*1024)

	)

59 
	$s‹t
(*
¨r
, 
size
)

61 
tmp
[
SIZE
];

62 
pivŸ
, 
i
, 
j
, 
k
;

64 i‡(
size
<2) {

68 
pivŸ
 = 
size
/2;

69 
	`s‹t
(
¨r
, 
pivŸ
);

70 
	`s‹t
(&
¨r
[
pivŸ
], 
size
-pivot);

72 
i
 = 0;

73 
j
 = 
pivŸ
;

74 
k
 = 0;

75 
i
<
pivŸ
 && 
j
<
size
) {

76 i‡(
¨r
[
i
] <áº[
j
]) {

77 
tmp
[
k
++] = 
¨r
[
i
++];

80 
tmp
[
k
++] = 
¨r
[
j
++];

83 
i
<
pivŸ
) {

84 
tmp
[
k
++] = 
¨r
[
i
++];

86 
j
<
size
) {

87 
tmp
[
k
++] = 
¨r
[
j
++];

90 
	`mem˝y
(
¨r
, 
tmp
, 
size
*());

91 
	}
}

95 
	gA
[
SIZE
];

99 
	$öô¨øy
()

101 
i
;

106 
	`§™dom
(533);

108 
i
 = 0; i < 
SIZE
; i++) {

109 
A
[
i
] = 
	`øndom
();

111 
	}
}

115 
	$check
()

117 
i
;

119 
i
=0; i<
SIZE
-1; i++) {

120 i‡(
A
[
i
] > A[i+1]) {

121 
	`îrx
(1, "Failed: A[%d] is %d, A[%d] is %d",

122 
i
, 
A
[i], i+1, A[i+1]);

125 
	`w¨nx
("Passed.");

126 
	}
}

129 
	$maö
()

131 
	`öô¨øy
();

132 
	`s‹t
(
A
, 
SIZE
);

133 
	`check
();

135 
	}
}

	@user/testbin/sty/sty.c

39 
	~<uni°d.h
>

40 
	~<îr.h
>

42 *
	gh¨gv
[2] = { (*)"hog", 
NULL
 };

44 
	#MAXPROCS
 6

	)

45 
	gpids
[
MAXPROCS
], 
	g≈ids
;

49 
	$hog
()

51 
pid
 = 
	`f‹k
();

52 
pid
) {

54 
	`îr
(1, "fork");

57 
	`execv
("/ã°bö/hog", 
h¨gv
);

58 
	`îr
(1, "/testbin/hog");

61 
pids
[
≈ids
++] = 
pid
;

64 
	}
}

68 
	$waôÆl
()

70 
i
, 
°©us
;

71 
i
=0; i<
≈ids
; i++) {

72 i‡(
	`waôpid
(
pids
[
i
], &
°©us
, 0)<0) {

73 
	`w¨n
("waôpid f‹ %d", 
pids
[
i
]);

75 i‡(
	`WIFSIGNALED
(
°©us
)) {

76 
	`w¨nx
("pid %d: sig«»%d", 
pids
[
i
], 
	`WTERMSIG
(
°©us
));

78 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

79 
	`w¨nx
("pid %d:Éxô %d", 
pids
[
i
], 
	`WEXITSTATUS
(
°©us
));

82 
	}
}

85 
	$maö
()

87 
	`hog
();

88 
	`hog
();

89 
	`hog
();

90 
	`hog
();

91 
	`hog
();

92 
	`hog
();

94 
	`waôÆl
();

96 
	}
}

	@user/testbin/tail/tail.c

39 
	~<uni°d.h
>

40 
	~<°dlib.h
>

41 
	~<îr.h
>

43 
	#BUFSIZE
 1000

	)

48 
	gbuf„r
[
BUFSIZE
];

52 
	$èû
(
fûe
, 
off_t
 
whîe
, c⁄° *
fûíame
)

54 
Àn
;

56 i‡(
	`l£ek
(
fûe
, 
whîe
, 
SEEK_SET
)<0) {

57 
	`îr
(1, "%s", 
fûíame
);

60 (
Àn
 = 
	`ªad
(
fûe
, 
buf„r
, (buffer))) > 0) {

61 
	`wrôe
(
STDOUT_FILENO
, 
buf„r
, 
Àn
);

63 
	}
}

66 
	$maö
(
¨gc
, **
¨gv
)

68 
fûe
;

70 i‡(
¨gc
 < 3) {

71 
	`îrx
(1, "Usage:Åail <file> <location>");

73 
fûe
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
);

74 i‡(
fûe
 < 0) {

75 
	`îr
(1, "%s", 
¨gv
[1]);

77 
	`èû
(
fûe
, 
	`©oi
(
¨gv
[2]),árgv[1]);

78 
	`˛o£
(
fûe
);

80 
	}
}

	@user/testbin/tictac/tictac.c

41 
	~<°dio.h
>

42 
	~<uni°d.h
>

44 
	#NEWLINE
 012

	)

45 
	#EMPTY
 0

	)

46 
	#X_PLAYER
 1

	)

47 
	#O_PLAYER
 2

	)

48 
	#X_MARKER
 1

	)

49 
	#O_MARKER
 2

	)

50 
	#DIM
 3

	)

51 
	#DIMCHAR
 "2"

	)

52 
	#MAXSTRING
 100

	)

54 íum { 
	mFALSE
, 
	mTRUE
 } 
	tboﬁ
;

57 
boﬁ
 
ask_ye¢o
(c⁄° *
msg
);

58 
boﬁ
 
do_move
(
∂ayî
);

59 
öôülize_bﬂrd
();

60 
boﬁ
 
is_wö
(
x
, 
y
);

61 
ªad_°rög
(*
buf
, 
Àngth
);

62 
¥öt_bﬂrd
();

63 
¥öt_ö°ru˘i⁄s
();

64 
boﬁ
 
wö_cﬁumn
(
y
, 
m¨kî
);

65 
boﬁ
 
wö_düg_À·
(
x
, 
y
, 
m¨kî
);

66 
boﬁ
 
wö_düg_right
(
x
, 
y
, 
m¨kî
);

67 
boﬁ
 
wö_row
(
x
, 
m¨kî
);

68 
boﬁ
 
Såcmp
(c⁄° *
a
, c⁄° *
b
);

74 
	gbﬂrd
[
DIM
][DIM];

79 
	$maö
()

81 
boﬁ
 
wö
 = 
FALSE
;

82 
move
, 
max_moves
;

83 
∂ayî
;

85 
	`¥öt_ö°ru˘i⁄s
();

86 
max_moves
 = 
DIM
 * DIM;

88 
TRUE
) {

89 
	`öôülize_bﬂrd
();

90 
move
 = 1; movê<
max_moves
; move++) {

91 
∂ayî
 = 
move
 % 2 == 0 ? 2 : 1;

92 
wö
 = 
	`do_move
(
∂ayî
);

93 
	`¥öt_bﬂrd
();

94 i‡(
wö
) {

95 
	`¥ötf
("Pœyî %d, you WON!\n\n", 
∂ayî
);

103 i‡(!
wö
)

104 
	`¥ötf
("Tie Game!\n\n");

105 i‡(!
	`ask_ye¢o
("Do you wishÅoÖlayágain?"))

109 
	}
}

122 
	$¥öt_ö°ru˘i⁄s
()

124 
	`¥ötf
("WelcomeÅoÅic-tac-toe!\n");

125 
	`¥ötf
("Player 1álwaysÖlays XándÖlayer 2álwaysÖlay O\n");

126 
	`¥ötf
("GoodÜuck!\n\n\n");

127 
	}
}

140 
	$¥öt_bﬂrd
()

142 
i
, 
j
;

145 
	`¥ötf
("\n 0 1 2\n");

147 
i
 = 0; i < 
DIM
; i++) {

149 
	`¥ötf
(" %d ", 
i
);

150 
j
 = 0; j < 
DIM
; j++) {

151 
bﬂrd
[
i
][
j
]) {

152 
EMPTY
: 
	`¥ötf
(" "); ;

153 
X_MARKER
: 
	`¥ötf
(" X "); ;

154 
O_MARKER
: 
	`¥ötf
(" O "); ;

155 : 
	`¥ötf
("???"); ;

158 
	`¥ötf
("\n");

160 
	`¥ötf
("\n");

161 
	}
}

178 
boﬁ


179 
	$ask_ye¢o
(c⁄° *
msg
)

181 
™swî
[
MAXSTRING
];

183 
TRUE
) {

184 
	`¥ötf
("%†[yes/no] ", 
msg
);

185 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

186 (
FALSE
);

187 i‡(
	`Såcmp
(
™swî
, "yes"))

188 (
TRUE
);

189 i‡(
	`Såcmp
(
™swî
, "no"))

190 (
FALSE
);

192 
	`¥ötf
("PleaseánswerÉither yes orÇo\n");

194 
	}
}

212 
boﬁ


213 
	$do_move
(
∂ayî
)

215 
x
, 
y
;

216 
boﬁ
 
fú°
;

217 
™swî
[
MAXSTRING
];

218 
cx
;

220 
fú°
 = 
TRUE
;

221 
	`¥ötf
("Pœyî %d (%c), you∏move\n", 
∂ayî
,

222 
∂ayî
 =
X_PLAYER
 ? 'X' : 'O');

224 
TRUE
) {

225 
	`¥ötf
("WhichÑow [0-%d]: ", 
DIM
-1);

226 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

227 (
FALSE
);

228 
cx
 = 
™swî
[0];

229 
x
 = 
cx
 - '0';

230 i‡(
x
 < 0 || x >
DIM
) {

231 
	`¥ötf
("InvÆidÑow; mu° bê>0ánd < %d\n", 
DIM
-1);

234 
	`¥ötf
("Which cﬁum¿[0-%d]: ", 
DIM
-1);

235 i‡(
	`ªad_°rög
(
™swî
, 
MAXSTRING
) < 0)

236 (
FALSE
);

237 
cx
 = 
™swî
[0];

238 
y
 = 
cx
 - '0';

239 i‡(
y
 < 0 || y >
DIM
) {

240 
	`¥ötf
("Invalid column; must be >= 0ánd < %d\n",

241 
DIM
-1);

245 i‡(
bﬂrd
[
x
][
y
] !
EMPTY
) {

246 
	`¥ötf
("ThatÜocation is occupied;ÖleaseÅryágain\n");

247 
	`¥öt_bﬂrd
();

251 
bﬂrd
[
x
][
y
] = 
∂ayî
 =
X_PLAYER
 ? 
X_MARKER
 : 
O_MARKER
;

253 (
	`is_wö
(
x
, 
y
));

255 
	}
}

279 
boﬁ


280 
	$is_wö
(
x
, 
y
)

282 
m¨kî
;

284 
m¨kî
 = 
bﬂrd
[
x
][
y
];

292 (
	`wö_row
(
x
, 
m¨kî
Ë|| 
	`wö_cﬁumn
(
y
, marker) ||

293 
	`wö_düg_À·
(
x
, 
y
, 
m¨kî
Ë|| 
	`wö_düg_right
(x, y, marker));

294 
	}
}

299 
boﬁ


300 
	$wö_cﬁumn
(
y
, 
m¨kî
)

302 
i
;

303 
i
 = 0; i < 
DIM
; i++)

304 i‡(
bﬂrd
[
i
][
y
] !
m¨kî
)

305 (
FALSE
);

306 (
TRUE
);

307 
	}
}

309 
boﬁ


310 
	$wö_row
(
x
, 
m¨kî
)

312 
i
;

313 
i
 = 0; i < 
DIM
; i++)

314 i‡(
bﬂrd
[
x
][
i
] !
m¨kî
)

315 (
FALSE
);

316 (
TRUE
);

317 
	}
}

319 
boﬁ


320 
	$wö_düg_À·
(
x
, 
y
, 
m¨kî
)

322 
i
;

325 i‡(
x
 !
y
)

326 (
FALSE
);

328 
i
 = 0; i < 
DIM
; i++)

329 i‡(
bﬂrd
[
i
][i] !
m¨kî
)

330 (
FALSE
);

331 (
TRUE
);

332 
	}
}

334 
boﬁ


335 
	$wö_düg_right
(
x
, 
y
, 
m¨kî
)

337 
i
;

340 i‡(
x
 + 
y
 !
DIM
 - 1)

341 (
FALSE
);

342 
i
 = 0; i < 
DIM
; i++)

343 i‡(
bﬂrd
[
i
][
DIM
 - 1 - i] !
m¨kî
)

344 (
FALSE
);

345 (
TRUE
);

346 
	}
}

349 
	$öôülize_bﬂrd
()

351 
i
, 
j
;

353 
i
 = 0; i < 
DIM
; i++)

354 
j
 = 0; j < 
DIM
; j++)

355 
bﬂrd
[
i
][
j
] = 
EMPTY
;

356 
	}
}

359 
	$ªad_°rög
(*
buf
, 
Àngth
)

361 
ch¨_ªad
;

362 
i
;

364 
i
 = 0;

365 (
ch¨_ªad
 = 
	`gëch¨
()Ë!
EOF
 && ch¨_ªad !
NEWLINE
 &&

366 
i
 < 
Àngth
) {

367 
buf
[
i
] = (Ë
ch¨_ªad
;

368 
i
++;

369 
	`putch¨
(
ch¨_ªad
);

372 i‡(
ch¨_ªad
 =
EOF
)

379 i‡(
i
 >
Àngth
)

380 
i
--;

381 
buf
[
i
] = 0;

382 (
i
);

383 
	}
}

385 
boﬁ


386 
	$Såcmp
(c⁄° *
a
, c⁄° *
b
)

388 i‡(
a
 =
NULL
)

389 (
b
 =
NULL
);

390 i‡(
b
 =
NULL
)

391 (
FALSE
);

393 *
a
 && *
b
)

394 i‡(*
a
++ !*
b
++)

395 (
FALSE
);

397 (*
a
 =*
b
);

399 
	}
}

	@user/testbin/triplehuge/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@user/testbin/triplehuge/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@user/testbin/triplehuge/triplehuge.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/huge");

45 
	}
}

	@user/testbin/triplemat/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@user/testbin/triplemat/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@user/testbin/triplemat/triplemat.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/matmult");

45 
	}
}

	@user/testbin/triplesort/triple.c

36 
	~<°dio.h
>

37 
	~<uni°d.h
>

38 
	~<îr.h
>

39 
	~"åùÀ.h
"

42 
pid_t


43 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

45 
pid_t
 
pid
 = 
	`f‹k
();

46 
pid
) {

48 
	`îr
(1, "fork");

51 
	`execv
(
¥og
, 
¨gv
);

52 
	`îr
(1, "%s:Éxecv", 
¥og
);

57  
pid
;

58 
	}
}

62 
	$dowaô
(
ödex
, 
pid
)

64 
°©us
;

66 i‡(
	`waôpid
(
pid
, &
°©us
, 0)<0) {

67 
	`w¨n
("waôpid f‹ c›y #%d (pid %d)", 
ödex
, 
pid
);

70 i‡(
	`WIFSIGNALED
(
°©us
)) {

71 
	`w¨nx
("c›y #%d (pid %d): sig«»%d", 
ödex
, 
pid
,

72 
	`WTERMSIG
(
°©us
));

75 i‡(
	`WEXITSTATUS
(
°©us
) != 0) {

76 
	`w¨nx
("c›y #%d (pid %d):Éxô %d", 
ödex
, 
pid
,

77 
	`WEXITSTATUS
(
°©us
));

81 
	}
}

84 
	$åùÀ
(c⁄° *
¥og
)

86 
pid_t
 
pids
[3];

87 
i
, 
Áûuªs
 = 0;

88 *
¨gs
[2];

91 
¨gs
[0]=(*)
¥og
;

92 
¨gs
[1]=
NULL
;

94 
	`w¨nx
("Sèπög:Ñu¬ögÅhªêc›õ†o‡%s...", 
¥og
);

96 
i
=0; i<3; i++) {

97 
pids
[
i
]=
	`•awnv
(
¨gs
[0],árgs);

100 
i
=0; i<3; i++) {

101 
Áûuªs
 +
	`dowaô
(
i
, 
pids
[i]);

104 i‡(
Áûuªs
 > 0) {

105 
	`w¨nx
("%d faûuªs", 
Áûuªs
);

108 
	`w¨nx
("Congratulations! YouÖassed.");

110 
	}
}

	@user/testbin/triplesort/triple.h

30 
åùÀ
(c⁄° *
¥og
);

	@user/testbin/triplesort/triplesort.c

38 
	~"åùÀ.h
"

41 
	$maö
()

43 
	`åùÀ
("/testbin/sort");

45 
	}
}

	@user/testbin/userthreads/userthreads.c

52 
	~<uni°d.h
>

53 
	~<°dio.h
>

55 
	#NTHREADS
 3

	)

56 
	#MAX
 1<<25

	)

61 vﬁ©ûê
	gcou¡
 = 0;

64 
ThªadRu¬î
();

65 
BœdeRu¬î
();

68 
	$maö
(
¨gc
, *
¨gv
[])

70 
i
;

72 ()
¨gc
;

73 ()
¨gv
;

75 
i
=0; i<
NTHREADS
; i++) {

76 i‡(
i
)

77 
	`thªadf‹k
(
ThªadRu¬î
);

79 
	`thªadf‹k
(
BœdeRu¬î
);

82 
	`¥ötf
("Parent hasÜeft.\n");

84 
	}
}

92 
	$BœdeRu¬î
()

94 
cou¡
 < 
MAX
) {

95 i‡(
cou¡
 % 500 == 0)

96 
	`¥ötf
("Blade ");

97 
cou¡
++;

99 
	}
}

102 
	$ThªadRu¬î
()

104 
cou¡
 < 
MAX
) {

105 i‡(
cou¡
 % 513 == 0)

106 
	`¥ötf
(" Runner\n");

107 
cou¡
++;

109 
	}
}

	@user/testbin/zero/zero.c

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<î∫o.h
>

41 
	~<îr.h
>

47 
	gd©a_°uff
[] = {

60 
	#SUM_OF_DATA_STUFF
 525

	)

66 
	gbss_°uff
[3000];

70 
	$check_d©a
()

72 
i
, 
num
, 
k
;

74 
num
 = (
d©a_°uff
) / (data_stuff[0]);

75 
k
=
i
=0; i<
num
; i++) {

76 
k
 +
d©a_°uff
[
i
];

78 i‡(
k
 !
SUM_OF_DATA_STUFF
) {

79 
	`w¨nx
("My initialized data sumsÅoÅhe wrong value!");

80 
	`w¨nx
("GŸ: %u Ex≥˘ed: %u", 
k
, 
SUM_OF_DATA_STUFF
);

81 
	`îrx
(1, "FAILED");

83 
	}
}

87 
	$check_bss
()

89 
i
, 
num
;

91 
num
 = (
bss_°uff
) / (bss_stuff[0]);

92 
i
=0; i<
num
; i++) {

93 i‡(
bss_°uff
[
i
] != 0) {

94 
	`w¨nx
("BSSÉntryát index %u (address %p)Çot zero!",

95 
i
, &
bss_°uff
[i]);

96 
	`w¨nx
("Found: 0x%x", 
bss_°uff
[
i
]);

97 
	`îrx
(1, "FAILED");

100 
	}
}

104 
	$check_sbrk
()

106 *
ba£
;

107 
i
;

110 
	#SBRK_SIZE
 10000

	)

112 
ba£
 = 
	`sbrk
(
SBRK_SIZE
);

113 i‡(
ba£
 == (*)-1) {

114 i‡(
î∫o
 =
EUNIMP
) {

115 
	`¥ötf
("I guess you haven't implemented sbrk yet.\n");

118 
	`îr
(1, "sbrk");

121 
i
=0; i<
SBRK_SIZE
; i++) {

122 i‡(
ba£
[
i
] != 0) {

123 
	`w¨nx
("Byteát offset %u (address %p)Çot zero",

124 
i
, &
ba£
[i]);

125 
	`w¨nx
("GŸ: 0x%x", ()
ba£
[
i
]);

126 
	`w¨nx
("Ba£ o‡sbrkÑegi⁄: %p", 
ba£
);

127 
	`îrx
(1, "FAILED");

130 
	}
}

134 
	$maö
()

136 
	`¥ötf
("zero:Öhase 1: checking .bss\n");

137 
	`check_d©a
();

138 
	`check_bss
();

140 
	`¥ötf
("zero:Öhase 2: checking sbrk()\n");

141 
	`check_sbrk
();

143 
	`¥ötf
("zero:Öassed\n");

145 
	}
}

	@user/uw-testbin/argtest/argtest.c

9 
	~<°dio.h
>

12 
	$maö
(
¨gc
, *
¨gv
[])

14 c⁄° *
tmp
;

15 
i
;

17 
	`¥ötf
("¨g¯ : %d\n", 
¨gc
);

18 
	`¥ötf
("&tm∞ : %p\n", &
tmp
);

19 
	`¥ötf
("&ò : %p\n", &
i
);

20 
	`¥ötf
("&¨g¯ : %p\n", &
¨gc
);

21 
	`¥ötf
("&¨gv : %p\n", &
¨gv
);

22 
	`¥ötf
("¨gv : %p\n", 
¨gv
);

23 
	`¥ötf
("\n");

25 
i
=0; i<=
¨gc
; i++) {

26 
	`¥ötf
("&¨gv[%d] : %p\n", 
i
, &
¨gv
[i]);

28 
	`¥ötf
("\n");

30 
i
=0; i<=
¨gc
; i++) {

31 
	`¥ötf
("¨gv[%d] : %p\n", 
i
, 
¨gv
[i]);

33 
	`¥ötf
("\n");

35 
i
=0; i<=
¨gc
; i++) {

36 
tmp
 = 
¨gv
[
i
];

37 i‡(
tmp
 =
NULL
) {

38 
tmp
 = "[NULL]";

40 
	`¥ötf
("¨gv[%d] -> %s\n", 
i
, 
tmp
);

44 
	}
}

	@user/uw-testbin/argtesttest/argtesttest.c

10 
	~<uni°d.h
>

11 
	~<îr.h
>

13 *
	gx¨gv
[4] = { (*)"¨gã°ã°", (*)"fú°", (*)"£c⁄d", 
NULL
 };

17 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

19 
pid_t
 
pid
 = 
	`f‹k
();

20 
pid
) {

22 
	`îr
(1, "fork");

25 
	`execv
(
¥og
, 
¨gv
);

26 
	`îr
(1, "%s", 
¥og
);

31 
	}
}

34 
	$maö
()

36 
	`•awnv
("/ã°bö/¨gã°", 
x¨gv
);

38 
	}
}

	@user/uw-testbin/conc-io/conc-io.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<uni°d.h
>

14 
	#PROCS
 (4)

	)

15 
	#BUF_SIZE
 (10)

	)

16 
	#NUM_WRITES
 (500)

	)

17 
	#TOTAL_WRITES
 (
NUM_WRITES
 * 
PROCS
)

	)

19 c⁄° *
	gto_wrôe
 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

20 
do_wrôes
(
c
);

23 
	$maö
()

25 
buf„r
[
BUF_SIZE
];

26 
°©us
 = -1;

27 
rc
[
PROCS
];

28 
pid_t
 
pid
[
PROCS
];

29 
rvÆ
 = -1;

30 
id
 = -1;

31 
i
,
k
;

33 
rvÆ
 = 
	`›í
("TESTFILE", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

35 i‡(
rvÆ
 < 0)

37 
	`¥ötf
("### TEST FAILED: UnableÅo create file\n");

38 
	`exô
(0);

40 
	`˛o£
(
rvÆ
);

43 
i
=0; i<
PROCS
; i++) {

44 
pid
[
i
] = 
	`f‹k
();

45 i‡(
pid
[
i
] < 0) {

46 
	`¥ötf
("F‹k %d faûed\n", 
i
);

47 
	`exô
(0);

51 i‡(
pid
[
i
] == 0) {

52 
	`do_wrôes
(
to_wrôe
[
i
]);

53 
	`¥ötf
("Pro˚s†numbî %d i†d⁄e\n", 
i
);

54 
	`exô
(0);

59 
i
=0; i<
PROCS
; i++) {

60 i‡(
pid
[
i
] < 0) {

61 
	`¥ötf
("### TEST FAILED: UnableÅo createÖrocesses\n");

66 
i
=0; i<
PROCS
; i++) {

67 
rc
[
i
] = 
	`waôpid
(
pid
[i], &
°©us
, 0);

68 i‡(
rc
[
i
] !
pid
[i]) {

69 
	`¥ötf
("### TEST FAILED: wait forÖrocesses failed\n");

71 
	`¥ötf
("D⁄êwaôög f‹Öro˚s†numbî %d\n", 
i
);

75 
id
 = 
	`›í
("TESTFILE", 
O_RDWR
);

76 i‡(
id
 < 0)

78 
	`¥ötf
("### TEST FAILED: UnableÅo open file\n");

79 
	`exô
(1);

83 
i
=0; i<
TOTAL_WRITES
; i++)

85 
rvÆ
 = 
	`ªad
(
id
, 
buf„r
, 
BUF_SIZE
);

87 
k
=0; k<(
BUF_SIZE
-1); k++) {

88 i‡(
buf„r
[
k
] != buffer[k+1]) {

89 
	`¥ötf
("### TEST FAILED; Writes wereÇotátomic\n");

90 
	`¥ötf
("buffer[%d] = %c != buffer[%d] = %c\n",

91 
k
, 
buf„r
[k], k+1, buffer[k+1]);

92 
	`˛o£
(
id
);

93 
	`exô
(1);

98 
rvÆ
 = 
	`˛o£
(
id
);

100 i‡(
rvÆ
 < 0)

102 
	`¥ötf
("### TEST FAILED: UnableÅo close file\n");

104 
	`¥ötf
("PASSED\n");

106 
	`exô
(0);

108 
	}
}

111 
	$do_wrôes
(
c
)

113 
rvÆ
 = 0;

114 
id
 = -1;

115 
i
 = 0;

116 
j
 = 0;

117 
buf„r
[
BUF_SIZE
];

118 vﬁ©ûê
tŸÆ
 = 0;

120 
j
=0; j<
BUF_SIZE
; j++) {

121 
buf„r
[
j
] = 
c
;

124 
id
 = 
	`›í
("TESTFILE", 
O_RDWR
);

126 i‡(
id
 < 0) {

127 
	`¥ötf
("### TEST FAILED: UnableÅo open file\n");

128 
	`_exô
(1);

131 
i
 = 0; i < 
NUM_WRITES
; i++) {

132 
rvÆ
 = 
	`wrôe
(
id
, 
buf„r
, 
BUF_SIZE
);

134 i‡(
rvÆ
 !
BUF_SIZE
) {

135 
	`¥ötf
("### TEST FAILED: U«bÀÅÿwrôê%d byã†tÿfûe\n", 
BUF_SIZE
);

136 
	`˛o£
(
id
);

137 
	`_exô
(1);

141 
j
=0; j<
BUF_SIZE
; j++) {

142 
buf„r
[
j
] = 
c
;

143 
tŸÆ
 +
j
;

147 
rvÆ
 = 
	`˛o£
(
id
);

149 i‡(
rvÆ
 < 0) {

150 
	`¥ötf
("### TEST FAILED: UnableÅo close file\n");

151 
	`_exô
(1);

154 
	}
}

	@user/uw-testbin/files1/files1.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~"../lib/ã°utûs.h
"

21 
	$maö
()

23 
f1
, 
f2
;

24 
i
 = 42;

25 
j
 = -999;

26 
ötbuf
 = 0;

27 
rc
 = 0;

28 
ßve_î∫o
 = 0;

34 
f1
 = 
	`›í
("FILE1", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

35 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1");

38 
f2
 = 
	`›í
("FILE2", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

39 
	`TEST_POSITIVE
(
f2
, "UnableÅo open FILE2");

41 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "fd f1 == f2");

44 
rc
 = 
	`wrôe
(
f1
, (*Ë&
i
, (i));

45 
	`TEST_EQUAL
(
rc
, (
i
), "writeÅo f1 doesÇot write/returnÖroper value");

48 
rc
 = 
	`wrôe
(
f2
, (*Ë&
j
, (j));

49 
	`TEST_EQUAL
(
rc
, (
j
), "writeÅo f2 doesÇot write/returnÖroper value");

51 
rc
 = 
	`˛o£
(
f1
);

52 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "close f1 failed");

54 
rc
 = 
	`˛o£
(
f1
);

55 
ßve_î∫o
 = 
î∫o
;

57 
	`TEST_NEGATIVE
(
rc
, "close f1 secondÅime didn't fail");

59 
rc
 = 
	`˛o£
(
f2
);

60 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "close f2 failed");

62 
f1
 = 
	`›í
("FILE1", 
O_RDONLY
);

63 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1,áfter Close");

65 
f2
 = 
	`›í
("FILE2", 
O_RDONLY
);

66 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE2,áfter Close");

68 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "fd f1 == f2");

70 
rc
 = 
	`ªad
(
f1
, (*Ë&
ötbuf
, (intbuf));

71 
	`TEST_EQUAL
(
rc
, (
ötbuf
),

73 
	`TEST_EQUAL
(
ötbuf
, 
i
,

76 
rc
 = 
	`ªad
(
f2
, (*Ë&
ötbuf
, (intbuf));

77 
	`TEST_EQUAL
(
rc
, (
j
), "read from f2 doesÇotÑead/returnÖroper value");

78 
	`TEST_EQUAL
(
ötbuf
, 
j
, "read from f2 didÇot get correct value");

80 
	`TEST_STATS
();

82 
	`exô
(0);

83 
	}
}

	@user/uw-testbin/files2/files2.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<î∫o.h
>

18 
	~<f˙é.h
>

19 
	~"../lib/ã°utûs.h
"

25 
	#USING_ERR_CODES


	)

28 
	#BOGUS_NAME
 "ZZ12ZT"

	)

33 
	#COUNT_LIMIT
 (4*1024)

	)

35 
	gfd_¨øy
[
COUNT_LIMIT
];

38 
	$maö
()

40 
f1
, 
f2
, 
f3
;

41 
i
 = 42;

42 
j
 = -999;

43 
rc
 = 0;

44 
cou¡
 = 0;

45 
ßved_î∫o
 = 0;

51 
rc
 = 
	`›í
("FILE1", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

52 
	`TEST_POSITIVE
(
rc
, "UnableÅo create FILE1 (assumesÅhat it doesn'tÉxist)");

55 
rc
 = 
	`›í
("FILE2", 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

56 
	`TEST_POSITIVE
(
rc
, "UnableÅo create FILE2 (assumesÅhat it doesn'tÉxist)");

59 
f1
 = 
	`›í
("FILE1", 
O_RDWR
);

60 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1 firstÅime");

62 
f2
 = 
	`›í
("FILE1", 
O_RDWR
);

63 
	`TEST_POSITIVE
(
f2
, "UnableÅo open FILE1 secondÅime");

65 
f3
 = 
	`›í
("FILE1", 
O_RDWR
);

66 
	`TEST_POSITIVE
(
f3
, "UnableÅo open FILE1ÅhirdÅime");

69 
	`TEST_NOT_EQUAL
(
f1
, 
f2
, "Using same fd for multiple opens f1 = f2");

70 
	`TEST_NOT_EQUAL
(
f2
, 
f3
, "Using same fd for multiple opens f2 = f3");

72 
rc
 = 
	`˛o£
(
f1
);

73 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f1");

74 
rc
 = 
	`˛o£
(
f2
);

75 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f2");

76 
rc
 = 
	`˛o£
(
f3
);

77 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f3");

80 
rc
 = 
	`wrôe
(
f1
, (*Ë&
i
, (i));

81 
ßved_î∫o
 = 
î∫o
;

82 
	`TEST_NEGATIVE
(
rc
, "writeÅo closed file f1 should fail");

83 #ifde‡
USING_ERR_CODES


84 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF when writingÅo closed file f1");

88 
rc
 = 
	`ªad
(
f2
, (*Ë&
j
, (j));

89 
ßved_î∫o
 = 
î∫o
;

90 
	`TEST_NEGATIVE
(
rc
, "read from closed file f2 should fail");

91 #ifde‡
USING_ERR_CODES


92 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF whenÑeading from closed file f2");

95 
rc
 = 
	`˛o£
(0xdeadbeef);

96 
ßved_î∫o
 = 
î∫o
;

97 
	`TEST_NEGATIVE
(
rc
, "close on invalid file id didn'tÑeturnÉrror code");

98 #ifde‡
USING_ERR_CODES


99 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBADF when closing invalid file fd");

102 
rc
 = 
	`›í
(
BOGUS_NAME
, 
O_RDWR
);

103 
ßved_î∫o
 = 
î∫o
;

104 
	`TEST_NEGATIVE
(
rc
, "openÇon-existant fileÑeturns incorrect value");

105 #ifde‡
USING_ERR_CODES


106 
	`TEST_EQUAL
(
ßved_î∫o
, 
ENOENT
, "Expected ENOENT when openingÇonÉxistant file");

110 
f1
 = 
	`›í
("FILE1", 
O_RDONLY
);

111 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE1");

114 
rc
 = 
	`wrôe
(
f1
, "hello", 5);

115 
ßved_î∫o
 = 
î∫o
;

116 
	`TEST_NEGATIVE
(
rc
, "TryingÅo writeÅoÑead only file doesÇot fail");

117 #ifde‡
USING_ERR_CODES


118 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBAD whenÅryingÅo writeÅoÑead only file");

122 
f2
 = 
	`›í
("FILE2", 
O_WRONLY
);

123 
	`TEST_POSITIVE
(
f1
, "UnableÅo open FILE2");

126 
rc
 = 
	`ªad
(
f2
, &
i
, 1);

127 
ßved_î∫o
 = 
î∫o
;

128 
	`TEST_NEGATIVE
(
rc
, "TryingÅoÑead from write only file doesÇot fail");

129 #ifde‡
USING_ERR_CODES


130 
	`TEST_EQUAL
(
ßved_î∫o
, 
EBADF
, "Expected EBAD whenÅryingÅoÑead from write only file");

133 
rc
 = 
	`˛o£
(
f1
);

134 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f1");

136 
rc
 = 
	`˛o£
(
f2
);

137 
	`TEST_EQUAL
(
rc
, 
SUCCESS
, "UnableÅo close f2");

140 
f1
 = 
	`›í
("FILE1", 
O_RDWR
);

141 
ßved_î∫o
 = 
î∫o
;

142 i‡(
f1
 >= 0) {

143 
fd_¨øy
[
cou¡
] = 
f1
;

144 
cou¡
++;

146 } 
f1
 >0 && 
cou¡
 < 
COUNT_LIMIT
);

148 i‡(
cou¡
 =
COUNT_LIMIT
) {

149 
	`¥ötf
("WARNING: THERE MAY NOT BE A LIMIT ON THE NUMBER OF OPEN FILES\n");

151 
	`TEST_NEGATIVE
(
f1
, "OpeningÅoo many files doesn'tÑeturnÉrror code");

152 #ifde‡
USING_ERR_CODES


153 
	`TEST_EQUAL_ONE_OF
(
ßved_î∫o
, 
EMFILE
, 
ENFILE
, "Expected one of EMFILE or ENFILE when openingÅoo many files");

157 
	`TEST_POSITIVE
(
cou¡
, "Count of open filesÉxpectedÅo be > 0");

158 
	`¥ötf
("Numbî o‡fûe†›íed = %d\n", 
cou¡
);

161 
i
=0; i<
cou¡
; i++) {

162 
rc
 = 
	`˛o£
(
fd_¨øy
[
i
]);

163 
	`TEST_EQUAL
(
rc
, 0, "Expected closeÅoÑeturn 0 for success");

167 
rc
 = 
	`›í
((*Ë0xffffffff, 
O_RDWR
);

168 
ßved_î∫o
 = 
î∫o
;

169 
	`TEST_NEGATIVE
(
rc
, "open file using badáddress doesn'tÑeturnÉrror code");

170 #ifde‡
USING_ERR_CODES


171 
	`TEST_EQUAL
(
ßved_î∫o
, 
EFAULT
, "Expected EFAULT for invalidáddress for filename");

174 
	`TEST_STATS
();

176 
	`exô
(0);

177 
	}
}

	@user/uw-testbin/hogparty/hogparty.c

10 
	~<uni°d.h
>

11 
	~<îr.h
>

13 *
	gxh¨gv
[2] = { (*)"xhog", 
NULL
 };

14 *
	gyh¨gv
[2] = { (*)"yhog", 
NULL
 };

15 *
	gzh¨gv
[2] = { (*)"zhog", 
NULL
 };

19 
	$•awnv
(c⁄° *
¥og
, **
¨gv
)

21 
pid_t
 
pid
 = 
	`f‹k
();

22 
pid
) {

24 
	`îr
(1, "fork");

27 
	`execv
(
¥og
, 
¨gv
);

28 
	`îr
(1, "%s", 
¥og
);

33 
	}
}

36 
	$maö
()

38 
	`•awnv
("/uw-ã°bö/xhog", 
xh¨gv
);

39 
	`•awnv
("/uw-ã°bö/yhog", 
yh¨gv
);

40 
	`•awnv
("/uw-ã°bö/zhog", 
zh¨gv
);

42 
	}
}

	@user/uw-testbin/lib/testutils.c

17 
	~<°dio.h
>

18 
	~"ã°utûs.h
"

21 
	gã°_num
 = 0;

22 
	gnum_Áûuªs
 = 0;

23 
	gvîbo£
 = 0;

27 
	$¥öt_loˇti⁄
(c⁄° *
fûe
, c⁄° *
func
, 
löe
, c⁄° *
ö_ã°
)

29 
	`¥ötf
(" %†: fun˘i⁄ = %s,Üöê%dÅe° wa†%s\n", 
fûe
, 
func
, 
löe
, 
ö_ã°
);

30 
	}
}

34 
	$ã°_equÆ
(
vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

35 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

37 
Áûed
 = 0;

38 c⁄° *
out
 = "SUCCESS";

40 
ã°_num
++;

42 i‡(
vÆ
 !
ex≥˘ed_vÆ
) {

43 
num_Áûuªs
++;

44 
Áûed
 = 1;

45 
out
 = "FAILURE";

48 i‡(
Áûed
 || 
vîbo£
) {

49 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected %d\n",

50 
out
, 
ã°_num
, 
vÆ
, 
ex≥˘ed_vÆ
);

52 i‡(
Áûed
) {

53 
	`¥ötf
(" %s\n", 
°r
);

55 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

58 
	}
}

62 
	$ã°_equÆ_⁄e_of
(
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
, c⁄° *
°r
,

63 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

65 
Áûed
 = 0;

66 c⁄° *
out
 = "SUCCESS";

68 
ã°_num
++;

70 i‡(
vÆ
 !
ex≥˘ed_vÆ1
 && vÆ !
ex≥˘ed_vÆ2
) {

71 
num_Áûuªs
++;

72 
Áûed
 = 1;

73 
out
 = "FAILURE";

76 i‡(
Áûed
 || 
vîbo£
) {

77 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected one of %d or %d\n",

78 
out
, 
ã°_num
, 
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
);

80 i‡(
Áûed
) {

81 
	`¥ötf
(" %s\n", 
°r
);

83 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

86 
	}
}

90 
	$ã°_posôive
(
vÆ
, c⁄° *
°r
,

91 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

93 
Áûed
 = 0;

94 c⁄° *
out
 = "SUCCESS";

96 
ã°_num
++;

98 i‡(
vÆ
 <= 0) {

99 
num_Áûuªs
++;

100 
Áûed
 = 1;

101 
out
 = "FAILURE";

104 i‡(
Áûed
 || 
vîbo£
) {

105 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected Positive Value\n",

106 
out
, 
ã°_num
, 
vÆ
);

108 i‡(
Áûed
) {

109 
	`¥ötf
(" %s\n", 
°r
);

111 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

113 
	}
}

117 
	$ã°_√g©ive
(
vÆ
, c⁄° *
°r
,

118 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

120 
Áûed
 = 0;

121 c⁄° *
out
 = "SUCCESS";

123 
ã°_num
++;

125 i‡(
vÆ
 >= 0) {

126 
num_Áûuªs
++;

127 
Áûed
 = 1;

128 
out
 = "FAILURE";

131 i‡(
Áûed
 || 
vîbo£
) {

132 
	`¥ötf
("%s ON TEST = %d : Got %d :Éxpected Negative Value\n",

133 
out
, 
ã°_num
, 
vÆ
);

135 i‡(
Áûed
) {

136 
	`¥ötf
(" %s\n", 
°r
);

138 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

140 
	}
}

144 
	$ã°_nŸ_equÆ
(
vÆ1
, 
vÆ2
, c⁄° *
°r
,

145 c⁄° *
fûe
, c⁄° *
func
, 
löe
)

147 
Áûed
 = 0;

148 c⁄° *
out
 = "SUCCESS";

150 
ã°_num
++;

152 i‡(
vÆ1
 =
vÆ2
) {

153 
num_Áûuªs
++;

154 
Áûed
 = 1;

155 
out
 = "FAILURE";

158 i‡(
Áûed
 || 
vîbo£
) {

159 
	`¥ötf
("%s ON TEST = %d : Got %d : Expectedánything but %d\n",

160 
out
, 
ã°_num
, 
vÆ1
, 
vÆ2
);

162 i‡(
Áûed
) {

163 
	`¥ötf
(" %s\n", 
°r
);

165 
	`¥öt_loˇti⁄
(
fûe
, 
func
, 
löe
, 
__FUNCTION__
);

167 
	}
}

171 
	$ã°_ª£t_°©s
()

173 
num_Áûuªs
 = 0;

174 
ã°_num
 = 0;

175 
	}
}

178 
	$ã°_vîbo£_⁄
()

180 
	`¥ötf
("TEST VERBOSE ON\n");

181 
vîbo£
 = 1;

182 
	}
}

185 
	$ã°_vîbo£_off
()

187 
	`¥ötf
("TEST VERBOSE OFF\n");

188 
vîbo£
 = 0;

189 
	}
}

192 
	$ã°_¥öt_°©s
(c⁄° *
fûe
, c⁄° * 
func
, 
löe
)

194 
	`¥ötf
("TEST STATS for %s : from function = %s,Üine = %d\n",

195 
fûe
, 
func
, 
löe
);

196 
	`¥ötf
(" Number of failures = %d Number of successes = %d Number of Tests = %d\n",

197 
num_Áûuªs
, 
ã°_num
 -Çum_failures,Åest_num);

198 
	`¥ötf
("\n");

199 
	}
}

202 #ifde‡
UNIT_TEST


204 
	$maö
()

206 
	`TEST_VERBOSE_ON
();

208 
	`TEST_EQUAL
(1, 1, "ShouldÖass\n");

209 
	`TEST_EQUAL
(1, 2, "Should fail\n");

210 
	`TEST_EQUAL_ONE_OF
(1, 1, 2, "ShouldÖass\n");

211 
	`TEST_EQUAL_ONE_OF
(1, 2, 1, "ShouldÖass\n");

212 
	`TEST_EQUAL_ONE_OF
(1, 2, 3, "Should fail\n");

213 
	`TEST_NOT_EQUAL
(1, 2, "ShouldÖass\n");

214 
	`TEST_NOT_EQUAL
(2, 1, "ShouldÖass\n");

215 
	`TEST_NOT_EQUAL
(2, 2, "Should fail\n");

217 
	`TEST_NEGATIVE
(-1, "ShouldÖass\n");

218 
	`TEST_NEGATIVE
(0, "Should fail\n");

219 
	`TEST_NEGATIVE
(1, "Should fail\n");

220 
	`TEST_POSITIVE
(1, "ShouldÖass\n");

221 
	`TEST_POSITIVE
(0, "Should fail\n");

222 
	`TEST_POSITIVE
(-1, "Should fail\n");

224 
	`TEST_STATS
();

225 
	`¥ötf
("Should have 7Öassesánd 7 failures\n");

226 
	}
}

	@user/uw-testbin/lib/testutils.h

1 #i‚de‡
TESTUTILS_H


2 
	#TESTUTILS_H


	)

4 
	#SUCCESS
 (0)

	)

6 
	#TEST_EQUAL
(
a
, 
b
, 
s
) \

7 
	`ã°_equÆ
(
a
, 
b
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

9 
	#TEST_EQUAL_ONE_OF
(
a
, 
b
, 
c
, 
s
) \

10 
	`ã°_equÆ_⁄e_of
(
a
, 
b
, 
c
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

12 
	#TEST_NOT_EQUAL
(
a
, 
b
, 
s
) \

13 
	`ã°_nŸ_equÆ
(
a
, 
b
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

15 
	#TEST_NEGATIVE
(
a
, 
s
) \

16 
	`ã°_√g©ive
(
a
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

18 
	#TEST_POSITIVE
(
a
, 
s
) \

19 
	`ã°_posôive
(
a
, 
s
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

21 
	#TEST_STATS
() \

22 
	`ã°_¥öt_°©s
–
__FILE__
, 
__FUNCTION__
, 
__LINE__
)

	)

24 
	#TEST_VERBOSE_ON
() \

25 
	`ã°_vîbo£_⁄
()

	)

27 
	#TEST_VERBOSE_OFF
() \

28 
	`ã°_vîbo£_off
()

	)

30 
ã°_equÆ
(
ªt_vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

31 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

32 
ã°_equÆ_⁄e_of
(
vÆ
, 
ex≥˘ed_vÆ1
, 
ex≥˘ed_vÆ2
, c⁄° *
°r
,

33 c⁄° *
fûe
, c⁄° *
func
, 
löe
);

34 
ã°_posôive
(
ªt_vÆ
, c⁄° *
°r
,

35 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

36 
ã°_√g©ive
(
ªt_vÆ
, c⁄° *
°r
,

37 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

38 
ã°_nŸ_equÆ
(
ªt_vÆ
, 
ex≥˘ed_vÆ
, c⁄° *
°r
,

39 c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

40 
ã°_¥öt_°©s
(c⁄° *
fûe
, c⁄° * 
func
, 
löe
);

41 
ã°_ª£t_°©s
();

42 
ã°_vîbo£_⁄
();

43 
ã°_vîbo£_off
();

	@user/uw-testbin/onefork/onefork.c

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<îr.h
>

17 
	$maö
(
¨gc
, *
¨gv
[])

19 ()
¨gc
;

20 ()
¨gv
;

21 
pid_t
 
pid
;

22 
pid
 = 
	`f‹k
();

23 i‡(
pid
 < 0) {

24 
	`w¨n
("fork");

26 i‡(
pid
 == 0) {

28 
	`putch¨
('C');

29 
	`putch¨
('\n');

33 
	`putch¨
('P');

34 
	`putch¨
('\n');

37 
	}
}

	@user/uw-testbin/pidcheck/pidcheck.c

10 
	~<uni°d.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<îr.h
>

18 vﬁ©ûê
	gtŸ
;

21 
	$maö
(
¨gc
, *
¨gv
[])

23 ()
¨gc
;

24 ()
¨gv
;

25 
pid_t
 
pid
,
pid2
;

26 
i
;

27 
pid
 = 
	`f‹k
();

28 i‡(
pid
 < 0) {

29 
	`w¨n
("fork");

31 i‡(
pid
 == 0) {

33 
pid2
 = 
	`gëpid
();

35 
	`¥ötf
("C: %d\n",
pid2
);

40 
tŸ
 = 0;

41 
i
=0;i<1000000;i++) {

42 
tŸ
++;

45 
	`¥ötf
("PC: %d\n",
pid
);

47 
pid2
 = 
	`gëpid
();

48 
	`¥ötf
("PP: %d\n",
pid2
);

51 
	}
}

	@user/uw-testbin/romemwrite/romemwrite.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

19 
	#INVAL_INSN
 0x0000003f

	)

22 
	$maö
()

24 *
x
 = (*Ë
maö
;

26 
	`¥ötf
("TryingÅo writeÅoÅheÅext segment\n");

27 
	`¥ötf
("ThisÖrogram should fail ifÅheÅext segment isÑead-only.\n");

28 
	`¥ötf
("However,Åhe kernel shouldÇot crash...\n");

30 *
x
 = 
INVAL_INSN
;

32 
	`¥ötf
("IF THIS PRINTS, THE TEST FAILED\n");

33 
	`exô
(1);

34 
	}
}

	@user/uw-testbin/segments/segments.c

4 
	~<uni°d.h
>

6 
	#N
 (200)

	)

8 
	gx
 = 0xdeadbeef;

9 
	gt1
;

10 
	gt2
;

11 
	gt3
;

12 
	g¨øy
[4096];

13 c⁄° *
	g°r
 = "Hello World\n";

14 c⁄° 
	gz
 = 0xabcddcba;

16 
	sexam∂e
 {

17 
	mypos
;

18 
	mxpos
;

22 
	$maö
()

24 
cou¡
 = 0;

25 c⁄° 
vÆue
 = 1;

26 
t1
 = 
N
;

27 
t2
 = 2;

28 
cou¡
 = 
x
 + 
t1
;

29 
t2
 = 
z
 +Å2 + 
vÆue
;

31 
	`ªboŸ
(
RB_POWEROFF
);

33 
	}
}

	@user/uw-testbin/sparse/sparse.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

20 
	#PageSize
 4096

	)

21 
	#NumPages
 128

	)

24 
	#AºaySize
 (2*
NumPages
*
PageSize
)

	)

25 
	g•¨£
[
AºaySize
];

28 
	$maö
()

30 
i
,
j
;

32 
	`¥ötf
("StartingÅhe sparseÖrogram\n");

36 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

37 
•¨£
[
i
]= 'a';

40 
	`¥ötf
("stage [1] done\n");

43 
j
=0; j<5; j++) {

44 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

45 
•¨£
[
i
] += 1;

49 
	`¥ötf
("stage [2] done\n");

53 
i
=0; i<
AºaySize
; i+=(10*
PageSize
)) {

54 i‡(
•¨£
[
i
] != ('a'+5)) {

55 
	`¥ötf
("Te° faûed! U√x≥˘ed vÆuê©áºayÖosôi⁄ %d\n", 
i
);

60 
	`¥ötf
("SUCCESS\n");

63 
	}
}

	@user/uw-testbin/syscall/syscall.c

2 
	~<uni°d.h
>

3 
	~<î∫o.h
>

6 
	$maö
()

8 
x
;

9 
x
 = 
	`˛o£
(999);

10 i‡(
x
 < 0) {

11  
î∫o
;

13  
x
;

15 
	}
}

	@user/uw-testbin/tlbfaulter/tlbfaulter.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

24 
	#PageSize
 4096

	)

25 
	#TLBSize
 64

	)

28 
	#AºaySize
 ((
TLBSize
+5)*
PageSize
)

	)

29 
	gébã°
[
AºaySize
];

32 
	$maö
()

34 
i
,
j
;

36 
	`¥ötf
("StartingÅheÅlbfaulterÖrogram\n");

39 
i
=0; i<
AºaySize
; i++) {

40 
ébã°
[
i
]= 'a';

43 
	`¥ötf
("tlbfaulter:árray initialization completed\n");

46 
j
=0; j<5; j++) {

47 
i
=0; i<
AºaySize
; i+=
PageSize
) {

48 
ébã°
[
i
] += 1;

52 
	`¥ötf
("tlbfaulter:árray updates completed\n");

55 
i
=0; i<
AºaySize
; i+=
PageSize
) {

56 i‡(
ébã°
[
i
] != ('a'+5)) {

57 
	`¥ötf
("Te° faûed! U√x≥˘ed vÆuê©áºayÖosôi⁄ %d\n", 
i
);

62 
	`¥ötf
("SUCCESS\n");

65 
	}
}

	@user/uw-testbin/vm-crash1/vm-crash1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 #i‡
deföed
(
__mùs__
)

5 
	#INSN_TYPE
 

	)

6 
	#INVAL_INSN
 0x0000003f

	)

13 
	$maö
()

16 
INSN_TYPE
 *
x
 = (INSN_TYPE *Ë
maö
;

17 *
x
 = 
INVAL_INSN
;

19 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

20 
	`exô
(1);

21 
	}
}

	@user/uw-testbin/vm-crash2/vm-crash2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

9 c⁄° *
	g°r
 =

89 
	$maö
()

91 
Àn
 = 
	`°æí
(
°r
);

92 *
loˇti⁄
;

94 
loˇti⁄
 = (*Ë&
°r
[
Àn
-5];

95 *
loˇti⁄
 = 'B';

96 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

98 
	`exô
(1);

99 
	}
}

	@user/uw-testbin/vm-crash3/vm-crash3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 #i‡
deföed
(
__mùs__
)

6 
	#INSN_TYPE
 

	)

7 
	#INVAL_INSN
 0x0000003f

	)

12 
wrôe_to_code
();

13 
ªad_d©a
();

14 
wrôe_d©a
();

17 
	$wrôe_to_code
()

19 
	`func_150
();

21 
INSN_TYPE
 *
x
 = (INSN_TYPE *Ë
func_150
;

22 *
x
 = 
INVAL_INSN
;

24 
	`¥ötf
("IF THIS PRINTS THE TEST FAILED\n");

25 
	}
}

27 
ˇŒ_Æl
();

29 
	#PAGE_SIZE
 (4096)

	)

30 
	#PAGES
 (128)

	)

31 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

32 
	#NUM_REFS
 (2)

	)

34 
	g¨øy
[
SIZE
];

37 
	$wrôe_d©a
()

39 
ªfs
 = 0;

40 
i
 = 0;

42 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

43 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

44 
¨øy
[
i
] = i;

47 
	}
}

50 
	$ªad_d©a
()

52 
i
 = 0;

54 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

55 i‡(
¨øy
[
i
] != i) {

56 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

57 
	`exô
(1);

60 
	}
}

64 
	$maö
()

66 
i
 = 0;

68 
i
=0; i<5; i++) {

69 
	`ˇŒ_Æl
();

70 
	`wrôe_d©a
();

71 
	`ˇŒ_Æl
();

72 
	`ªad_d©a
();

76 
	`wrôe_to_code
();

77 
	`exô
(0);

78 
	}
}

	@user/uw-testbin/vm-data1/vm-data1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (128)

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

7 
	#NUM_REFS
 (5)

	)

10 
	g¨øy
[
SIZE
];

13 
	$maö
()

15 
i
 = 0;

16 
ªfs
 = 0;

18 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

19 
i
=0; i<
SIZE
; i++) {

20 
¨øy
[
i
] = i;

24 
i
=0; i<
SIZE
; i++) {

25 i‡(
¨øy
[
i
] != i) {

26 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

27 
	`exô
(1);

31 
	`¥ötf
("SUCCEEDED\n");

32 
	`exô
(0);

33 
	}
}

	@user/uw-testbin/vm-data2/vm-data2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (2048Ë

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

7 
	#NUM_REFS
 (2)

	)

8 
	#PAGES_TO_TOUCH
 (1536Ë

	)

11 
	g¨øy
[
SIZE
];

14 
	$maö
()

16 
i
 = 0;

17 
ödex
 = 0;

18 
ªfs
 = 0;

20 
ªfs
 = 0;Ñef†< 
NUM_REFS
;Ñefs++) {

21 
i
=0; i<
PAGES_TO_TOUCH
; i++) {

22 
ödex
 = 
i
 * 
PAGE_SIZE
 / ();

23 
¨øy
[
ödex
] = 
i
;

27 
i
=0; i<
PAGES_TO_TOUCH
; i++) {

28 
ödex
 = 
i
 * 
PAGE_SIZE
 / ();

29 i‡(
¨øy
[
ödex
] !
i
) {

30 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[
ödex
], i);

31 
	`exô
(1);

35 
	`¥ötf
("SUCCEEDED\n");

36 
	`exô
(0);

37 
	}
}

	@user/uw-testbin/vm-data3/vm-data3.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

10 
ˇŒ_Æl
();

11 
wrôe_d©a
();

12 
ªad_d©a
();

14 
	#PAGE_SIZE
 (4096)

	)

15 
	#PAGES
 (128)

	)

16 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

17 
	#NUM_REFS
 (2)

	)

19 
	g¨øy
[
SIZE
];

22 
	$wrôe_d©a
()

24 
ªfs
 = 0;

25 
i
 = 0;

27 
ªfs
 = 0;Ñef†< 
NUM_REFS
-1;Ñefs++) {

28 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

29 
¨øy
[
i
] = i;

32 
	}
}

35 
	$ªad_d©a
()

37 
i
 = 0;

39 
i
=0; i<
SIZE
; i+
PAGE_SIZE
) {

40 i‡(
¨øy
[
i
] != i) {

41 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

42 
	`exô
(1);

45 
	}
}

49 
	$maö
()

51 
i
 = 0;

53 
i
=0; i<5; i++) {

54 
	`ˇŒ_Æl
();

55 
	`wrôe_d©a
();

56 
	`ˇŒ_Æl
();

57 
	`ªad_d©a
();

60 
	`¥ötf
("SUCCEEDED\n");

61 
	`exô
(0);

62 
	}
}

	@user/uw-testbin/vm-funcs/vm-funcs.c

6 
ˇŒ_Æl_lo›
(
cou¡
);

7 
ˇŒ_Æl
();

10 
	#FUNCTION_LOOP
 (2)

	)

13 
	#PROTFUNC
(
num
Ë
func_
##
	`num
();

	)

14 
PROTFUNC
(0); PROTFUNC(1); PROTFUNC(2); PROTFUNC(3); PROTFUNC(4);

15 
PROTFUNC
(5); PROTFUNC(6); PROTFUNC(7); PROTFUNC(8); PROTFUNC(9);

16 
PROTFUNC
(10); PROTFUNC(11); PROTFUNC(12); PROTFUNC(13); PROTFUNC(14);

17 
PROTFUNC
(15); PROTFUNC(16); PROTFUNC(17); PROTFUNC(18); PROTFUNC(19);

18 
PROTFUNC
(20); PROTFUNC(21); PROTFUNC(22); PROTFUNC(23); PROTFUNC(24);

19 
PROTFUNC
(25); PROTFUNC(26); PROTFUNC(27); PROTFUNC(28); PROTFUNC(29);

20 
PROTFUNC
(30); PROTFUNC(31); PROTFUNC(32); PROTFUNC(33); PROTFUNC(34);

21 
PROTFUNC
(35); PROTFUNC(36); PROTFUNC(37); PROTFUNC(38); PROTFUNC(39);

22 
PROTFUNC
(40); PROTFUNC(41); PROTFUNC(42); PROTFUNC(43); PROTFUNC(44);

23 
PROTFUNC
(45); PROTFUNC(46); PROTFUNC(47); PROTFUNC(48); PROTFUNC(49);

24 
PROTFUNC
(50); PROTFUNC(51); PROTFUNC(52); PROTFUNC(53); PROTFUNC(54);

25 
PROTFUNC
(55); PROTFUNC(56); PROTFUNC(57); PROTFUNC(58); PROTFUNC(59);

26 
PROTFUNC
(60); PROTFUNC(61); PROTFUNC(62); PROTFUNC(63); PROTFUNC(64);

27 
PROTFUNC
(65); PROTFUNC(66); PROTFUNC(67); PROTFUNC(68); PROTFUNC(69);

28 
PROTFUNC
(70); PROTFUNC(71); PROTFUNC(72); PROTFUNC(73); PROTFUNC(74);

29 
PROTFUNC
(75); PROTFUNC(76); PROTFUNC(77); PROTFUNC(78); PROTFUNC(79);

30 
PROTFUNC
(80); PROTFUNC(81); PROTFUNC(82); PROTFUNC(83); PROTFUNC(84);

31 
PROTFUNC
(85); PROTFUNC(86); PROTFUNC(87); PROTFUNC(88); PROTFUNC(89);

32 
PROTFUNC
(90); PROTFUNC(91); PROTFUNC(92); PROTFUNC(93); PROTFUNC(94);

33 
PROTFUNC
(95); PROTFUNC(96); PROTFUNC(97); PROTFUNC(98); PROTFUNC(99);

34 
PROTFUNC
(100); PROTFUNC(101); PROTFUNC(102); PROTFUNC(103); PROTFUNC(104);

35 
PROTFUNC
(105); PROTFUNC(106); PROTFUNC(107); PROTFUNC(108); PROTFUNC(109);

36 
PROTFUNC
(110); PROTFUNC(111); PROTFUNC(112); PROTFUNC(113); PROTFUNC(114);

37 
PROTFUNC
(115); PROTFUNC(116); PROTFUNC(117); PROTFUNC(118); PROTFUNC(119);

38 
PROTFUNC
(120); PROTFUNC(121); PROTFUNC(122); PROTFUNC(123); PROTFUNC(124);

39 
PROTFUNC
(125); PROTFUNC(126); PROTFUNC(127); PROTFUNC(128); PROTFUNC(129);

40 
PROTFUNC
(130); PROTFUNC(131); PROTFUNC(132); PROTFUNC(133); PROTFUNC(134);

41 
PROTFUNC
(135); PROTFUNC(136); PROTFUNC(137); PROTFUNC(138); PROTFUNC(139);

42 
PROTFUNC
(140); PROTFUNC(141); PROTFUNC(142); PROTFUNC(143); PROTFUNC(144);

43 
PROTFUNC
(145); PROTFUNC(146); PROTFUNC(147); PROTFUNC(148); PROTFUNC(149);

44 
PROTFUNC
(150); PROTFUNC(151); PROTFUNC(152); PROTFUNC(153); PROTFUNC(154);

45 
PROTFUNC
(155); PROTFUNC(156); PROTFUNC(157); PROTFUNC(158); PROTFUNC(159);

46 
PROTFUNC
(160); PROTFUNC(161); PROTFUNC(162); PROTFUNC(163); PROTFUNC(164);

47 
PROTFUNC
(165); PROTFUNC(166); PROTFUNC(167); PROTFUNC(168); PROTFUNC(169);

48 
PROTFUNC
(170); PROTFUNC(171); PROTFUNC(172); PROTFUNC(173); PROTFUNC(174);

49 
PROTFUNC
(175); PROTFUNC(176); PROTFUNC(177); PROTFUNC(178); PROTFUNC(179);

50 
PROTFUNC
(180); PROTFUNC(181); PROTFUNC(182); PROTFUNC(183); PROTFUNC(184);

51 
PROTFUNC
(185); PROTFUNC(186); PROTFUNC(187); PROTFUNC(188); PROTFUNC(189);

52 
PROTFUNC
(190); PROTFUNC(191); PROTFUNC(192); PROTFUNC(193); PROTFUNC(194);

53 
PROTFUNC
(195); PROTFUNC(196); PROTFUNC(197); PROTFUNC(198); PROTFUNC(199);

54 
PROTFUNC
(200); PROTFUNC(201); PROTFUNC(202); PROTFUNC(203); PROTFUNC(204);

55 
PROTFUNC
(205); PROTFUNC(206); PROTFUNC(207); PROTFUNC(208); PROTFUNC(209);

56 
PROTFUNC
(210); PROTFUNC(211); PROTFUNC(212); PROTFUNC(213); PROTFUNC(214);

57 
PROTFUNC
(215); PROTFUNC(216); PROTFUNC(217); PROTFUNC(218); PROTFUNC(219);

58 
PROTFUNC
(220); PROTFUNC(221); PROTFUNC(222); PROTFUNC(223); PROTFUNC(224);

59 
PROTFUNC
(225); PROTFUNC(226); PROTFUNC(227); PROTFUNC(228); PROTFUNC(229);

60 
PROTFUNC
(230); PROTFUNC(231); PROTFUNC(232); PROTFUNC(233); PROTFUNC(234);

61 
PROTFUNC
(235); PROTFUNC(236); PROTFUNC(237); PROTFUNC(238); PROTFUNC(239);

62 
PROTFUNC
(240); PROTFUNC(241); PROTFUNC(242); PROTFUNC(243); PROTFUNC(244);

63 
PROTFUNC
(245); PROTFUNC(246); PROTFUNC(247); PROTFUNC(248); PROTFUNC(249);

64 
PROTFUNC
(250); PROTFUNC(251); PROTFUNC(252); PROTFUNC(253); PROTFUNC(254);

65 
PROTFUNC
(255); PROTFUNC(256); PROTFUNC(257); PROTFUNC(258); PROTFUNC(259);

66 
PROTFUNC
(260); PROTFUNC(261); PROTFUNC(262); PROTFUNC(263); PROTFUNC(264);

67 
PROTFUNC
(265); PROTFUNC(266); PROTFUNC(267); PROTFUNC(268); PROTFUNC(269);

68 
PROTFUNC
(270); PROTFUNC(271); PROTFUNC(272); PROTFUNC(273); PROTFUNC(274);

69 
PROTFUNC
(275); PROTFUNC(276); PROTFUNC(277); PROTFUNC(278); PROTFUNC(279);

70 
PROTFUNC
(280); PROTFUNC(281); PROTFUNC(282); PROTFUNC(283); PROTFUNC(284);

71 
PROTFUNC
(285); PROTFUNC(286); PROTFUNC(287); PROTFUNC(288); PROTFUNC(289);

72 
PROTFUNC
(290); PROTFUNC(291); PROTFUNC(292); PROTFUNC(293); PROTFUNC(294);

73 
PROTFUNC
(295); PROTFUNC(296); PROTFUNC(297); PROTFUNC(298); PROTFUNC(299);

79 
	#FUNC
(
num
) \

80 
func_
##
	`num
() \

82 
i
; \

83 vﬁ©ûê
l
 = 10; \

84 vﬁ©ûê
m
 = 11; \

85 vﬁ©ûê
n
 = 12; \

87 
i
=0; i<
FUNCTION_LOOP
; i++) { \

88 
l
 =Ü + 
m
 - 
n
 + 
i
; \

89 
m
 = 
l
 + m - 
n
 + 
i
; \

90 
n
 = 
l
 + 
m
 -Ç + 
i
; \

91 
l
 =Ü + 
m
 - 
n
 + 
i
; \

92 
m
 = 
l
 + m - 
n
 + 
i
; \

93 
n
 = 
l
 + 
m
 -Ç + 
i
; \

94 
l
 =Ü + 
m
 - 
n
 + 
i
; \

95 
m
 = 
l
 + m - 
n
 + 
i
; \

96 
n
 = 
l
 + 
m
 -Ç + 
i
; \

97 
l
 =Ü + 
m
 - 
n
 + 
i
; \

98 
m
 = 
l
 + m - 
n
 + 
i
; \

99 
n
 = 
l
 + 
m
 -Ç + 
i
; \

100 
l
 =Ü + 
m
 - 
n
 + 
i
; \

101 
m
 = 
l
 + m - 
n
 + 
i
; \

102 
n
 = 
l
 + 
m
 -Ç + 
i
; \

103 
l
 =Ü + 
m
 - 
n
 + 
i
; \

105 
i
=0; i<
FUNCTION_LOOP
; i++) { \

106 
m
 = 
l
 + m - 
n
 + 
i
; \

107 
l
 =Ü + 
m
 - 
n
 + 
i
; \

108 
n
 = 
l
 + 
m
 -Ç + 
i
; \

109 
m
 = 
l
 + m - 
n
 + 
i
; \

110 
m
 = 
l
 + m - 
n
 + 
i
; \

111 
l
 =Ü + 
m
 - 
n
 + 
i
; \

112 
n
 = 
l
 + 
m
 -Ç + 
i
; \

113 
m
 = 
l
 + m - 
n
 + 
i
; \

114 
l
 =Ü + 
m
 - 
n
 + 
i
; \

115 
n
 = 
l
 + 
m
 -Ç + 
i
; \

116 
m
 = 
l
 + m - 
n
 + 
i
; \

117 
l
 =Ü + 
m
 - 
n
 + 
i
; \

118 
n
 = 
l
 + 
m
 -Ç + 
i
; \

120 
i
=0; i<
FUNCTION_LOOP
; i++) { \

121 
n
 = 
l
 + 
m
 -Ç + 
i
; \

122 
m
 = 
l
 + m - 
n
 + 
i
; \

123 
l
 =Ü + 
m
 - 
n
 + 
i
; \

124 
n
 = 
l
 + 
m
 -Ç + 
i
; \

125 
m
 = 
l
 + m - 
n
 + 
i
; \

126 
l
 =Ü + 
m
 - 
n
 + 
i
; \

127 
n
 = 
l
 + 
m
 -Ç + 
i
; \

129 
i
=0; i<
FUNCTION_LOOP
; i++) { \

130 
l
 =Ü + 
m
 - 
n
 + 
i
; \

131 
n
 = 
l
 + 
m
 -Ç + 
i
; \

132 
m
 = 
l
 + m - 
n
 + 
i
; \

133 
l
 =Ü + 
m
 - 
n
 + 
i
; \

134 
n
 = 
l
 + 
m
 -Ç + 
i
; \

135 
m
 = 
l
 + m - 
n
 + 
i
; \

136 
l
 =Ü + 
m
 - 
n
 + 
i
; \

137 
m
 = 
l
 + m - 
n
 + 
i
; \

138 
l
 =Ü + 
m
 - 
n
 + 
i
; \

139 
n
 = 
l
 + 
m
 -Ç + 
i
; \

140 
m
 = 
l
 + m - 
n
 + 
i
; \

141 
l
 =Ü + 
m
 - 
n
 + 
i
; \

142 
n
 = 
l
 + 
m
 -Ç + 
i
; \

143 
m
 = 
l
 + m - 
n
 + 
i
; \

144 
l
 =Ü + 
m
 - 
n
 + 
i
; \

145 
m
 = 
l
 + m - 
n
 + 
i
; \

149  
l
 + 
m
 + 
n
; \

150 }

	)

154 
FUNC
(0); FUNC(1); FUNC(2); FUNC(3); FUNC(4);

155 
FUNC
(5); FUNC(6); FUNC(7); FUNC(8); FUNC(9);

156 
FUNC
(10); FUNC(11); FUNC(12); FUNC(13); FUNC(14);

157 
FUNC
(15); FUNC(16); FUNC(17); FUNC(18); FUNC(19);

158 
FUNC
(20); FUNC(21); FUNC(22); FUNC(23); FUNC(24);

159 
FUNC
(25); FUNC(26); FUNC(27); FUNC(28); FUNC(29);

160 
FUNC
(30); FUNC(31); FUNC(32); FUNC(33); FUNC(34);

161 
FUNC
(35); FUNC(36); FUNC(37); FUNC(38); FUNC(39);

162 
FUNC
(40); FUNC(41); FUNC(42); FUNC(43); FUNC(44);

163 
FUNC
(45); FUNC(46); FUNC(47); FUNC(48); FUNC(49);

164 
FUNC
(50); FUNC(51); FUNC(52); FUNC(53); FUNC(54);

165 
FUNC
(55); FUNC(56); FUNC(57); FUNC(58); FUNC(59);

166 
FUNC
(60); FUNC(61); FUNC(62); FUNC(63); FUNC(64);

167 
FUNC
(65); FUNC(66); FUNC(67); FUNC(68); FUNC(69);

168 
FUNC
(70); FUNC(71); FUNC(72); FUNC(73); FUNC(74);

169 
FUNC
(75); FUNC(76); FUNC(77); FUNC(78); FUNC(79);

170 
FUNC
(80); FUNC(81); FUNC(82); FUNC(83); FUNC(84);

171 
FUNC
(85); FUNC(86); FUNC(87); FUNC(88); FUNC(89);

172 
FUNC
(90); FUNC(91); FUNC(92); FUNC(93); FUNC(94);

173 
FUNC
(95); FUNC(96); FUNC(97); FUNC(98); FUNC(99);

174 
FUNC
(100); FUNC(101); FUNC(102); FUNC(103); FUNC(104);

175 
FUNC
(105); FUNC(106); FUNC(107); FUNC(108); FUNC(109);

176 
FUNC
(110); FUNC(111); FUNC(112); FUNC(113); FUNC(114);

177 
FUNC
(115); FUNC(116); FUNC(117); FUNC(118); FUNC(119);

178 
FUNC
(120); FUNC(121); FUNC(122); FUNC(123); FUNC(124);

179 
FUNC
(125); FUNC(126); FUNC(127); FUNC(128); FUNC(129);

180 
FUNC
(130); FUNC(131); FUNC(132); FUNC(133); FUNC(134);

181 
FUNC
(135); FUNC(136); FUNC(137); FUNC(138); FUNC(139);

182 
FUNC
(140); FUNC(141); FUNC(142); FUNC(143); FUNC(144);

183 
FUNC
(145); FUNC(146); FUNC(147); FUNC(148); FUNC(149);

184 
FUNC
(150); FUNC(151); FUNC(152); FUNC(153); FUNC(154);

185 
FUNC
(155); FUNC(156); FUNC(157); FUNC(158); FUNC(159);

186 
FUNC
(160); FUNC(161); FUNC(162); FUNC(163); FUNC(164);

187 
FUNC
(165); FUNC(166); FUNC(167); FUNC(168); FUNC(169);

188 
FUNC
(170); FUNC(171); FUNC(172); FUNC(173); FUNC(174);

189 
FUNC
(175); FUNC(176); FUNC(177); FUNC(178); FUNC(179);

190 
FUNC
(180); FUNC(181); FUNC(182); FUNC(183); FUNC(184);

191 
FUNC
(185); FUNC(186); FUNC(187); FUNC(188); FUNC(189);

192 
FUNC
(190); FUNC(191); FUNC(192); FUNC(193); FUNC(194);

193 
FUNC
(195); FUNC(196); FUNC(197); FUNC(198); FUNC(199);

194 
FUNC
(200); FUNC(201); FUNC(202); FUNC(203); FUNC(204);

195 
FUNC
(205); FUNC(206); FUNC(207); FUNC(208); FUNC(209);

196 
FUNC
(210); FUNC(211); FUNC(212); FUNC(213); FUNC(214);

197 
FUNC
(215); FUNC(216); FUNC(217); FUNC(218); FUNC(219);

198 
FUNC
(220); FUNC(221); FUNC(222); FUNC(223); FUNC(224);

199 
FUNC
(225); FUNC(226); FUNC(227); FUNC(228); FUNC(229);

200 
FUNC
(230); FUNC(231); FUNC(232); FUNC(233); FUNC(234);

201 
FUNC
(235); FUNC(236); FUNC(237); FUNC(238); FUNC(239);

202 
FUNC
(240); FUNC(241); FUNC(242); FUNC(243); FUNC(244);

203 
FUNC
(245); FUNC(246); FUNC(247); FUNC(248); FUNC(249);

204 
FUNC
(250); FUNC(251); FUNC(252); FUNC(253); FUNC(254);

205 
FUNC
(255); FUNC(256); FUNC(257); FUNC(258); FUNC(259);

206 
FUNC
(260); FUNC(261); FUNC(262); FUNC(263); FUNC(264);

207 
FUNC
(265); FUNC(266); FUNC(267); FUNC(268); FUNC(269);

208 
FUNC
(270); FUNC(271); FUNC(272); FUNC(273); FUNC(274);

209 
FUNC
(275); FUNC(276); FUNC(277); FUNC(278); FUNC(279);

210 
FUNC
(280); FUNC(281); FUNC(282); FUNC(283); FUNC(284);

211 
FUNC
(285); FUNC(286); FUNC(287); FUNC(288); FUNC(289);

212 
FUNC
(290); FUNC(291); FUNC(292); FUNC(293); FUNC(294);

213 
FUNC
(295); FUNC(296); FUNC(297); FUNC(298); FUNC(299);

215 
	#CALLFUNC
(
i
) \

216 
func_
##
	`i
()

	)

219 
	$ˇŒ_Æl
()

221 
	`CALLFUNC
(0); CALLFUNC(1); CALLFUNC(2); CALLFUNC(3); CALLFUNC(4);

222 
	`CALLFUNC
(5); CALLFUNC(6); CALLFUNC(7); CALLFUNC(8); CALLFUNC(9);

223 
	`CALLFUNC
(10); CALLFUNC(11); CALLFUNC(12); CALLFUNC(13); CALLFUNC(14);

224 
	`CALLFUNC
(15); CALLFUNC(16); CALLFUNC(17); CALLFUNC(18); CALLFUNC(19);

225 
	`CALLFUNC
(20); CALLFUNC(21); CALLFUNC(22); CALLFUNC(23); CALLFUNC(24);

226 
	`CALLFUNC
(25); CALLFUNC(26); CALLFUNC(27); CALLFUNC(28); CALLFUNC(29);

227 
	`CALLFUNC
(30); CALLFUNC(31); CALLFUNC(32); CALLFUNC(33); CALLFUNC(34);

228 
	`CALLFUNC
(35); CALLFUNC(36); CALLFUNC(37); CALLFUNC(38); CALLFUNC(39);

229 
	`CALLFUNC
(40); CALLFUNC(41); CALLFUNC(42); CALLFUNC(43); CALLFUNC(44);

230 
	`CALLFUNC
(45); CALLFUNC(46); CALLFUNC(47); CALLFUNC(48); CALLFUNC(49);

231 
	`CALLFUNC
(50); CALLFUNC(51); CALLFUNC(52); CALLFUNC(53); CALLFUNC(54);

232 
	`CALLFUNC
(55); CALLFUNC(56); CALLFUNC(57); CALLFUNC(58); CALLFUNC(59);

233 
	`CALLFUNC
(60); CALLFUNC(61); CALLFUNC(62); CALLFUNC(63); CALLFUNC(64);

234 
	`CALLFUNC
(65); CALLFUNC(66); CALLFUNC(67); CALLFUNC(68); CALLFUNC(69);

235 
	`CALLFUNC
(70); CALLFUNC(71); CALLFUNC(72); CALLFUNC(73); CALLFUNC(74);

236 
	`CALLFUNC
(75); CALLFUNC(76); CALLFUNC(77); CALLFUNC(78); CALLFUNC(79);

237 
	`CALLFUNC
(80); CALLFUNC(81); CALLFUNC(82); CALLFUNC(83); CALLFUNC(84);

238 
	`CALLFUNC
(85); CALLFUNC(86); CALLFUNC(87); CALLFUNC(88); CALLFUNC(89);

239 
	`CALLFUNC
(90); CALLFUNC(91); CALLFUNC(92); CALLFUNC(93); CALLFUNC(94);

240 
	`CALLFUNC
(95); CALLFUNC(96); CALLFUNC(97); CALLFUNC(98); CALLFUNC(99);

241 
	`CALLFUNC
(100); CALLFUNC(101); CALLFUNC(102); CALLFUNC(103); CALLFUNC(104);

242 
	`CALLFUNC
(105); CALLFUNC(106); CALLFUNC(107); CALLFUNC(108); CALLFUNC(109);

243 
	`CALLFUNC
(110); CALLFUNC(111); CALLFUNC(112); CALLFUNC(113); CALLFUNC(114);

244 
	`CALLFUNC
(115); CALLFUNC(116); CALLFUNC(117); CALLFUNC(118); CALLFUNC(119);

245 
	`CALLFUNC
(120); CALLFUNC(121); CALLFUNC(122); CALLFUNC(123); CALLFUNC(124);

246 
	`CALLFUNC
(125); CALLFUNC(126); CALLFUNC(127); CALLFUNC(128); CALLFUNC(129);

247 
	`CALLFUNC
(130); CALLFUNC(131); CALLFUNC(132); CALLFUNC(133); CALLFUNC(134);

248 
	`CALLFUNC
(135); CALLFUNC(136); CALLFUNC(137); CALLFUNC(138); CALLFUNC(139);

249 
	`CALLFUNC
(140); CALLFUNC(141); CALLFUNC(142); CALLFUNC(143); CALLFUNC(144);

250 
	`CALLFUNC
(145); CALLFUNC(146); CALLFUNC(147); CALLFUNC(148); CALLFUNC(149);

251 
	`CALLFUNC
(150); CALLFUNC(151); CALLFUNC(152); CALLFUNC(153); CALLFUNC(154);

252 
	`CALLFUNC
(155); CALLFUNC(156); CALLFUNC(157); CALLFUNC(158); CALLFUNC(159);

253 
	`CALLFUNC
(160); CALLFUNC(161); CALLFUNC(162); CALLFUNC(163); CALLFUNC(164);

254 
	`CALLFUNC
(165); CALLFUNC(166); CALLFUNC(167); CALLFUNC(168); CALLFUNC(169);

255 
	`CALLFUNC
(170); CALLFUNC(171); CALLFUNC(172); CALLFUNC(173); CALLFUNC(174);

256 
	`CALLFUNC
(175); CALLFUNC(176); CALLFUNC(177); CALLFUNC(178); CALLFUNC(179);

257 
	`CALLFUNC
(180); CALLFUNC(181); CALLFUNC(182); CALLFUNC(183); CALLFUNC(184);

258 
	`CALLFUNC
(185); CALLFUNC(186); CALLFUNC(187); CALLFUNC(188); CALLFUNC(189);

259 
	`CALLFUNC
(190); CALLFUNC(191); CALLFUNC(192); CALLFUNC(193); CALLFUNC(194);

260 
	`CALLFUNC
(195); CALLFUNC(196); CALLFUNC(197); CALLFUNC(198); CALLFUNC(199);

261 
	`CALLFUNC
(200); CALLFUNC(201); CALLFUNC(202); CALLFUNC(203); CALLFUNC(204);

262 
	`CALLFUNC
(205); CALLFUNC(206); CALLFUNC(207); CALLFUNC(208); CALLFUNC(209);

263 
	`CALLFUNC
(210); CALLFUNC(211); CALLFUNC(212); CALLFUNC(213); CALLFUNC(214);

264 
	`CALLFUNC
(215); CALLFUNC(216); CALLFUNC(217); CALLFUNC(218); CALLFUNC(219);

265 
	`CALLFUNC
(220); CALLFUNC(221); CALLFUNC(222); CALLFUNC(223); CALLFUNC(224);

266 
	`CALLFUNC
(225); CALLFUNC(226); CALLFUNC(227); CALLFUNC(228); CALLFUNC(229);

267 
	`CALLFUNC
(230); CALLFUNC(231); CALLFUNC(232); CALLFUNC(233); CALLFUNC(234);

268 
	`CALLFUNC
(235); CALLFUNC(236); CALLFUNC(237); CALLFUNC(238); CALLFUNC(239);

269 
	`CALLFUNC
(240); CALLFUNC(241); CALLFUNC(242); CALLFUNC(243); CALLFUNC(244);

270 
	`CALLFUNC
(245); CALLFUNC(246); CALLFUNC(247); CALLFUNC(248); CALLFUNC(249);

271 
	`CALLFUNC
(250); CALLFUNC(251); CALLFUNC(252); CALLFUNC(253); CALLFUNC(254);

272 
	`CALLFUNC
(255); CALLFUNC(256); CALLFUNC(257); CALLFUNC(258); CALLFUNC(259);

273 
	`CALLFUNC
(260); CALLFUNC(261); CALLFUNC(262); CALLFUNC(263); CALLFUNC(264);

274 
	`CALLFUNC
(265); CALLFUNC(266); CALLFUNC(267); CALLFUNC(268); CALLFUNC(269);

275 
	`CALLFUNC
(270); CALLFUNC(271); CALLFUNC(272); CALLFUNC(273); CALLFUNC(274);

276 
	`CALLFUNC
(275); CALLFUNC(276); CALLFUNC(277); CALLFUNC(278); CALLFUNC(279);

277 
	`CALLFUNC
(280); CALLFUNC(281); CALLFUNC(282); CALLFUNC(283); CALLFUNC(284);

278 
	`CALLFUNC
(285); CALLFUNC(286); CALLFUNC(287); CALLFUNC(288); CALLFUNC(289);

279 
	`CALLFUNC
(290); CALLFUNC(291); CALLFUNC(292); CALLFUNC(293); CALLFUNC(294);

280 
	`CALLFUNC
(295); CALLFUNC(296); CALLFUNC(297); CALLFUNC(298); CALLFUNC(299);

281 
	}
}

284 
	$ˇŒ_Æl_lo›
(
cou¡
)

286 
i
 = 0;

287 
i
=0; i<
cou¡
; i++) {

288 
	`ˇŒ_Æl
();

290 
	}
}

	@user/uw-testbin/vm-mix1-exec/vm-mix1-exec.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 *
	g¨gv
[2] = { (*)"vm-mix1", 
NULL
 };

9 
	$maö
()

11 
	`execv
("vm-mix1/vm-mix1", 
¨gv
);

12 
	`exô
(0);

13 
	}
}

	@user/uw-testbin/vm-mix1-fork/vm-mix1-fork.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

15 
ˇŒ_Æl
();

16 
wrôe_d©a
(
¨øy
[], 
°¨t
);

17 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

18 
¥öt_d©a
(
¨øy
[]);

19 
do_w‹k
(
°¨t
);

21 
	#PAGE_SIZE
 (4096)

	)

22 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

23 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

24 
	#ELEM_SIZE
 (())

	)

25 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

26 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

27 
	#NUM_REFS
 (2)

	)

29 
	#STACK_PAGES_USED
 (9)

	)

30 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

32 
	göô
[] = {

41 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

43 
	g¨øy1
[
ELEMS
];

44 
	g¨øy2
[
ELEMS
];

47 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

49 
ªf
 = 0;

50 
i
 = 0;

52 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

53 
i
=0; i<
ELEMS
; i++) {

54 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

57 
	}
}

60 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

62 
ªf
 = 0;

63 
i
 = 0;

65 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

66 
i
=0; i<
ELEMS
; i++) {

67 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

68 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %uÑef = %d\n",

69 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i, 
ªf
+1);

70 
	`exô
(1);

74 
	}
}

77 
	$¥öt_d©a
(
¨øy
[])

79 
i
 = 0;

80 
cou¡
 = 0;

82 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

83 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

84 i‡(((
cou¡
+1) % 4) == 0) {

85 
	`¥ötf
("\n");

87 
cou¡
++;

89 
	`¥ötf
("\n");

90 
	}
}

93 
	$do_w‹k
(
°¨t
)

95 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

96 
i
 = 0;

97 
¨øy1_°¨t
 = 
°¨t
;

98 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

100 
	`¥ötf
("Checkög unöôülizedáºay1Öid = %d\n", 
	`gëpid
());

102 
i
=0; i<
ELEMS
; i++) {

103 i‡(
¨øy1
[
i
] != 0) {

104 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

105 
	`exô
(1);

109 
	`¥ötf
("Checkög unöôülizedáºay2Öid = %d\n", 
	`gëpid
());

111 
i
=0; i<
ELEMS
; i++) {

112 i‡(
¨øy2
[
i
] != 0) {

113 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

114 
	`exô
(1);

118 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

119 
°ack_¨øy
[
i
] = i * 1000;

122 
i
=0; i<2; i++) {

123 
	`ˇŒ_Æl
();

124 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

125 
	`ˇŒ_Æl
();

126 
	`¥ötf
("Checkög inôülizedáºay1Öid = %d\n", 
	`gëpid
());

127 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

131 
	`¥ötf
("Checkög inôülizedáºay2ágaöÖid = %d\n", 
	`gëpid
());

132 
i
=0; i<
ELEMS
; i++) {

133 i‡(
¨øy2
[
i
] != 0) {

134 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

135 
	`exô
(1);

139 
	`¥ötf
("Checkög inôülized sèck_¨øyÖid = %d\n", 
	`gëpid
());

140 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

141 i‡(
°ack_¨øy
[
i
] != i * 1000) {

142 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

143 
	`exô
(1);

147 
	`¥ötf
("Checkög inôülized inôÖid = %d\n", 
	`gëpid
());

149 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

150 i‡(
öô
[
i
] != i) {

151 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

152 
	`exô
(1);

156 
i
=0; i<2; i++) {

157 
	`ˇŒ_Æl
();

158 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

159 
	`ˇŒ_Æl
();

160 
	`¥ötf
("Checkög inôülizedáºay2Öid = %d\n", 
	`gëpid
());

161 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

164 
	`¥ötf
("Checkög inôülized sèck_¨øyÖid = %d\n", 
	`gëpid
());

165 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

166 i‡(
°ack_¨øy
[
i
] != i * 1000) {

167 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

168 
	`exô
(1);

173 
	`¥ötf
("Checkög inôülized inôÖid = %d\n", 
	`gëpid
());

174 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

175 i‡(
öô
[
i
] != i) {

176 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

177 
	`exô
(1);

182 
	`¥ötf
("Checkög inôülizedáºay1 f‹Åhêœ°Åimêpid = %d\n", 
	`gëpid
());

183 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

184 
	`¥ötf
("Checkög inôülizedáºay2 f‹Åhêœ°Åimêpid = %d\n", 
	`gëpid
());

185 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

188 
	`¥ötf
("Pid = %d SUCCEEDED\n", 
	`gëpid
());

189 
	}
}

192 
	$maö
()

194 
pid
 = 0;

195 
rc
 = 0;

196 
°©us
 = 0;

198 #ifde‡
DEBUG


199 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

200 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

201 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

202 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

203 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

204 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

205 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

208 
pid
 = 
	`f‹k
();

209 i‡(
pid
 < 0) {

210 
	`¥ötf
("UnableÅo fork\n");

211 
	`exô
(1);

214 i‡(
pid
 == 0) {

215 
	`¥ötf
("ChûdÖid = %d cÆlög do_w‹k\n", 
	`gëpid
());

216 
	`do_w‹k
(20);

217 #ifde‡
DEBUG_CHILD


218 
	`¥ötf
("array 1\n");

219 
	`¥öt_d©a
(
¨øy1
);

220 
	`¥ötf
("array 2\n");

221 
	`¥öt_d©a
(
¨øy2
);

223 
	`exô
(0);

226 
	`¥ötf
("P¨íàpid = %d cÆlög do_w‹k\n", 
	`gëpid
());

227 
	`do_w‹k
(1);

228 #ifde‡
DEBUG_PARENT


229 
	`¥ötf
("array 1\n");

230 
	`¥öt_d©a
(
¨øy1
);

231 
	`¥ötf
("array 2\n");

232 
	`¥öt_d©a
(
¨øy2
);

234 
rc
 = 
	`waôpid
(
pid
, &
°©us
, 0);

235 
	`exô
(0);

236 
	}
}

	@user/uw-testbin/vm-mix1/vm-mix1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

13 
ˇŒ_Æl
();

14 
wrôe_d©a
(
¨øy
[], 
°¨t
);

15 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

16 
¥öt_d©a
(
¨øy
[]);

17 
do_w‹k
(
°¨t
);

19 
	#PAGE_SIZE
 (4096)

	)

20 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

21 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

22 
	#ELEM_SIZE
 (())

	)

23 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

24 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

25 
	#NUM_REFS
 (2)

	)

27 
	#STACK_PAGES_USED
 (9)

	)

28 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

30 
	göô
[] = {

39 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

41 
	g¨øy1
[
ELEMS
];

42 
	g¨øy2
[
ELEMS
];

45 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

47 
ªf
 = 0;

48 
i
 = 0;

50 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

51 
i
=0; i<
ELEMS
; i++) {

52 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

55 
	}
}

58 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

60 
ªf
 = 0;

61 
i
 = 0;

63 
ªf
 = 0;Ñe‡< 
NUM_REFS
-1;Ñef++) {

64 
i
=0; i<
ELEMS
; i++) {

65 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

66 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %uÑef = %d\n",

67 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i, 
ªf
+1);

68 
	`exô
(1);

72 
	}
}

75 
	$¥öt_d©a
(
¨øy
[])

77 
i
 = 0;

78 
cou¡
 = 0;

80 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

81 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

82 i‡(((
cou¡
+1) % 4) == 0) {

83 
	`¥ötf
("\n");

85 
cou¡
++;

87 
	`¥ötf
("\n");

88 
	}
}

91 
	$do_w‹k
(
°¨t
)

93 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

94 
i
 = 0;

95 
¨øy1_°¨t
 = 
°¨t
;

96 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

98 
	`¥ötf
("Checking uninitializedárray1\n");

100 
i
=0; i<
ELEMS
; i++) {

101 i‡(
¨øy1
[
i
] != 0) {

102 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

103 
	`exô
(1);

107 
	`¥ötf
("Checking uninitializedárray2\n");

109 
i
=0; i<
ELEMS
; i++) {

110 i‡(
¨øy2
[
i
] != 0) {

111 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

112 
	`exô
(1);

116 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

117 
°ack_¨øy
[
i
] = i * 1000;

120 
i
=0; i<2; i++) {

121 
	`ˇŒ_Æl
();

122 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

123 
	`ˇŒ_Æl
();

124 
	`¥ötf
("Checking initializedárray1\n");

125 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

129 
	`¥ötf
("Checking initializedárray2ágain\n");

130 
i
=0; i<
ELEMS
; i++) {

131 i‡(
¨øy2
[
i
] != 0) {

132 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

133 
	`exô
(1);

137 
	`¥ötf
("Checking initialized stack_array\n");

138 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

139 i‡(
°ack_¨øy
[
i
] != i * 1000) {

140 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

141 
	`exô
(1);

145 
	`¥ötf
("Checking initialized init\n");

147 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

148 i‡(
öô
[
i
] != i) {

149 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

150 
	`exô
(1);

154 
i
=0; i<2; i++) {

155 
	`ˇŒ_Æl
();

156 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

157 
	`ˇŒ_Æl
();

158 
	`¥ötf
("Checking initializedárray2\n");

159 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

162 
	`¥ötf
("Checking initialized stack_array\n");

163 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

164 i‡(
°ack_¨øy
[
i
] != i * 1000) {

165 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

166 
	`exô
(1);

171 
	`¥ötf
("Checking initialized init\n");

172 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

173 i‡(
öô
[
i
] != i) {

174 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

175 
	`exô
(1);

180 
	`¥ötf
("Checking initializedárray1 forÅheÜastÅime\n");

181 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

182 
	`¥ötf
("Checking initializedárray2 forÅheÜastÅime\n");

183 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

186 
	`¥ötf
("SUCCEEDED\n");

187 
	}
}

190 
	$maö
()

193 #ifde‡
DEBUG


194 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

195 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

196 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

197 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

198 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

199 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

200 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

203 
	`do_w‹k
(1);

204 #ifde‡
DEBUG


205 
	`¥ötf
("array 1\n");

206 
	`¥öt_d©a
(
¨øy1
);

207 
	`¥ötf
("array 2\n");

208 
	`¥öt_d©a
(
¨øy2
);

210 
	`exô
(0);

211 
	}
}

	@user/uw-testbin/vm-mix2/vm-mix2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

13 
ˇŒ_Æl_lo›
(
cou¡
);

14 
wrôe_d©a
(
¨øy
[], 
°¨t
);

15 
ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
);

16 
¥öt_d©a
(
¨øy
[]);

17 
do_w‹k
(
°¨t
);

19 
	#PAGE_SIZE
 (4096)

	)

20 
	#DATA_BYTES
 (3 * 1024 * 1024)

	)

21 
	#PAGES
 (
DATA_BYTES
 / 
PAGE_SIZE
)

	)

22 
	#ELEM_SIZE
 (())

	)

23 
	#ELEMS
 ((
PAGE_SIZE
 * 
PAGES
 / ()Ë/ 2)

	)

24 
	#ELEMS_PER_PAGE
 (
PAGE_SIZE
 / 
ELEM_SIZE
)

	)

26 
	#TLB_SIZE
 (64)

	)

27 
	#LOCAL_REFS
 (
TLB_SIZE
 - 6Ë

	)

29 
	#STACK_PAGES_USED
 (9)

	)

30 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

32 
	#MIN
(
a
,
b
Ë(◊ < bË?á : b)

	)

34 
	göô
[] = {

43 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

45 
	g¨øy1
[
ELEMS
];

46 
	g¨øy2
[
ELEMS
];

49 
	$wrôe_d©a
(
¨øy
[], 
°¨t
)

51 
i
 = 0;

52 
k
 = 0;

53 
íd
 = 0;

55 
k
=0; k<
ELEMS
; k +
PAGE_SIZE
) {

56 
íd
 = 
	`MIN
(
ELEMS
, (
k
 + (
LOCAL_REFS
 * 
ELEMS_PER_PAGE
)));

57 
i
=
k
; i<
íd
; i++) {

58 
¨øy
[
i
] = 
°¨t
 + (ò/ 
ELEMS_PER_PAGE
);

60 #ifde‡
DEBUG


61 
	`¥ötf
("‰om k = %dÅÿò%dÉnd %d\n", 
i
, 
k
, 
íd
);

64 
	}
}

67 
	$ªad_d©a
(
¨øy
[], 
°¨t
, c⁄° *
¨øy_«me
)

69 
i
 = 0;

70 
j
 = 
°¨t
;

72 
j
 = 
°¨t
;

73 
i
=0; i<
ELEMS
; i++) {

74 i‡(
¨øy
[
i
] !(
°¨t
 + (ò/ 
ELEMS_PER_PAGE
))) {

75 
	`¥ötf
("FAILED in file %sátÜine %d %s[%d] = %u != %u\n",

76 
__FILE__
, 
__LINE__
, 
¨øy_«me
, 
i
, 
¨øy
[i], i);

77 
	`exô
(1);

80 
	}
}

83 
	$¥öt_d©a
(
¨øy
[])

85 
i
 = 0;

86 
cou¡
 = 0;

88 
i
=0; i<
ELEMS
; i+(
ELEMS_PER_PAGE
)) {

89 
	`¥ötf
("[%10u] = %10u ", 
i
, 
¨øy
[i]);

90 i‡(((
cou¡
+1) % 4) == 0) {

91 
	`¥ötf
("\n");

93 
cou¡
++;

95 
	`¥ötf
("\n");

96 
	}
}

99 
	$do_w‹k
(
°¨t
)

101 
°ack_¨øy
[
STACK_ARRAY_ELEMS
];

102 
i
 = 0;

103 
¨øy1_°¨t
 = 
°¨t
;

104 
¨øy2_°¨t
 = 
°¨t
 + (
ELEMS
 / (
ELEMS_PER_PAGE
)) + 10;

106 
	`¥ötf
("Checking uninitializedárray1\n");

108 
i
=0; i<
ELEMS
; i++) {

109 i‡(
¨øy1
[
i
] != 0) {

110 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay1[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy1
[i], 0);

111 
	`exô
(1);

115 
	`¥ötf
("Checking uninitializedárray2\n");

117 
i
=0; i<
ELEMS
; i++) {

118 i‡(
¨øy2
[
i
] != 0) {

119 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

120 
	`exô
(1);

124 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

125 
°ack_¨øy
[
i
] = i * 1000;

128 
i
=0; i<2; i++) {

129 
	`ˇŒ_Æl_lo›
(1);

130 
	`wrôe_d©a
(
¨øy1
, 
¨øy1_°¨t
);

131 
	`ˇŒ_Æl_lo›
(1);

132 
	`¥ötf
("Checking initializedárray1\n");

133 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

137 
	`¥ötf
("Checking initializedárray2ágain\n");

138 
i
=0; i<
ELEMS
; i++) {

139 i‡(
¨øy2
[
i
] != 0) {

140 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d:áºay2[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
¨øy2
[i], 0);

141 
	`exô
(1);

145 
	`¥ötf
("Checking initialized stack_array\n");

146 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

147 i‡(
°ack_¨øy
[
i
] != i * 1000) {

148 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

149 
	`exô
(1);

153 
	`¥ötf
("Checking initialized init\n");

155 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

156 i‡(
öô
[
i
] != i) {

157 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

158 
	`exô
(1);

162 
i
=0; i<2; i++) {

163 
	`ˇŒ_Æl_lo›
(20);

164 
	`wrôe_d©a
(
¨øy2
, 
¨øy2_°¨t
);

165 
	`ˇŒ_Æl_lo›
(20);

166 
	`¥ötf
("Checking initializedárray2\n");

167 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

170 
	`¥ötf
("Checking initialized stack_array\n");

171 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

172 i‡(
°ack_¨øy
[
i
] != i * 1000) {

173 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: sèck_¨øy[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
°ack_¨øy
[i], i);

174 
	`exô
(1);

179 
	`¥ötf
("Checking initialized init\n");

180 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

181 i‡(
öô
[
i
] != i) {

182 
	`¥ötf
("FAILED i¿fûê%†©Üöê%d: inô[%d] = %u !%d\n", 
__FILE__
, 
__LINE__
, 
i
, 
öô
[i], i);

183 
	`exô
(1);

188 
	`¥ötf
("Checking initializedárray1 forÅheÜastÅime\n");

189 
	`ªad_d©a
(
¨øy1
, 
¨øy1_°¨t
, "array1");

190 
	`¥ötf
("Checking initializedárray2 forÅheÜastÅime\n");

191 
	`ªad_d©a
(
¨øy2
, 
¨øy2_°¨t
, "array2");

194 
	`¥ötf
("SUCCEEDED\n");

195 
	}
}

198 
	$maö
()

201 #ifde‡
DEBUG


202 
	`¥ötf
("PAGE_SIZE = %d\n", 
PAGE_SIZE
);

203 
	`¥ötf
("DATA_BYTES = %d\n", 
DATA_BYTES
);

204 
	`¥ötf
("ELEMS = %d\n", 
ELEMS
);

205 
	`¥ötf
("ELEMS_PER_PAGE = %d\n", 
ELEMS_PER_PAGE
);

206 
	`¥ötf
("PAGES = %d\n", 
PAGES
);

207 
	`¥ötf
("AºayÉÀmít†%d\n", 
ELEMS
);

208 
	`¥ötf
("Page†≥∏¨øy = %d\n", ((
ELEMS
 * ()Ë/ 
PAGE_SIZE
));

211 
	`do_w‹k
(1);

212 #ifde‡
DEBUG


213 
	`¥ötf
("array 1\n");

214 
	`¥öt_d©a
(
¨øy1
);

215 
	`¥ötf
("array 2\n");

216 
	`¥öt_d©a
(
¨øy2
);

218 
	`exô
(0);

219 
	}
}

	@user/uw-testbin/vm-stack1/vm-stack1.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#PAGES
 (9)

	)

6 
	#SIZE
 (
PAGE_SIZE
 * 
PAGES
 / ())

	)

9 
	$maö
()

11 
¨øy
[
SIZE
];

12 
i
 = 0;

14 
i
=0; i<
SIZE
; i++) {

15 
¨øy
[
i
] = i;

18 
i
=0; i<
SIZE
; i++) {

19 i‡(
¨øy
[
i
] != i) {

20 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

21 
	`exô
(1);

25 
	`¥ötf
("SUCCEEDED\n");

26 
	`exô
(0);

27 
	}
}

	@user/uw-testbin/vm-stack2/vm-stack2.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	#PAGE_SIZE
 (4096)

	)

5 
	#STACK_PAGES_USED
 (9)

	)

6 
	#STACK_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
STACK_PAGES_USED
 / ())

	)

7 
	#UNINIT_PAGES
 (9)

	)

8 
	#UNINIT_ARRAY_ELEMS
 (
PAGE_SIZE
 * 
UNINIT_PAGES
 / ())

	)

10 
	gunöô
[
UNINIT_ARRAY_ELEMS
];

11 
	göô
[] = {

20 
	#INIT_ARRAY_ELEMS
 ((
öô
Ë/ ())

	)

23 
	$maö
()

25 
¨øy
[
STACK_ARRAY_ELEMS
];

26 
i
 = 0;

29 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

30 i‡(
unöô
[
i
] != 0) {

31 
	`¥ötf
("FAILED unöô[%d] = %u !%d\n", 
i
, 
unöô
[i], 0);

32 
	`exô
(1);

37 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

38 
unöô
[
i
] = i * 100;

42 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

43 
¨øy
[
i
] = i * 1000;

47 
i
=0; i<
STACK_ARRAY_ELEMS
; i++) {

48 i‡(
¨øy
[
i
] != i * 1000) {

49 
	`¥ötf
("FAILEDáºay[%d] = %u !%d\n", 
i
, 
¨øy
[i], i);

50 
	`exô
(1);

55 
i
=0; i<
UNINIT_ARRAY_ELEMS
; i++) {

56 i‡(
unöô
[
i
] != i * 100) {

57 
	`¥ötf
("FAILED unöô[%d] = %u !%d\n", 
i
, 
unöô
[i], i);

58 
	`exô
(1);

63 
i
=0; i<
INIT_ARRAY_ELEMS
; i++) {

64 i‡(
öô
[
i
] != i) {

65 
	`¥ötf
("FAILED inô[%d] = %u !%d\n", 
i
, 
öô
[i], i);

66 
	`exô
(1);

70 
	`¥ötf
("SUCCEEDED\n");

71 
	`exô
(0);

72 
	}
}

	@user/uw-testbin/widefork/widefork.c

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<îr.h
>

22 
dof‹k
();

23 
dowaô
(,);

26 
	$dof‹k
(
chûdnum
)

28 
pid_t
 
pid
;

29 
pid
 = 
	`f‹k
();

30 i‡(
pid
 < 0) {

31 
	`îrx
(1,"f‹k %d",
chûdnum
);

33 i‡(
pid
 == 0) {

35 
	`putch¨
('A'+
chûdnum
-1);

36 
	`putch¨
('\n');

37 
	`_exô
(
chûdnum
);

39 (
pid
);

40 
	}
}

43 
	$dowaô
(
chûdpid
, 
chûdnum
)

45 
rvÆ
;

46 i‡(
	`waôpid
(
chûdpid
,&
rvÆ
,0) < 0) {

47 
	`w¨nx
("waitpid 1");

50 i‡(
	`WIFEXITED
(
rvÆ
)) {

51 i‡((
	`WEXITSTATUS
(
rvÆ
)Ë=
chûdnum
) {

52 
	`putch¨
('a'+
chûdnum
-1);

53 
	`putch¨
('\n');

57 
	`putch¨
('x');

58 
	`putch¨
('\n');

60 
	}
}

63 
	$maö
(
¨gc
, *
¨gv
[])

65 ()
¨gc
;

66 ()
¨gv
;

67 
pid_t
 
pid1
,
pid2
,
pid3
;

68 
	`putch¨
('P');

69 
	`putch¨
('\n');

70 
pid1
 = 
	`dof‹k
(1);

71 
	`putch¨
('P');

72 
	`putch¨
('\n');

73 
pid2
 = 
	`dof‹k
(2);

74 
	`putch¨
('P');

75 
	`putch¨
('\n');

76 
pid3
 = 
	`dof‹k
(3);

77 
	`dowaô
(
pid1
,1);

78 
	`dowaô
(
pid2
,2);

79 
	`dowaô
(
pid3
,3);

81 
	}
}

	@user/uw-testbin/writeread/writeread.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<as£π.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

11 
	~"../lib/ã°utûs.h
"

13 
	#NUM_TIMES
 (1)

	)

14 
	#NUM_INTS
 (4*1024)

	)

17 
	$maö
()

19 
i
, 
rc
, 
fd
;

20 
wrôe_¨øy
[
NUM_INTS
];

21 
ªad_¨øy
[
NUM_INTS
];

27 
i
=0; i<
NUM_INTS
; i++) {

28 
wrôe_¨øy
[
i
] = i;

32 
fd
 = 
	`›í
("WRITE_READ_FILE", 
O_WRONLY
 | 
O_CREAT
);

33 
	`TEST_POSITIVE
(
fd
, "Open fileÇamed WRITE_READ_FILE failed\n");

35 
i
=0; i<
NUM_TIMES
; i++) {

36 
rc
 = 
	`wrôe
(
fd
, 
wrôe_¨øy
, (write_array));

37 
	`TEST_EQUAL
(
rc
, (
wrôe_¨øy
), "FailedÅo writeáll ofÅheárray");

40 
	`˛o£
(
fd
);

43 
fd
 = 
	`›í
("WRITE_READ_FILE", 
O_RDONLY
);

44 
	`TEST_POSITIVE
(
fd
, "Open fileÇamed WRITE_READ_FILE failed\n");

46 
i
=0; i<
NUM_TIMES
; i++) {

47 
rc
 = 
	`ªad
(
fd
, 
ªad_¨øy
, (read_array));

48 
	`TEST_EQUAL
(
rc
, (
ªad_¨øy
), "FailedÅoÑeadáll ofÅheárray");

49 
i
=0; i<
NUM_INTS
; i++) {

50 
	`TEST_EQUAL
(
ªad_¨øy
[
i
], 
wrôe_¨øy
[i], "ValueÑeadÇotÉqualÅo value written");

54 
	`TEST_STATS
();

56 
	`exô
(0);

57 
	}
}

	@user/uw-testbin/xhog/xhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('x');

47 
	`putch¨
('\n');

50 
	}
}

	@user/uw-testbin/yhog/yhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('y');

47 
	`putch¨
('\n');

50 
	}
}

	@user/uw-testbin/zhog/zhog.c

35 
	~<°dio.h
>

38 
	$maö
()

40 vﬁ©ûê
i
;

42 
i
=0; i<50000; i++) {

43 i‡(
i
%10000 == 0) {

44 
	`putch¨
('z');

47 
	`putch¨
('\n');

50 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_AARCH64
 183

	)

253 
	#EM_TILEPRO
 188

	)

254 
	#EM_MICROBLAZE
 189

	)

255 
	#EM_TILEGX
 191

	)

256 
	#EM_NUM
 192

	)

262 
	#EM_ALPHA
 0x9026

	)

266 
	#EV_NONE
 0

	)

267 
	#EV_CURRENT
 1

	)

268 
	#EV_NUM
 2

	)

274 
Elf32_W‹d
 
	msh_«me
;

275 
Elf32_W‹d
 
	msh_ty≥
;

276 
Elf32_W‹d
 
	msh_Êags
;

277 
Elf32_Addr
 
	msh_addr
;

278 
Elf32_Off
 
	msh_off£t
;

279 
Elf32_W‹d
 
	msh_size
;

280 
Elf32_W‹d
 
	msh_lök
;

281 
Elf32_W‹d
 
	msh_öfo
;

282 
Elf32_W‹d
 
	msh_addølign
;

283 
Elf32_W‹d
 
	msh_ítsize
;

284 } 
	tElf32_Shdr
;

288 
Elf64_W‹d
 
	msh_«me
;

289 
Elf64_W‹d
 
	msh_ty≥
;

290 
Elf64_Xw‹d
 
	msh_Êags
;

291 
Elf64_Addr
 
	msh_addr
;

292 
Elf64_Off
 
	msh_off£t
;

293 
Elf64_Xw‹d
 
	msh_size
;

294 
Elf64_W‹d
 
	msh_lök
;

295 
Elf64_W‹d
 
	msh_öfo
;

296 
Elf64_Xw‹d
 
	msh_addølign
;

297 
Elf64_Xw‹d
 
	msh_ítsize
;

298 } 
	tElf64_Shdr
;

302 
	#SHN_UNDEF
 0

	)

303 
	#SHN_LORESERVE
 0xff00

	)

304 
	#SHN_LOPROC
 0xff00

	)

305 
	#SHN_BEFORE
 0xff00

	)

307 
	#SHN_AFTER
 0xff01

	)

309 
	#SHN_HIPROC
 0xff1‡

	)

310 
	#SHN_LOOS
 0xff20

	)

311 
	#SHN_HIOS
 0xff3‡

	)

312 
	#SHN_ABS
 0xfff1

	)

313 
	#SHN_COMMON
 0xfff2

	)

314 
	#SHN_XINDEX
 0xfff‡

	)

315 
	#SHN_HIRESERVE
 0xfff‡

	)

319 
	#SHT_NULL
 0

	)

320 
	#SHT_PROGBITS
 1

	)

321 
	#SHT_SYMTAB
 2

	)

322 
	#SHT_STRTAB
 3

	)

323 
	#SHT_RELA
 4

	)

324 
	#SHT_HASH
 5

	)

325 
	#SHT_DYNAMIC
 6

	)

326 
	#SHT_NOTE
 7

	)

327 
	#SHT_NOBITS
 8

	)

328 
	#SHT_REL
 9

	)

329 
	#SHT_SHLIB
 10

	)

330 
	#SHT_DYNSYM
 11

	)

331 
	#SHT_INIT_ARRAY
 14

	)

332 
	#SHT_FINI_ARRAY
 15

	)

333 
	#SHT_PREINIT_ARRAY
 16

	)

334 
	#SHT_GROUP
 17

	)

335 
	#SHT_SYMTAB_SHNDX
 18

	)

336 
	#SHT_NUM
 19

	)

337 
	#SHT_LOOS
 0x60000000

	)

338 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

339 
	#SHT_GNU_HASH
 0x6ffffff6

	)

340 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

341 
	#SHT_CHECKSUM
 0x6ffffff8

	)

342 
	#SHT_LOSUNW
 0x6fffffÁ

	)

343 
	#SHT_SUNW_move
 0x6fffffÁ

	)

344 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

345 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

346 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

347 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

348 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

349 
	#SHT_HISUNW
 0x6ffffff‡

	)

350 
	#SHT_HIOS
 0x6ffffff‡

	)

351 
	#SHT_LOPROC
 0x70000000

	)

352 
	#SHT_HIPROC
 0x7ffffff‡

	)

353 
	#SHT_LOUSER
 0x80000000

	)

354 
	#SHT_HIUSER
 0x8ffffff‡

	)

358 
	#SHF_WRITE
 (1 << 0Ë

	)

359 
	#SHF_ALLOC
 (1 << 1Ë

	)

360 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

361 
	#SHF_MERGE
 (1 << 4Ë

	)

362 
	#SHF_STRINGS
 (1 << 5Ë

	)

363 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

364 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

365 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

367 
	#SHF_GROUP
 (1 << 9Ë

	)

368 
	#SHF_TLS
 (1 << 10Ë

	)

369 
	#SHF_MASKOS
 0x0ff00000

	)

370 
	#SHF_MASKPROC
 0xf0000000

	)

371 
	#SHF_ORDERED
 (1 << 30Ë

	)

373 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

377 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

393 
Elf64_W‹d
 
	m°_«me
;

394 
	m°_öfo
;

395 
	m°_Ÿhî
;

396 
Elf64_Se˘i⁄
 
	m°_shndx
;

397 
Elf64_Addr
 
	m°_vÆue
;

398 
Elf64_Xw‹d
 
	m°_size
;

399 } 
	tElf64_Sym
;

406 
Elf32_HÆf
 
	msi_boundto
;

407 
Elf32_HÆf
 
	msi_Êags
;

408 } 
	tElf32_Symöfo
;

412 
Elf64_HÆf
 
	msi_boundto
;

413 
Elf64_HÆf
 
	msi_Êags
;

414 } 
	tElf64_Symöfo
;

417 
	#SYMINFO_BT_SELF
 0xfff‡

	)

418 
	#SYMINFO_BT_PARENT
 0xff„

	)

419 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

422 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

423 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

424 
	#SYMINFO_FLG_COPY
 0x0004

	)

425 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

428 
	#SYMINFO_NONE
 0

	)

429 
	#SYMINFO_CURRENT
 1

	)

430 
	#SYMINFO_NUM
 2

	)

435 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

436 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

437 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

440 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

441 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

442 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

446 
	#STB_LOCAL
 0

	)

447 
	#STB_GLOBAL
 1

	)

448 
	#STB_WEAK
 2

	)

449 
	#STB_NUM
 3

	)

450 
	#STB_LOOS
 10

	)

451 
	#STB_GNU_UNIQUE
 10

	)

452 
	#STB_HIOS
 12

	)

453 
	#STB_LOPROC
 13

	)

454 
	#STB_HIPROC
 15

	)

458 
	#STT_NOTYPE
 0

	)

459 
	#STT_OBJECT
 1

	)

460 
	#STT_FUNC
 2

	)

461 
	#STT_SECTION
 3

	)

462 
	#STT_FILE
 4

	)

463 
	#STT_COMMON
 5

	)

464 
	#STT_TLS
 6

	)

465 
	#STT_NUM
 7

	)

466 
	#STT_LOOS
 10

	)

467 
	#STT_GNU_IFUNC
 10

	)

468 
	#STT_HIOS
 12

	)

469 
	#STT_LOPROC
 13

	)

470 
	#STT_HIPROC
 15

	)

477 
	#STN_UNDEF
 0

	)

482 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

485 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

488 
	#STV_DEFAULT
 0

	)

489 
	#STV_INTERNAL
 1

	)

490 
	#STV_HIDDEN
 2

	)

491 
	#STV_PROTECTED
 3

	)

498 
Elf32_Addr
 
	mr_off£t
;

499 
Elf32_W‹d
 
	mr_öfo
;

500 } 
	tElf32_Rñ
;

509 
Elf64_Addr
 
	mr_off£t
;

510 
Elf64_Xw‹d
 
	mr_öfo
;

511 } 
	tElf64_Rñ
;

517 
Elf32_Addr
 
	mr_off£t
;

518 
Elf32_W‹d
 
	mr_öfo
;

519 
Elf32_Sw‹d
 
	mr_addíd
;

520 } 
	tElf32_Rña
;

524 
Elf64_Addr
 
	mr_off£t
;

525 
Elf64_Xw‹d
 
	mr_öfo
;

526 
Elf64_Sxw‹d
 
	mr_addíd
;

527 } 
	tElf64_Rña
;

531 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

532 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

533 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

535 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

536 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

537 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

543 
Elf32_W‹d
 
	mp_ty≥
;

544 
Elf32_Off
 
	mp_off£t
;

545 
Elf32_Addr
 
	mp_vaddr
;

546 
Elf32_Addr
 
	mp_∑ddr
;

547 
Elf32_W‹d
 
	mp_fûesz
;

548 
Elf32_W‹d
 
	mp_memsz
;

549 
Elf32_W‹d
 
	mp_Êags
;

550 
Elf32_W‹d
 
	mp_Æign
;

551 } 
	tElf32_Phdr
;

555 
Elf64_W‹d
 
	mp_ty≥
;

556 
Elf64_W‹d
 
	mp_Êags
;

557 
Elf64_Off
 
	mp_off£t
;

558 
Elf64_Addr
 
	mp_vaddr
;

559 
Elf64_Addr
 
	mp_∑ddr
;

560 
Elf64_Xw‹d
 
	mp_fûesz
;

561 
Elf64_Xw‹d
 
	mp_memsz
;

562 
Elf64_Xw‹d
 
	mp_Æign
;

563 } 
	tElf64_Phdr
;

569 
	#PN_XNUM
 0xffff

	)

573 
	#PT_NULL
 0

	)

574 
	#PT_LOAD
 1

	)

575 
	#PT_DYNAMIC
 2

	)

576 
	#PT_INTERP
 3

	)

577 
	#PT_NOTE
 4

	)

578 
	#PT_SHLIB
 5

	)

579 
	#PT_PHDR
 6

	)

580 
	#PT_TLS
 7

	)

581 
	#PT_NUM
 8

	)

582 
	#PT_LOOS
 0x60000000

	)

583 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

584 
	#PT_GNU_STACK
 0x6474e551

	)

585 
	#PT_GNU_RELRO
 0x6474e552

	)

586 
	#PT_LOSUNW
 0x6fffffÁ

	)

587 
	#PT_SUNWBSS
 0x6fffffÁ

	)

588 
	#PT_SUNWSTACK
 0x6ffffffb

	)

589 
	#PT_HISUNW
 0x6fffffff

	)

590 
	#PT_HIOS
 0x6ffffff‡

	)

591 
	#PT_LOPROC
 0x70000000

	)

592 
	#PT_HIPROC
 0x7ffffff‡

	)

596 
	#PF_X
 (1 << 0Ë

	)

597 
	#PF_W
 (1 << 1Ë

	)

598 
	#PF_R
 (1 << 2Ë

	)

599 
	#PF_MASKOS
 0x0ff00000

	)

600 
	#PF_MASKPROC
 0xf0000000

	)

604 
	#NT_PRSTATUS
 1

	)

605 
	#NT_FPREGSET
 2

	)

606 
	#NT_PRPSINFO
 3

	)

607 
	#NT_PRXREG
 4

	)

608 
	#NT_TASKSTRUCT
 4

	)

609 
	#NT_PLATFORM
 5

	)

610 
	#NT_AUXV
 6

	)

611 
	#NT_GWINDOWS
 7

	)

612 
	#NT_ASRS
 8

	)

613 
	#NT_PSTATUS
 10

	)

614 
	#NT_PSINFO
 13

	)

615 
	#NT_PRCRED
 14

	)

616 
	#NT_UTSNAME
 15

	)

617 
	#NT_LWPSTATUS
 16

	)

618 
	#NT_LWPSINFO
 17

	)

619 
	#NT_PRFPXREG
 20

	)

620 
	#NT_SIGINFO
 0x53494749

	)

622 
	#NT_FILE
 0x46494c45

	)

624 
	#NT_PRXFPREG
 0x46e62b7‡

	)

625 
	#NT_PPC_VMX
 0x100

	)

626 
	#NT_PPC_SPE
 0x101

	)

627 
	#NT_PPC_VSX
 0x102

	)

628 
	#NT_386_TLS
 0x200

	)

629 
	#NT_386_IOPERM
 0x201

	)

630 
	#NT_X86_XSTATE
 0x202

	)

631 
	#NT_S390_HIGH_GPRS
 0x300

	)

632 
	#NT_S390_TIMER
 0x301

	)

633 
	#NT_S390_TODCMP
 0x302

	)

634 
	#NT_S390_TODPREG
 0x303

	)

635 
	#NT_S390_CTRS
 0x304

	)

636 
	#NT_S390_PREFIX
 0x305

	)

637 
	#NT_S390_LAST_BREAK
 0x306

	)

638 
	#NT_S390_SYSTEM_CALL
 0x307

	)

639 
	#NT_S390_TDB
 0x308

	)

640 
	#NT_ARM_VFP
 0x400

	)

641 
	#NT_ARM_TLS
 0x401

	)

642 
	#NT_ARM_HW_BREAK
 0x402

	)

643 
	#NT_ARM_HW_WATCH
 0x403

	)

647 
	#NT_VERSION
 1

	)

654 
Elf32_Sw‹d
 
	md_èg
;

657 
Elf32_W‹d
 
	md_vÆ
;

658 
Elf32_Addr
 
	md_±r
;

659 } 
	md_un
;

660 } 
	tElf32_Dyn
;

664 
Elf64_Sxw‹d
 
	md_èg
;

667 
Elf64_Xw‹d
 
	md_vÆ
;

668 
Elf64_Addr
 
	md_±r
;

669 } 
	md_un
;

670 } 
	tElf64_Dyn
;

674 
	#DT_NULL
 0

	)

675 
	#DT_NEEDED
 1

	)

676 
	#DT_PLTRELSZ
 2

	)

677 
	#DT_PLTGOT
 3

	)

678 
	#DT_HASH
 4

	)

679 
	#DT_STRTAB
 5

	)

680 
	#DT_SYMTAB
 6

	)

681 
	#DT_RELA
 7

	)

682 
	#DT_RELASZ
 8

	)

683 
	#DT_RELAENT
 9

	)

684 
	#DT_STRSZ
 10

	)

685 
	#DT_SYMENT
 11

	)

686 
	#DT_INIT
 12

	)

687 
	#DT_FINI
 13

	)

688 
	#DT_SONAME
 14

	)

689 
	#DT_RPATH
 15

	)

690 
	#DT_SYMBOLIC
 16

	)

691 
	#DT_REL
 17

	)

692 
	#DT_RELSZ
 18

	)

693 
	#DT_RELENT
 19

	)

694 
	#DT_PLTREL
 20

	)

695 
	#DT_DEBUG
 21

	)

696 
	#DT_TEXTREL
 22

	)

697 
	#DT_JMPREL
 23

	)

698 
	#DT_BIND_NOW
 24

	)

699 
	#DT_INIT_ARRAY
 25

	)

700 
	#DT_FINI_ARRAY
 26

	)

701 
	#DT_INIT_ARRAYSZ
 27

	)

702 
	#DT_FINI_ARRAYSZ
 28

	)

703 
	#DT_RUNPATH
 29

	)

704 
	#DT_FLAGS
 30

	)

705 
	#DT_ENCODING
 32

	)

706 
	#DT_PREINIT_ARRAY
 32

	)

707 
	#DT_PREINIT_ARRAYSZ
 33

	)

708 
	#DT_NUM
 34

	)

709 
	#DT_LOOS
 0x6000000d

	)

710 
	#DT_HIOS
 0x6ffff000

	)

711 
	#DT_LOPROC
 0x70000000

	)

712 
	#DT_HIPROC
 0x7ffffff‡

	)

713 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

718 
	#DT_VALRNGLO
 0x6ffffd00

	)

719 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

720 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

721 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

722 
	#DT_CHECKSUM
 0x6ffffdf8

	)

723 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

724 
	#DT_MOVEENT
 0x6ffffdÁ

	)

725 
	#DT_MOVESZ
 0x6ffffdfb

	)

726 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

727 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

729 
	#DT_SYMINSZ
 0x6ffffd„

	)

730 
	#DT_SYMINENT
 0x6ffffdf‡

	)

731 
	#DT_VALRNGHI
 0x6ffffdff

	)

732 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

733 
	#DT_VALNUM
 12

	)

740 
	#DT_ADDRRNGLO
 0x6fff„00

	)

741 
	#DT_GNU_HASH
 0x6fff„f5

	)

742 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

743 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

744 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

745 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

746 
	#DT_CONFIG
 0x6fff„Á

	)

747 
	#DT_DEPAUDIT
 0x6fff„fb

	)

748 
	#DT_AUDIT
 0x6fff„f¯

	)

749 
	#DT_PLTPAD
 0x6fff„fd

	)

750 
	#DT_MOVETAB
 0x6fff„„

	)

751 
	#DT_SYMINFO
 0x6fff„f‡

	)

752 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

753 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

754 
	#DT_ADDRNUM
 11

	)

758 
	#DT_VERSYM
 0x6ffffff0

	)

760 
	#DT_RELACOUNT
 0x6ffffff9

	)

761 
	#DT_RELCOUNT
 0x6fffffÁ

	)

764 
	#DT_FLAGS_1
 0x6ffffffb

	)

765 
	#DT_VERDEF
 0x6ffffff¯

	)

767 
	#DT_VERDEFNUM
 0x6ffffffd

	)

768 
	#DT_VERNEED
 0x6fffff„

	)

770 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

771 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

772 
	#DT_VERSIONTAGNUM
 16

	)

776 
	#DT_AUXILIARY
 0x7ffffffd

	)

777 
	#DT_FILTER
 0x7ffffff‡

	)

778 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

779 
	#DT_EXTRANUM
 3

	)

782 
	#DF_ORIGIN
 0x00000001

	)

783 
	#DF_SYMBOLIC
 0x00000002

	)

784 
	#DF_TEXTREL
 0x00000004

	)

785 
	#DF_BIND_NOW
 0x00000008

	)

786 
	#DF_STATIC_TLS
 0x00000010

	)

790 
	#DF_1_NOW
 0x00000001

	)

791 
	#DF_1_GLOBAL
 0x00000002

	)

792 
	#DF_1_GROUP
 0x00000004

	)

793 
	#DF_1_NODELETE
 0x00000008

	)

794 
	#DF_1_LOADFLTR
 0x00000010

	)

795 
	#DF_1_INITFIRST
 0x00000020

	)

796 
	#DF_1_NOOPEN
 0x00000040

	)

797 
	#DF_1_ORIGIN
 0x00000080

	)

798 
	#DF_1_DIRECT
 0x00000100

	)

799 
	#DF_1_TRANS
 0x00000200

	)

800 
	#DF_1_INTERPOSE
 0x00000400

	)

801 
	#DF_1_NODEFLIB
 0x00000800

	)

802 
	#DF_1_NODUMP
 0x00001000

	)

803 
	#DF_1_CONFALT
 0x00002000

	)

804 
	#DF_1_ENDFILTEE
 0x00004000

	)

805 
	#DF_1_DISPRELDNE
 0x00008000

	)

806 
	#DF_1_DISPRELPND
 0x00010000

	)

807 
	#DF_1_NODIRECT
 0x00020000

	)

808 
	#DF_1_IGNMULDEF
 0x00040000

	)

809 
	#DF_1_NOKSYMS
 0x00080000

	)

810 
	#DF_1_NOHDR
 0x00100000

	)

811 
	#DF_1_EDITED
 0x00200000

	)

812 
	#DF_1_NORELOC
 0x00400000

	)

813 
	#DF_1_SYMINTPOSE
 0x00800000

	)

814 
	#DF_1_GLOBAUDIT
 0x01000000

	)

815 
	#DF_1_SINGLETON
 0x02000000

	)

818 
	#DTF_1_PARINIT
 0x00000001

	)

819 
	#DTF_1_CONFEXP
 0x00000002

	)

822 
	#DF_P1_LAZYLOAD
 0x00000001

	)

823 
	#DF_P1_GROUPPERM
 0x00000002

	)

830 
Elf32_HÆf
 
	mvd_vîsi⁄
;

831 
Elf32_HÆf
 
	mvd_Êags
;

832 
Elf32_HÆf
 
	mvd_ndx
;

833 
Elf32_HÆf
 
	mvd_˙t
;

834 
Elf32_W‹d
 
	mvd_hash
;

835 
Elf32_W‹d
 
	mvd_aux
;

836 
Elf32_W‹d
 
	mvd_√xt
;

838 } 
	tElf32_Vîdef
;

842 
Elf64_HÆf
 
	mvd_vîsi⁄
;

843 
Elf64_HÆf
 
	mvd_Êags
;

844 
Elf64_HÆf
 
	mvd_ndx
;

845 
Elf64_HÆf
 
	mvd_˙t
;

846 
Elf64_W‹d
 
	mvd_hash
;

847 
Elf64_W‹d
 
	mvd_aux
;

848 
Elf64_W‹d
 
	mvd_√xt
;

850 } 
	tElf64_Vîdef
;

854 
	#VER_DEF_NONE
 0

	)

855 
	#VER_DEF_CURRENT
 1

	)

856 
	#VER_DEF_NUM
 2

	)

859 
	#VER_FLG_BASE
 0x1

	)

860 
	#VER_FLG_WEAK
 0x2

	)

863 
	#VER_NDX_LOCAL
 0

	)

864 
	#VER_NDX_GLOBAL
 1

	)

865 
	#VER_NDX_LORESERVE
 0xff00

	)

866 
	#VER_NDX_ELIMINATE
 0xff01

	)

872 
Elf32_W‹d
 
	mvda_«me
;

873 
Elf32_W‹d
 
	mvda_√xt
;

875 } 
	tElf32_Vîdaux
;

879 
Elf64_W‹d
 
	mvda_«me
;

880 
Elf64_W‹d
 
	mvda_√xt
;

882 } 
	tElf64_Vîdaux
;

889 
Elf32_HÆf
 
	mvn_vîsi⁄
;

890 
Elf32_HÆf
 
	mvn_˙t
;

891 
Elf32_W‹d
 
	mvn_fûe
;

893 
Elf32_W‹d
 
	mvn_aux
;

894 
Elf32_W‹d
 
	mvn_√xt
;

896 } 
	tElf32_Vî√ed
;

900 
Elf64_HÆf
 
	mvn_vîsi⁄
;

901 
Elf64_HÆf
 
	mvn_˙t
;

902 
Elf64_W‹d
 
	mvn_fûe
;

904 
Elf64_W‹d
 
	mvn_aux
;

905 
Elf64_W‹d
 
	mvn_√xt
;

907 } 
	tElf64_Vî√ed
;

911 
	#VER_NEED_NONE
 0

	)

912 
	#VER_NEED_CURRENT
 1

	)

913 
	#VER_NEED_NUM
 2

	)

919 
Elf32_W‹d
 
	mv«_hash
;

920 
Elf32_HÆf
 
	mv«_Êags
;

921 
Elf32_HÆf
 
	mv«_Ÿhî
;

922 
Elf32_W‹d
 
	mv«_«me
;

923 
Elf32_W‹d
 
	mv«_√xt
;

925 } 
	tElf32_Vî«ux
;

929 
Elf64_W‹d
 
	mv«_hash
;

930 
Elf64_HÆf
 
	mv«_Êags
;

931 
Elf64_HÆf
 
	mv«_Ÿhî
;

932 
Elf64_W‹d
 
	mv«_«me
;

933 
Elf64_W‹d
 
	mv«_√xt
;

935 } 
	tElf64_Vî«ux
;

939 
	#VER_FLG_WEAK
 0x2

	)

953 
uöt32_t
 
	ma_ty≥
;

956 
uöt32_t
 
	ma_vÆ
;

960 } 
	ma_un
;

961 } 
	tElf32_auxv_t
;

965 
uöt64_t
 
	ma_ty≥
;

968 
uöt64_t
 
	ma_vÆ
;

972 } 
	ma_un
;

973 } 
	tElf64_auxv_t
;

975 
	~<bôs/auxv.h
>

981 
Elf32_W‹d
 
	mn_«mesz
;

982 
Elf32_W‹d
 
	mn_descsz
;

983 
Elf32_W‹d
 
	mn_ty≥
;

984 } 
	tElf32_Nhdr
;

988 
Elf64_W‹d
 
	mn_«mesz
;

989 
Elf64_W‹d
 
	mn_descsz
;

990 
Elf64_W‹d
 
	mn_ty≥
;

991 } 
	tElf64_Nhdr
;

996 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

999 
	#ELF_NOTE_GNU
 "GNU"

	)

1005 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1016 
	#NT_GNU_ABI_TAG
 1

	)

1017 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1021 
	#ELF_NOTE_OS_LINUX
 0

	)

1022 
	#ELF_NOTE_OS_GNU
 1

	)

1023 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1024 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1032 
	#NT_GNU_HWCAP
 2

	)

1036 
	#NT_GNU_BUILD_ID
 3

	)

1039 
	#NT_GNU_GOLD_VERSION
 4

	)

1045 
Elf32_Xw‹d
 
	mm_vÆue
;

1046 
Elf32_W‹d
 
	mm_öfo
;

1047 
Elf32_W‹d
 
	mm_poff£t
;

1048 
Elf32_HÆf
 
	mm_ª≥©
;

1049 
Elf32_HÆf
 
	mm_°ride
;

1050 } 
	tElf32_Move
;

1054 
Elf64_Xw‹d
 
	mm_vÆue
;

1055 
Elf64_Xw‹d
 
	mm_öfo
;

1056 
Elf64_Xw‹d
 
	mm_poff£t
;

1057 
Elf64_HÆf
 
	mm_ª≥©
;

1058 
Elf64_HÆf
 
	mm_°ride
;

1059 } 
	tElf64_Move
;

1062 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1063 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1064 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1066 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1067 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1068 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1074 
	#EF_CPU32
 0x00810000

	)

1078 
	#R_68K_NONE
 0

	)

1079 
	#R_68K_32
 1

	)

1080 
	#R_68K_16
 2

	)

1081 
	#R_68K_8
 3

	)

1082 
	#R_68K_PC32
 4

	)

1083 
	#R_68K_PC16
 5

	)

1084 
	#R_68K_PC8
 6

	)

1085 
	#R_68K_GOT32
 7

	)

1086 
	#R_68K_GOT16
 8

	)

1087 
	#R_68K_GOT8
 9

	)

1088 
	#R_68K_GOT32O
 10

	)

1089 
	#R_68K_GOT16O
 11

	)

1090 
	#R_68K_GOT8O
 12

	)

1091 
	#R_68K_PLT32
 13

	)

1092 
	#R_68K_PLT16
 14

	)

1093 
	#R_68K_PLT8
 15

	)

1094 
	#R_68K_PLT32O
 16

	)

1095 
	#R_68K_PLT16O
 17

	)

1096 
	#R_68K_PLT8O
 18

	)

1097 
	#R_68K_COPY
 19

	)

1098 
	#R_68K_GLOB_DAT
 20

	)

1099 
	#R_68K_JMP_SLOT
 21

	)

1100 
	#R_68K_RELATIVE
 22

	)

1101 
	#R_68K_TLS_GD32
 25

	)

1102 
	#R_68K_TLS_GD16
 26

	)

1103 
	#R_68K_TLS_GD8
 27

	)

1104 
	#R_68K_TLS_LDM32
 28

	)

1105 
	#R_68K_TLS_LDM16
 29

	)

1106 
	#R_68K_TLS_LDM8
 30

	)

1107 
	#R_68K_TLS_LDO32
 31

	)

1108 
	#R_68K_TLS_LDO16
 32

	)

1109 
	#R_68K_TLS_LDO8
 33

	)

1110 
	#R_68K_TLS_IE32
 34

	)

1111 
	#R_68K_TLS_IE16
 35

	)

1112 
	#R_68K_TLS_IE8
 36

	)

1113 
	#R_68K_TLS_LE32
 37

	)

1115 
	#R_68K_TLS_LE16
 38

	)

1117 
	#R_68K_TLS_LE8
 39

	)

1119 
	#R_68K_TLS_DTPMOD32
 40

	)

1120 
	#R_68K_TLS_DTPREL32
 41

	)

1121 
	#R_68K_TLS_TPREL32
 42

	)

1123 
	#R_68K_NUM
 43

	)

1129 
	#R_386_NONE
 0

	)

1130 
	#R_386_32
 1

	)

1131 
	#R_386_PC32
 2

	)

1132 
	#R_386_GOT32
 3

	)

1133 
	#R_386_PLT32
 4

	)

1134 
	#R_386_COPY
 5

	)

1135 
	#R_386_GLOB_DAT
 6

	)

1136 
	#R_386_JMP_SLOT
 7

	)

1137 
	#R_386_RELATIVE
 8

	)

1138 
	#R_386_GOTOFF
 9

	)

1139 
	#R_386_GOTPC
 10

	)

1140 
	#R_386_32PLT
 11

	)

1141 
	#R_386_TLS_TPOFF
 14

	)

1142 
	#R_386_TLS_IE
 15

	)

1144 
	#R_386_TLS_GOTIE
 16

	)

1146 
	#R_386_TLS_LE
 17

	)

1148 
	#R_386_TLS_GD
 18

	)

1150 
	#R_386_TLS_LDM
 19

	)

1153 
	#R_386_16
 20

	)

1154 
	#R_386_PC16
 21

	)

1155 
	#R_386_8
 22

	)

1156 
	#R_386_PC8
 23

	)

1157 
	#R_386_TLS_GD_32
 24

	)

1159 
	#R_386_TLS_GD_PUSH
 25

	)

1160 
	#R_386_TLS_GD_CALL
 26

	)

1162 
	#R_386_TLS_GD_POP
 27

	)

1163 
	#R_386_TLS_LDM_32
 28

	)

1165 
	#R_386_TLS_LDM_PUSH
 29

	)

1166 
	#R_386_TLS_LDM_CALL
 30

	)

1168 
	#R_386_TLS_LDM_POP
 31

	)

1169 
	#R_386_TLS_LDO_32
 32

	)

1170 
	#R_386_TLS_IE_32
 33

	)

1172 
	#R_386_TLS_LE_32
 34

	)

1174 
	#R_386_TLS_DTPMOD32
 35

	)

1175 
	#R_386_TLS_DTPOFF32
 36

	)

1176 
	#R_386_TLS_TPOFF32
 37

	)

1177 
	#R_386_SIZE32
 38

	)

1178 
	#R_386_TLS_GOTDESC
 39

	)

1179 
	#R_386_TLS_DESC_CALL
 40

	)

1182 
	#R_386_TLS_DESC
 41

	)

1186 
	#R_386_IRELATIVE
 42

	)

1188 
	#R_386_NUM
 43

	)

1194 
	#STT_SPARC_REGISTER
 13

	)

1198 
	#EF_SPARCV9_MM
 3

	)

1199 
	#EF_SPARCV9_TSO
 0

	)

1200 
	#EF_SPARCV9_PSO
 1

	)

1201 
	#EF_SPARCV9_RMO
 2

	)

1202 
	#EF_SPARC_LEDATA
 0x800000

	)

1203 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1204 
	#EF_SPARC_32PLUS
 0x000100

	)

1205 
	#EF_SPARC_SUN_US1
 0x000200

	)

1206 
	#EF_SPARC_HAL_R1
 0x000400

	)

1207 
	#EF_SPARC_SUN_US3
 0x000800

	)

1211 
	#R_SPARC_NONE
 0

	)

1212 
	#R_SPARC_8
 1

	)

1213 
	#R_SPARC_16
 2

	)

1214 
	#R_SPARC_32
 3

	)

1215 
	#R_SPARC_DISP8
 4

	)

1216 
	#R_SPARC_DISP16
 5

	)

1217 
	#R_SPARC_DISP32
 6

	)

1218 
	#R_SPARC_WDISP30
 7

	)

1219 
	#R_SPARC_WDISP22
 8

	)

1220 
	#R_SPARC_HI22
 9

	)

1221 
	#R_SPARC_22
 10

	)

1222 
	#R_SPARC_13
 11

	)

1223 
	#R_SPARC_LO10
 12

	)

1224 
	#R_SPARC_GOT10
 13

	)

1225 
	#R_SPARC_GOT13
 14

	)

1226 
	#R_SPARC_GOT22
 15

	)

1227 
	#R_SPARC_PC10
 16

	)

1228 
	#R_SPARC_PC22
 17

	)

1229 
	#R_SPARC_WPLT30
 18

	)

1230 
	#R_SPARC_COPY
 19

	)

1231 
	#R_SPARC_GLOB_DAT
 20

	)

1232 
	#R_SPARC_JMP_SLOT
 21

	)

1233 
	#R_SPARC_RELATIVE
 22

	)

1234 
	#R_SPARC_UA32
 23

	)

1238 
	#R_SPARC_PLT32
 24

	)

1239 
	#R_SPARC_HIPLT22
 25

	)

1240 
	#R_SPARC_LOPLT10
 26

	)

1241 
	#R_SPARC_PCPLT32
 27

	)

1242 
	#R_SPARC_PCPLT22
 28

	)

1243 
	#R_SPARC_PCPLT10
 29

	)

1244 
	#R_SPARC_10
 30

	)

1245 
	#R_SPARC_11
 31

	)

1246 
	#R_SPARC_64
 32

	)

1247 
	#R_SPARC_OLO10
 33

	)

1248 
	#R_SPARC_HH22
 34

	)

1249 
	#R_SPARC_HM10
 35

	)

1250 
	#R_SPARC_LM22
 36

	)

1251 
	#R_SPARC_PC_HH22
 37

	)

1252 
	#R_SPARC_PC_HM10
 38

	)

1253 
	#R_SPARC_PC_LM22
 39

	)

1254 
	#R_SPARC_WDISP16
 40

	)

1255 
	#R_SPARC_WDISP19
 41

	)

1256 
	#R_SPARC_GLOB_JMP
 42

	)

1257 
	#R_SPARC_7
 43

	)

1258 
	#R_SPARC_5
 44

	)

1259 
	#R_SPARC_6
 45

	)

1260 
	#R_SPARC_DISP64
 46

	)

1261 
	#R_SPARC_PLT64
 47

	)

1262 
	#R_SPARC_HIX22
 48

	)

1263 
	#R_SPARC_LOX10
 49

	)

1264 
	#R_SPARC_H44
 50

	)

1265 
	#R_SPARC_M44
 51

	)

1266 
	#R_SPARC_L44
 52

	)

1267 
	#R_SPARC_REGISTER
 53

	)

1268 
	#R_SPARC_UA64
 54

	)

1269 
	#R_SPARC_UA16
 55

	)

1270 
	#R_SPARC_TLS_GD_HI22
 56

	)

1271 
	#R_SPARC_TLS_GD_LO10
 57

	)

1272 
	#R_SPARC_TLS_GD_ADD
 58

	)

1273 
	#R_SPARC_TLS_GD_CALL
 59

	)

1274 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1275 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1276 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1277 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1278 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1279 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1280 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1281 
	#R_SPARC_TLS_IE_HI22
 67

	)

1282 
	#R_SPARC_TLS_IE_LO10
 68

	)

1283 
	#R_SPARC_TLS_IE_LD
 69

	)

1284 
	#R_SPARC_TLS_IE_LDX
 70

	)

1285 
	#R_SPARC_TLS_IE_ADD
 71

	)

1286 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1287 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1288 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1289 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1290 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1291 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1292 
	#R_SPARC_TLS_TPOFF32
 78

	)

1293 
	#R_SPARC_TLS_TPOFF64
 79

	)

1294 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1295 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1296 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1297 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1298 
	#R_SPARC_GOTDATA_OP
 84

	)

1299 
	#R_SPARC_H34
 85

	)

1300 
	#R_SPARC_SIZE32
 86

	)

1301 
	#R_SPARC_SIZE64
 87

	)

1302 
	#R_SPARC_WDISP10
 88

	)

1303 
	#R_SPARC_JMP_IREL
 248

	)

1304 
	#R_SPARC_IRELATIVE
 249

	)

1305 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1306 
	#R_SPARC_GNU_VTENTRY
 251

	)

1307 
	#R_SPARC_REV32
 252

	)

1309 
	#R_SPARC_NUM
 253

	)

1313 
	#DT_SPARC_REGISTER
 0x70000001

	)

1314 
	#DT_SPARC_NUM
 2

	)

1320 
	#EF_MIPS_NOREORDER
 1

	)

1321 
	#EF_MIPS_PIC
 2

	)

1322 
	#EF_MIPS_CPIC
 4

	)

1323 
	#EF_MIPS_XGOT
 8

	)

1324 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1325 
	#EF_MIPS_ABI2
 32

	)

1326 
	#EF_MIPS_ABI_ON32
 64

	)

1327 
	#EF_MIPS_NAN2008
 1024

	)

1328 
	#EF_MIPS_ARCH
 0xf0000000

	)

1332 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1333 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1334 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1335 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1336 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1337 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1338 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1339 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1340 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1344 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1345 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1346 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1347 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1348 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1349 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1350 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1354 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1355 
	#SHN_MIPS_TEXT
 0xff01

	)

1356 
	#SHN_MIPS_DATA
 0xff02

	)

1357 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1358 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1362 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1363 
	#SHT_MIPS_MSYM
 0x70000001

	)

1364 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1365 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1366 
	#SHT_MIPS_UCODE
 0x70000004

	)

1367 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1368 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1369 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1370 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1371 
	#SHT_MIPS_RELD
 0x70000009

	)

1372 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1373 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1374 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1375 
	#SHT_MIPS_SHDR
 0x70000010

	)

1376 
	#SHT_MIPS_FDESC
 0x70000011

	)

1377 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1378 
	#SHT_MIPS_DENSE
 0x70000013

	)

1379 
	#SHT_MIPS_PDESC
 0x70000014

	)

1380 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1381 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1382 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1383 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1384 
	#SHT_MIPS_LINE
 0x70000019

	)

1385 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1386 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1387 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1388 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1389 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1390 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1391 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1392 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1393 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1394 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1395 
	#SHT_MIPS_XLATE
 0x70000024

	)

1396 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1397 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1398 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1399 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1400 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1404 
	#SHF_MIPS_GPREL
 0x10000000

	)

1405 
	#SHF_MIPS_MERGE
 0x20000000

	)

1406 
	#SHF_MIPS_ADDR
 0x40000000

	)

1407 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1408 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1409 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1410 
	#SHF_MIPS_NAMES
 0x02000000

	)

1411 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1417 
	#STO_MIPS_DEFAULT
 0x0

	)

1418 
	#STO_MIPS_INTERNAL
 0x1

	)

1419 
	#STO_MIPS_HIDDEN
 0x2

	)

1420 
	#STO_MIPS_PROTECTED
 0x3

	)

1421 
	#STO_MIPS_PLT
 0x8

	)

1422 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1425 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1433 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1434 
Elf32_W‹d
 
	mgt_unu£d
;

1435 } 
	mgt_hódî
;

1438 
Elf32_W‹d
 
	mgt_g_vÆue
;

1439 
Elf32_W‹d
 
	mgt_byãs
;

1440 } 
	mgt_íåy
;

1441 } 
	tElf32_g±ab
;

1447 
Elf32_W‹d
 
	mri_g¥mask
;

1448 
Elf32_W‹d
 
	mri_˝rmask
[4];

1449 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1450 } 
	tElf32_RegInfo
;

1456 
	mköd
;

1458 
	msize
;

1459 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1461 
Elf32_W‹d
 
	möfo
;

1462 } 
	tElf_O±i⁄s
;

1466 
	#ODK_NULL
 0

	)

1467 
	#ODK_REGINFO
 1

	)

1468 
	#ODK_EXCEPTIONS
 2

	)

1469 
	#ODK_PAD
 3

	)

1470 
	#ODK_HWPATCH
 4

	)

1471 
	#ODK_FILL
 5

	)

1472 
	#ODK_TAGS
 6

	)

1473 
	#ODK_HWAND
 7

	)

1474 
	#ODK_HWOR
 8

	)

1478 
	#OEX_FPU_MIN
 0x1‡

	)

1479 
	#OEX_FPU_MAX
 0x1f00

	)

1480 
	#OEX_PAGE0
 0x10000

	)

1481 
	#OEX_SMM
 0x20000

	)

1482 
	#OEX_FPDBUG
 0x40000

	)

1483 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1484 
	#OEX_DISMISS
 0x80000

	)

1486 
	#OEX_FPU_INVAL
 0x10

	)

1487 
	#OEX_FPU_DIV0
 0x08

	)

1488 
	#OEX_FPU_OFLO
 0x04

	)

1489 
	#OEX_FPU_UFLO
 0x02

	)

1490 
	#OEX_FPU_INEX
 0x01

	)

1494 
	#OHW_R4KEOP
 0x1

	)

1495 
	#OHW_R8KPFETCH
 0x2

	)

1496 
	#OHW_R5KEOP
 0x4

	)

1497 
	#OHW_R5KCVTL
 0x8

	)

1499 
	#OPAD_PREFIX
 0x1

	)

1500 
	#OPAD_POSTFIX
 0x2

	)

1501 
	#OPAD_SYMBOL
 0x4

	)

1507 
Elf32_W‹d
 
	mhwp_Êags1
;

1508 
Elf32_W‹d
 
	mhwp_Êags2
;

1509 } 
	tElf_O±i⁄s_Hw
;

1513 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1514 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1518 
	#R_MIPS_NONE
 0

	)

1519 
	#R_MIPS_16
 1

	)

1520 
	#R_MIPS_32
 2

	)

1521 
	#R_MIPS_REL32
 3

	)

1522 
	#R_MIPS_26
 4

	)

1523 
	#R_MIPS_HI16
 5

	)

1524 
	#R_MIPS_LO16
 6

	)

1525 
	#R_MIPS_GPREL16
 7

	)

1526 
	#R_MIPS_LITERAL
 8

	)

1527 
	#R_MIPS_GOT16
 9

	)

1528 
	#R_MIPS_PC16
 10

	)

1529 
	#R_MIPS_CALL16
 11

	)

1530 
	#R_MIPS_GPREL32
 12

	)

1532 
	#R_MIPS_SHIFT5
 16

	)

1533 
	#R_MIPS_SHIFT6
 17

	)

1534 
	#R_MIPS_64
 18

	)

1535 
	#R_MIPS_GOT_DISP
 19

	)

1536 
	#R_MIPS_GOT_PAGE
 20

	)

1537 
	#R_MIPS_GOT_OFST
 21

	)

1538 
	#R_MIPS_GOT_HI16
 22

	)

1539 
	#R_MIPS_GOT_LO16
 23

	)

1540 
	#R_MIPS_SUB
 24

	)

1541 
	#R_MIPS_INSERT_A
 25

	)

1542 
	#R_MIPS_INSERT_B
 26

	)

1543 
	#R_MIPS_DELETE
 27

	)

1544 
	#R_MIPS_HIGHER
 28

	)

1545 
	#R_MIPS_HIGHEST
 29

	)

1546 
	#R_MIPS_CALL_HI16
 30

	)

1547 
	#R_MIPS_CALL_LO16
 31

	)

1548 
	#R_MIPS_SCN_DISP
 32

	)

1549 
	#R_MIPS_REL16
 33

	)

1550 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1551 
	#R_MIPS_PJUMP
 35

	)

1552 
	#R_MIPS_RELGOT
 36

	)

1553 
	#R_MIPS_JALR
 37

	)

1554 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1555 
	#R_MIPS_TLS_DTPREL32
 39

	)

1556 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1557 
	#R_MIPS_TLS_DTPREL64
 41

	)

1558 
	#R_MIPS_TLS_GD
 42

	)

1559 
	#R_MIPS_TLS_LDM
 43

	)

1560 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1561 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1562 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1563 
	#R_MIPS_TLS_TPREL32
 47

	)

1564 
	#R_MIPS_TLS_TPREL64
 48

	)

1565 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1566 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1567 
	#R_MIPS_GLOB_DAT
 51

	)

1568 
	#R_MIPS_COPY
 126

	)

1569 
	#R_MIPS_JUMP_SLOT
 127

	)

1571 
	#R_MIPS_NUM
 128

	)

1575 
	#PT_MIPS_REGINFO
 0x70000000

	)

1576 
	#PT_MIPS_RTPROC
 0x70000001

	)

1577 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1581 
	#PF_MIPS_LOCAL
 0x10000000

	)

1585 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1586 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1587 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1588 
	#DT_MIPS_IVERSION
 0x70000004

	)

1589 
	#DT_MIPS_FLAGS
 0x70000005

	)

1590 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1591 
	#DT_MIPS_MSYM
 0x70000007

	)

1592 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1593 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1594 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1595 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1596 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1597 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1598 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1599 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1600 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1601 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1602 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1603 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1605 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1606 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1608 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1609 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1611 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1613 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1615 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1617 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1619 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1620 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1621 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1622 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1623 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1624 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1625 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1626 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1627 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1628 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1629 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1630 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1632 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1634 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1635 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1636 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1638 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1642 
	#DT_MIPS_RWPLT
 0x70000034

	)

1643 
	#DT_MIPS_NUM
 0x35

	)

1647 
	#RHF_NONE
 0

	)

1648 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1649 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1650 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1651 
	#RHF_NO_MOVE
 (1 << 3)

	)

1652 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1653 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1654 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1655 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1656 
	#RHF_PIXIE
 (1 << 8)

	)

1657 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1658 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1659 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1660 
	#RHF_CORD
 (1 << 12)

	)

1661 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1662 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1668 
Elf32_W‹d
 
	ml_«me
;

1669 
Elf32_W‹d
 
	ml_time_°amp
;

1670 
Elf32_W‹d
 
	ml_checksum
;

1671 
Elf32_W‹d
 
	ml_vîsi⁄
;

1672 
Elf32_W‹d
 
	ml_Êags
;

1673 } 
	tElf32_Lib
;

1677 
Elf64_W‹d
 
	ml_«me
;

1678 
Elf64_W‹d
 
	ml_time_°amp
;

1679 
Elf64_W‹d
 
	ml_checksum
;

1680 
Elf64_W‹d
 
	ml_vîsi⁄
;

1681 
Elf64_W‹d
 
	ml_Êags
;

1682 } 
	tElf64_Lib
;

1687 
	#LL_NONE
 0

	)

1688 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1689 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1690 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1691 
	#LL_EXPORTS
 (1 << 3)

	)

1692 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1693 
	#LL_DELTA
 (1 << 5)

	)

1697 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1704 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1705 
	#EF_PARISC_EXT
 0x00020000

	)

1706 
	#EF_PARISC_LSB
 0x00040000

	)

1707 
	#EF_PARISC_WIDE
 0x00080000

	)

1708 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1710 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1711 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1715 
	#EFA_PARISC_1_0
 0x020b

	)

1716 
	#EFA_PARISC_1_1
 0x0210

	)

1717 
	#EFA_PARISC_2_0
 0x0214

	)

1721 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1723 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1727 
	#SHT_PARISC_EXT
 0x70000000

	)

1728 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1729 
	#SHT_PARISC_DOC
 0x70000002

	)

1733 
	#SHF_PARISC_SHORT
 0x20000000

	)

1734 
	#SHF_PARISC_HUGE
 0x40000000

	)

1735 
	#SHF_PARISC_SBP
 0x80000000

	)

1739 
	#STT_PARISC_MILLICODE
 13

	)

1741 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1742 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1746 
	#R_PARISC_NONE
 0

	)

1747 
	#R_PARISC_DIR32
 1

	)

1748 
	#R_PARISC_DIR21L
 2

	)

1749 
	#R_PARISC_DIR17R
 3

	)

1750 
	#R_PARISC_DIR17F
 4

	)

1751 
	#R_PARISC_DIR14R
 6

	)

1752 
	#R_PARISC_PCREL32
 9

	)

1753 
	#R_PARISC_PCREL21L
 10

	)

1754 
	#R_PARISC_PCREL17R
 11

	)

1755 
	#R_PARISC_PCREL17F
 12

	)

1756 
	#R_PARISC_PCREL14R
 14

	)

1757 
	#R_PARISC_DPREL21L
 18

	)

1758 
	#R_PARISC_DPREL14R
 22

	)

1759 
	#R_PARISC_GPREL21L
 26

	)

1760 
	#R_PARISC_GPREL14R
 30

	)

1761 
	#R_PARISC_LTOFF21L
 34

	)

1762 
	#R_PARISC_LTOFF14R
 38

	)

1763 
	#R_PARISC_SECREL32
 41

	)

1764 
	#R_PARISC_SEGBASE
 48

	)

1765 
	#R_PARISC_SEGREL32
 49

	)

1766 
	#R_PARISC_PLTOFF21L
 50

	)

1767 
	#R_PARISC_PLTOFF14R
 54

	)

1768 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1769 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1770 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1771 
	#R_PARISC_FPTR64
 64

	)

1772 
	#R_PARISC_PLABEL32
 65

	)

1773 
	#R_PARISC_PLABEL21L
 66

	)

1774 
	#R_PARISC_PLABEL14R
 70

	)

1775 
	#R_PARISC_PCREL64
 72

	)

1776 
	#R_PARISC_PCREL22F
 74

	)

1777 
	#R_PARISC_PCREL14WR
 75

	)

1778 
	#R_PARISC_PCREL14DR
 76

	)

1779 
	#R_PARISC_PCREL16F
 77

	)

1780 
	#R_PARISC_PCREL16WF
 78

	)

1781 
	#R_PARISC_PCREL16DF
 79

	)

1782 
	#R_PARISC_DIR64
 80

	)

1783 
	#R_PARISC_DIR14WR
 83

	)

1784 
	#R_PARISC_DIR14DR
 84

	)

1785 
	#R_PARISC_DIR16F
 85

	)

1786 
	#R_PARISC_DIR16WF
 86

	)

1787 
	#R_PARISC_DIR16DF
 87

	)

1788 
	#R_PARISC_GPREL64
 88

	)

1789 
	#R_PARISC_GPREL14WR
 91

	)

1790 
	#R_PARISC_GPREL14DR
 92

	)

1791 
	#R_PARISC_GPREL16F
 93

	)

1792 
	#R_PARISC_GPREL16WF
 94

	)

1793 
	#R_PARISC_GPREL16DF
 95

	)

1794 
	#R_PARISC_LTOFF64
 96

	)

1795 
	#R_PARISC_LTOFF14WR
 99

	)

1796 
	#R_PARISC_LTOFF14DR
 100

	)

1797 
	#R_PARISC_LTOFF16F
 101

	)

1798 
	#R_PARISC_LTOFF16WF
 102

	)

1799 
	#R_PARISC_LTOFF16DF
 103

	)

1800 
	#R_PARISC_SECREL64
 104

	)

1801 
	#R_PARISC_SEGREL64
 112

	)

1802 
	#R_PARISC_PLTOFF14WR
 115

	)

1803 
	#R_PARISC_PLTOFF14DR
 116

	)

1804 
	#R_PARISC_PLTOFF16F
 117

	)

1805 
	#R_PARISC_PLTOFF16WF
 118

	)

1806 
	#R_PARISC_PLTOFF16DF
 119

	)

1807 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1808 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1809 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1810 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1811 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1812 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1813 
	#R_PARISC_LORESERVE
 128

	)

1814 
	#R_PARISC_COPY
 128

	)

1815 
	#R_PARISC_IPLT
 129

	)

1816 
	#R_PARISC_EPLT
 130

	)

1817 
	#R_PARISC_TPREL32
 153

	)

1818 
	#R_PARISC_TPREL21L
 154

	)

1819 
	#R_PARISC_TPREL14R
 158

	)

1820 
	#R_PARISC_LTOFF_TP21L
 162

	)

1821 
	#R_PARISC_LTOFF_TP14R
 166

	)

1822 
	#R_PARISC_LTOFF_TP14F
 167

	)

1823 
	#R_PARISC_TPREL64
 216

	)

1824 
	#R_PARISC_TPREL14WR
 219

	)

1825 
	#R_PARISC_TPREL14DR
 220

	)

1826 
	#R_PARISC_TPREL16F
 221

	)

1827 
	#R_PARISC_TPREL16WF
 222

	)

1828 
	#R_PARISC_TPREL16DF
 223

	)

1829 
	#R_PARISC_LTOFF_TP64
 224

	)

1830 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1831 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1832 
	#R_PARISC_LTOFF_TP16F
 229

	)

1833 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1834 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1835 
	#R_PARISC_GNU_VTENTRY
 232

	)

1836 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1837 
	#R_PARISC_TLS_GD21L
 234

	)

1838 
	#R_PARISC_TLS_GD14R
 235

	)

1839 
	#R_PARISC_TLS_GDCALL
 236

	)

1840 
	#R_PARISC_TLS_LDM21L
 237

	)

1841 
	#R_PARISC_TLS_LDM14R
 238

	)

1842 
	#R_PARISC_TLS_LDMCALL
 239

	)

1843 
	#R_PARISC_TLS_LDO21L
 240

	)

1844 
	#R_PARISC_TLS_LDO14R
 241

	)

1845 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1846 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1847 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1848 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1849 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1850 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1851 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1852 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1853 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1854 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1855 
	#R_PARISC_HIRESERVE
 255

	)

1859 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1860 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1861 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1862 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1863 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1864 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1865 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1866 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1867 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1868 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1869 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1870 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1871 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1872 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1873 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1875 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1876 
	#PT_PARISC_UNWIND
 0x70000001

	)

1880 
	#PF_PARISC_SBP
 0x08000000

	)

1882 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1883 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1884 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1885 
	#PF_HP_CODE
 0x01000000

	)

1886 
	#PF_HP_MODIFY
 0x02000000

	)

1887 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1888 
	#PF_HP_SBP
 0x08000000

	)

1895 
	#EF_ALPHA_32BIT
 1

	)

1896 
	#EF_ALPHA_CANRELAX
 2

	)

1901 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1902 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1906 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1909 
	#STO_ALPHA_NOPV
 0x80

	)

1910 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1914 
	#R_ALPHA_NONE
 0

	)

1915 
	#R_ALPHA_REFLONG
 1

	)

1916 
	#R_ALPHA_REFQUAD
 2

	)

1917 
	#R_ALPHA_GPREL32
 3

	)

1918 
	#R_ALPHA_LITERAL
 4

	)

1919 
	#R_ALPHA_LITUSE
 5

	)

1920 
	#R_ALPHA_GPDISP
 6

	)

1921 
	#R_ALPHA_BRADDR
 7

	)

1922 
	#R_ALPHA_HINT
 8

	)

1923 
	#R_ALPHA_SREL16
 9

	)

1924 
	#R_ALPHA_SREL32
 10

	)

1925 
	#R_ALPHA_SREL64
 11

	)

1926 
	#R_ALPHA_GPRELHIGH
 17

	)

1927 
	#R_ALPHA_GPRELLOW
 18

	)

1928 
	#R_ALPHA_GPREL16
 19

	)

1929 
	#R_ALPHA_COPY
 24

	)

1930 
	#R_ALPHA_GLOB_DAT
 25

	)

1931 
	#R_ALPHA_JMP_SLOT
 26

	)

1932 
	#R_ALPHA_RELATIVE
 27

	)

1933 
	#R_ALPHA_TLS_GD_HI
 28

	)

1934 
	#R_ALPHA_TLSGD
 29

	)

1935 
	#R_ALPHA_TLS_LDM
 30

	)

1936 
	#R_ALPHA_DTPMOD64
 31

	)

1937 
	#R_ALPHA_GOTDTPREL
 32

	)

1938 
	#R_ALPHA_DTPREL64
 33

	)

1939 
	#R_ALPHA_DTPRELHI
 34

	)

1940 
	#R_ALPHA_DTPRELLO
 35

	)

1941 
	#R_ALPHA_DTPREL16
 36

	)

1942 
	#R_ALPHA_GOTTPREL
 37

	)

1943 
	#R_ALPHA_TPREL64
 38

	)

1944 
	#R_ALPHA_TPRELHI
 39

	)

1945 
	#R_ALPHA_TPRELLO
 40

	)

1946 
	#R_ALPHA_TPREL16
 41

	)

1948 
	#R_ALPHA_NUM
 46

	)

1951 
	#LITUSE_ALPHA_ADDR
 0

	)

1952 
	#LITUSE_ALPHA_BASE
 1

	)

1953 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1954 
	#LITUSE_ALPHA_JSR
 3

	)

1955 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1956 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1959 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1960 
	#DT_ALPHA_NUM
 1

	)

1965 
	#EF_PPC_EMB
 0x80000000

	)

1968 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1969 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1973 
	#R_PPC_NONE
 0

	)

1974 
	#R_PPC_ADDR32
 1

	)

1975 
	#R_PPC_ADDR24
 2

	)

1976 
	#R_PPC_ADDR16
 3

	)

1977 
	#R_PPC_ADDR16_LO
 4

	)

1978 
	#R_PPC_ADDR16_HI
 5

	)

1979 
	#R_PPC_ADDR16_HA
 6

	)

1980 
	#R_PPC_ADDR14
 7

	)

1981 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1982 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1983 
	#R_PPC_REL24
 10

	)

1984 
	#R_PPC_REL14
 11

	)

1985 
	#R_PPC_REL14_BRTAKEN
 12

	)

1986 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1987 
	#R_PPC_GOT16
 14

	)

1988 
	#R_PPC_GOT16_LO
 15

	)

1989 
	#R_PPC_GOT16_HI
 16

	)

1990 
	#R_PPC_GOT16_HA
 17

	)

1991 
	#R_PPC_PLTREL24
 18

	)

1992 
	#R_PPC_COPY
 19

	)

1993 
	#R_PPC_GLOB_DAT
 20

	)

1994 
	#R_PPC_JMP_SLOT
 21

	)

1995 
	#R_PPC_RELATIVE
 22

	)

1996 
	#R_PPC_LOCAL24PC
 23

	)

1997 
	#R_PPC_UADDR32
 24

	)

1998 
	#R_PPC_UADDR16
 25

	)

1999 
	#R_PPC_REL32
 26

	)

2000 
	#R_PPC_PLT32
 27

	)

2001 
	#R_PPC_PLTREL32
 28

	)

2002 
	#R_PPC_PLT16_LO
 29

	)

2003 
	#R_PPC_PLT16_HI
 30

	)

2004 
	#R_PPC_PLT16_HA
 31

	)

2005 
	#R_PPC_SDAREL16
 32

	)

2006 
	#R_PPC_SECTOFF
 33

	)

2007 
	#R_PPC_SECTOFF_LO
 34

	)

2008 
	#R_PPC_SECTOFF_HI
 35

	)

2009 
	#R_PPC_SECTOFF_HA
 36

	)

2012 
	#R_PPC_TLS
 67

	)

2013 
	#R_PPC_DTPMOD32
 68

	)

2014 
	#R_PPC_TPREL16
 69

	)

2015 
	#R_PPC_TPREL16_LO
 70

	)

2016 
	#R_PPC_TPREL16_HI
 71

	)

2017 
	#R_PPC_TPREL16_HA
 72

	)

2018 
	#R_PPC_TPREL32
 73

	)

2019 
	#R_PPC_DTPREL16
 74

	)

2020 
	#R_PPC_DTPREL16_LO
 75

	)

2021 
	#R_PPC_DTPREL16_HI
 76

	)

2022 
	#R_PPC_DTPREL16_HA
 77

	)

2023 
	#R_PPC_DTPREL32
 78

	)

2024 
	#R_PPC_GOT_TLSGD16
 79

	)

2025 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2026 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2027 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2028 
	#R_PPC_GOT_TLSLD16
 83

	)

2029 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2030 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2031 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2032 
	#R_PPC_GOT_TPREL16
 87

	)

2033 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2034 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2035 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2036 
	#R_PPC_GOT_DTPREL16
 91

	)

2037 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2038 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2039 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2043 
	#R_PPC_EMB_NADDR32
 101

	)

2044 
	#R_PPC_EMB_NADDR16
 102

	)

2045 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2046 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2047 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2048 
	#R_PPC_EMB_SDAI16
 106

	)

2049 
	#R_PPC_EMB_SDA2I16
 107

	)

2050 
	#R_PPC_EMB_SDA2REL
 108

	)

2051 
	#R_PPC_EMB_SDA21
 109

	)

2052 
	#R_PPC_EMB_MRKREF
 110

	)

2053 
	#R_PPC_EMB_RELSEC16
 111

	)

2054 
	#R_PPC_EMB_RELST_LO
 112

	)

2055 
	#R_PPC_EMB_RELST_HI
 113

	)

2056 
	#R_PPC_EMB_RELST_HA
 114

	)

2057 
	#R_PPC_EMB_BIT_FLD
 115

	)

2058 
	#R_PPC_EMB_RELSDA
 116

	)

2061 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2062 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2063 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2064 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2065 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2066 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2069 
	#R_PPC_IRELATIVE
 248

	)

2072 
	#R_PPC_REL16
 249

	)

2073 
	#R_PPC_REL16_LO
 250

	)

2074 
	#R_PPC_REL16_HI
 251

	)

2075 
	#R_PPC_REL16_HA
 252

	)

2079 
	#R_PPC_TOC16
 255

	)

2082 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2083 
	#DT_PPC_NUM
 1

	)

2086 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2087 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2088 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2089 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2090 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2091 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2092 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2093 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2094 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2095 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2096 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2097 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2098 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2099 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2100 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2101 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2102 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2103 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2105 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2106 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2107 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2108 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2110 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2111 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2112 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2113 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2114 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2115 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2116 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2117 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2119 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2120 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2121 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2122 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2123 
	#R_PPC64_ADDR30
 37

	)

2124 
	#R_PPC64_ADDR64
 38

	)

2125 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2126 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2127 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2128 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2129 
	#R_PPC64_UADDR64
 43

	)

2130 
	#R_PPC64_REL64
 44

	)

2131 
	#R_PPC64_PLT64
 45

	)

2132 
	#R_PPC64_PLTREL64
 46

	)

2133 
	#R_PPC64_TOC16
 47

	)

2134 
	#R_PPC64_TOC16_LO
 48

	)

2135 
	#R_PPC64_TOC16_HI
 49

	)

2136 
	#R_PPC64_TOC16_HA
 50

	)

2137 
	#R_PPC64_TOC
 51

	)

2138 
	#R_PPC64_PLTGOT16
 52

	)

2139 
	#R_PPC64_PLTGOT16_LO
 53

	)

2140 
	#R_PPC64_PLTGOT16_HI
 54

	)

2141 
	#R_PPC64_PLTGOT16_HA
 55

	)

2143 
	#R_PPC64_ADDR16_DS
 56

	)

2144 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2145 
	#R_PPC64_GOT16_DS
 58

	)

2146 
	#R_PPC64_GOT16_LO_DS
 59

	)

2147 
	#R_PPC64_PLT16_LO_DS
 60

	)

2148 
	#R_PPC64_SECTOFF_DS
 61

	)

2149 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2150 
	#R_PPC64_TOC16_DS
 63

	)

2151 
	#R_PPC64_TOC16_LO_DS
 64

	)

2152 
	#R_PPC64_PLTGOT16_DS
 65

	)

2153 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2156 
	#R_PPC64_TLS
 67

	)

2157 
	#R_PPC64_DTPMOD64
 68

	)

2158 
	#R_PPC64_TPREL16
 69

	)

2159 
	#R_PPC64_TPREL16_LO
 70

	)

2160 
	#R_PPC64_TPREL16_HI
 71

	)

2161 
	#R_PPC64_TPREL16_HA
 72

	)

2162 
	#R_PPC64_TPREL64
 73

	)

2163 
	#R_PPC64_DTPREL16
 74

	)

2164 
	#R_PPC64_DTPREL16_LO
 75

	)

2165 
	#R_PPC64_DTPREL16_HI
 76

	)

2166 
	#R_PPC64_DTPREL16_HA
 77

	)

2167 
	#R_PPC64_DTPREL64
 78

	)

2168 
	#R_PPC64_GOT_TLSGD16
 79

	)

2169 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2170 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2171 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2172 
	#R_PPC64_GOT_TLSLD16
 83

	)

2173 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2174 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2175 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2176 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2177 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2178 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2179 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2180 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2181 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2182 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2183 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2184 
	#R_PPC64_TPREL16_DS
 95

	)

2185 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2186 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2187 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2188 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2189 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2190 
	#R_PPC64_DTPREL16_DS
 101

	)

2191 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2192 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2193 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2194 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2195 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2196 
	#R_PPC64_TLSGD
 107

	)

2197 
	#R_PPC64_TLSLD
 108

	)

2198 
	#R_PPC64_TOCSAVE
 109

	)

2201 
	#R_PPC64_ADDR16_HIGH
 110

	)

2202 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2203 
	#R_PPC64_TPREL16_HIGH
 112

	)

2204 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2205 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2206 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2209 
	#R_PPC64_JMP_IREL
 247

	)

2210 
	#R_PPC64_IRELATIVE
 248

	)

2211 
	#R_PPC64_REL16
 249

	)

2212 
	#R_PPC64_REL16_LO
 250

	)

2213 
	#R_PPC64_REL16_HI
 251

	)

2214 
	#R_PPC64_REL16_HA
 252

	)

2220 
	#EF_PPC64_ABI
 3

	)

2223 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2224 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2225 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2226 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2227 
	#DT_PPC64_NUM
 3

	)

2230 
	#PPC64_OPT_TLS
 1

	)

2231 
	#PPC64_OPT_MULTI_TOC
 2

	)

2234 
	#STO_PPC64_LOCAL_BIT
 5

	)

2235 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2236 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2237 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2243 
	#EF_ARM_RELEXEC
 0x01

	)

2244 
	#EF_ARM_HASENTRY
 0x02

	)

2245 
	#EF_ARM_INTERWORK
 0x04

	)

2246 
	#EF_ARM_APCS_26
 0x08

	)

2247 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2248 
	#EF_ARM_PIC
 0x20

	)

2249 
	#EF_ARM_ALIGN8
 0x40

	)

2250 
	#EF_ARM_NEW_ABI
 0x80

	)

2251 
	#EF_ARM_OLD_ABI
 0x100

	)

2252 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2253 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2254 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2256 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2257 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2262 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2263 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2264 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2265 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2268 
	#EF_ARM_BE8
 0x00800000

	)

2269 
	#EF_ARM_LE8
 0x00400000

	)

2271 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2272 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2273 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2274 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2275 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2276 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2277 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2280 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2281 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2284 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2285 
	#SHF_ARM_COMDEF
 0x80000000

	)

2289 
	#PF_ARM_SB
 0x10000000

	)

2291 
	#PF_ARM_PI
 0x20000000

	)

2292 
	#PF_ARM_ABS
 0x40000000

	)

2295 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2298 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2299 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2300 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2305 
	#R_AARCH64_NONE
 0

	)

2306 
	#R_AARCH64_ABS64
 257

	)

2307 
	#R_AARCH64_ABS32
 258

	)

2308 
	#R_AARCH64_ABS16
 259

	)

2309 
	#R_AARCH64_PREL64
 260

	)

2310 
	#R_AARCH64_PREL32
 261

	)

2311 
	#R_AARCH64_PREL16
 262

	)

2312 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2313 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2314 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2315 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2316 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2317 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2318 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2319 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2320 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2321 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2322 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2323 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2324 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2325 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2326 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2327 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2328 
	#R_AARCH64_TSTBR14
 279

	)

2329 
	#R_AARCH64_CONDBR19
 280

	)

2330 
	#R_AARCH64_JUMP26
 282

	)

2331 
	#R_AARCH64_CALL26
 283

	)

2332 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2333 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2334 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2335 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2336 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2337 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2338 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2339 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2340 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2341 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2342 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2343 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2344 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2345 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2346 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2347 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2348 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2349 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2350 
	#R_AARCH64_GOTREL64
 307

	)

2351 
	#R_AARCH64_GOTREL32
 308

	)

2352 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2353 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2354 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2355 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2356 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2357 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2358 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2359 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2360 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2361 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2362 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2363 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2364 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2365 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2366 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2367 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2368 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2369 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2370 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2371 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2372 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2373 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2374 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2375 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2376 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2377 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2378 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2379 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2380 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2381 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2382 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2383 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2384 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2385 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2386 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2387 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2388 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2389 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2390 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2391 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2392 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2393 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2394 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2395 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2396 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2397 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2398 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2399 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2400 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2401 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2402 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2403 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2404 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2405 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2406 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2407 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2408 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2409 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2410 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2411 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2412 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2413 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2414 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2415 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2416 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2417 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2418 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2419 
	#R_AARCH64_COPY
 1024

	)

2420 
	#R_AARCH64_GLOB_DAT
 1025

	)

2421 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2422 
	#R_AARCH64_RELATIVE
 1027

	)

2423 
	#R_AARCH64_TLS_DTPMOD64
 1028

	)

2424 
	#R_AARCH64_TLS_DTPREL64
 1029

	)

2425 
	#R_AARCH64_TLS_TPREL64
 1030

	)

2426 
	#R_AARCH64_TLSDESC
 1031

	)

2427 
	#R_AARCH64_IRELATIVE
 1032

	)

2431 
	#R_ARM_NONE
 0

	)

2432 
	#R_ARM_PC24
 1

	)

2434 
	#R_ARM_ABS32
 2

	)

2435 
	#R_ARM_REL32
 3

	)

2436 
	#R_ARM_PC13
 4

	)

2437 
	#R_ARM_ABS16
 5

	)

2438 
	#R_ARM_ABS12
 6

	)

2439 
	#R_ARM_THM_ABS5
 7

	)

2440 
	#R_ARM_ABS8
 8

	)

2441 
	#R_ARM_SBREL32
 9

	)

2442 
	#R_ARM_THM_PC22
 10

	)

2443 
	#R_ARM_THM_PC8
 11

	)

2445 
	#R_ARM_AMP_VCALL9
 12

	)

2446 
	#R_ARM_SWI24
 13

	)

2447 
	#R_ARM_TLS_DESC
 13

	)

2448 
	#R_ARM_THM_SWI8
 14

	)

2449 
	#R_ARM_XPC25
 15

	)

2450 
	#R_ARM_THM_XPC22
 16

	)

2451 
	#R_ARM_TLS_DTPMOD32
 17

	)

2452 
	#R_ARM_TLS_DTPOFF32
 18

	)

2453 
	#R_ARM_TLS_TPOFF32
 19

	)

2454 
	#R_ARM_COPY
 20

	)

2455 
	#R_ARM_GLOB_DAT
 21

	)

2456 
	#R_ARM_JUMP_SLOT
 22

	)

2457 
	#R_ARM_RELATIVE
 23

	)

2458 
	#R_ARM_GOTOFF
 24

	)

2459 
	#R_ARM_GOTPC
 25

	)

2460 
	#R_ARM_GOT32
 26

	)

2461 
	#R_ARM_PLT32
 27

	)

2462 
	#R_ARM_CALL
 28

	)

2463 
	#R_ARM_JUMP24
 29

	)

2465 
	#R_ARM_THM_JUMP24
 30

	)

2466 
	#R_ARM_BASE_ABS
 31

	)

2467 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2468 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2469 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2470 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2471 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2472 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2473 
	#R_ARM_TARGET1
 38

	)

2474 
	#R_ARM_SBREL31
 39

	)

2475 
	#R_ARM_V4BX
 40

	)

2476 
	#R_ARM_TARGET2
 41

	)

2477 
	#R_ARM_PREL31
 42

	)

2478 
	#R_ARM_MOVW_ABS_NC
 43

	)

2479 
	#R_ARM_MOVT_ABS
 44

	)

2480 
	#R_ARM_MOVW_PREL_NC
 45

	)

2481 
	#R_ARM_MOVT_PREL
 46

	)

2482 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2483 
	#R_ARM_THM_MOVT_ABS
 48

	)

2485 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2487 
	#R_ARM_THM_MOVT_PREL
 50

	)

2489 
	#R_ARM_THM_JUMP19
 51

	)

2491 
	#R_ARM_THM_JUMP6
 52

	)

2493 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2495 
	#R_ARM_THM_PC12
 54

	)

2497 
	#R_ARM_ABS32_NOI
 55

	)

2498 
	#R_ARM_REL32_NOI
 56

	)

2499 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2500 
	#R_ARM_ALU_PC_G0
 58

	)

2501 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2502 
	#R_ARM_ALU_PC_G1
 60

	)

2503 
	#R_ARM_ALU_PC_G2
 61

	)

2504 
	#R_ARM_LDR_PC_G1
 62

	)

2505 
	#R_ARM_LDR_PC_G2
 63

	)

2506 
	#R_ARM_LDRS_PC_G0
 64

	)

2508 
	#R_ARM_LDRS_PC_G1
 65

	)

2510 
	#R_ARM_LDRS_PC_G2
 66

	)

2512 
	#R_ARM_LDC_PC_G0
 67

	)

2513 
	#R_ARM_LDC_PC_G1
 68

	)

2514 
	#R_ARM_LDC_PC_G2
 69

	)

2515 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2516 
	#R_ARM_ALU_SB_G0
 71

	)

2517 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2518 
	#R_ARM_ALU_SB_G1
 73

	)

2519 
	#R_ARM_ALU_SB_G2
 74

	)

2520 
	#R_ARM_LDR_SB_G0
 75

	)

2522 
	#R_ARM_LDR_SB_G1
 76

	)

2524 
	#R_ARM_LDR_SB_G2
 77

	)

2526 
	#R_ARM_LDRS_SB_G0
 78

	)

2528 
	#R_ARM_LDRS_SB_G1
 79

	)

2530 
	#R_ARM_LDRS_SB_G2
 80

	)

2532 
	#R_ARM_LDC_SB_G0
 81

	)

2533 
	#R_ARM_LDC_SB_G1
 82

	)

2534 
	#R_ARM_LDC_SB_G2
 83

	)

2535 
	#R_ARM_MOVW_BREL_NC
 84

	)

2537 
	#R_ARM_MOVT_BREL
 85

	)

2539 
	#R_ARM_MOVW_BREL
 86

	)

2541 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2543 
	#R_ARM_THM_MOVT_BREL
 88

	)

2545 
	#R_ARM_THM_MOVW_BREL
 89

	)

2547 
	#R_ARM_TLS_GOTDESC
 90

	)

2548 
	#R_ARM_TLS_CALL
 91

	)

2549 
	#R_ARM_TLS_DESCSEQ
 92

	)

2550 
	#R_ARM_THM_TLS_CALL
 93

	)

2551 
	#R_ARM_PLT32_ABS
 94

	)

2552 
	#R_ARM_GOT_ABS
 95

	)

2553 
	#R_ARM_GOT_PREL
 96

	)

2554 
	#R_ARM_GOT_BREL12
 97

	)

2556 
	#R_ARM_GOTOFF12
 98

	)

2558 
	#R_ARM_GOTRELAX
 99

	)

2559 
	#R_ARM_GNU_VTENTRY
 100

	)

2560 
	#R_ARM_GNU_VTINHERIT
 101

	)

2561 
	#R_ARM_THM_PC11
 102

	)

2562 
	#R_ARM_THM_PC9
 103

	)

2564 
	#R_ARM_TLS_GD32
 104

	)

2566 
	#R_ARM_TLS_LDM32
 105

	)

2568 
	#R_ARM_TLS_LDO32
 106

	)

2570 
	#R_ARM_TLS_IE32
 107

	)

2572 
	#R_ARM_TLS_LE32
 108

	)

2574 
	#R_ARM_TLS_LDO12
 109

	)

2576 
	#R_ARM_TLS_LE12
 110

	)

2578 
	#R_ARM_TLS_IE12GP
 111

	)

2580 
	#R_ARM_ME_TOO
 128

	)

2581 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2582 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2583 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2584 
	#R_ARM_THM_GOT_BREL12
 131

	)

2586 
	#R_ARM_IRELATIVE
 160

	)

2587 
	#R_ARM_RXPC25
 249

	)

2588 
	#R_ARM_RSBREL32
 250

	)

2589 
	#R_ARM_THM_RPC22
 251

	)

2590 
	#R_ARM_RREL32
 252

	)

2591 
	#R_ARM_RABS22
 253

	)

2592 
	#R_ARM_RPC24
 254

	)

2593 
	#R_ARM_RBASE
 255

	)

2595 
	#R_ARM_NUM
 256

	)

2600 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2601 
	#EF_IA_64_ABI64
 0x00000010

	)

2602 
	#EF_IA_64_ARCH
 0xff000000

	)

2605 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2606 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2607 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2608 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2609 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2612 
	#PF_IA_64_NORECOV
 0x80000000

	)

2615 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2616 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2619 
	#SHF_IA_64_SHORT
 0x10000000

	)

2620 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2623 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2624 
	#DT_IA_64_NUM
 1

	)

2627 
	#R_IA64_NONE
 0x00

	)

2628 
	#R_IA64_IMM14
 0x21

	)

2629 
	#R_IA64_IMM22
 0x22

	)

2630 
	#R_IA64_IMM64
 0x23

	)

2631 
	#R_IA64_DIR32MSB
 0x24

	)

2632 
	#R_IA64_DIR32LSB
 0x25

	)

2633 
	#R_IA64_DIR64MSB
 0x26

	)

2634 
	#R_IA64_DIR64LSB
 0x27

	)

2635 
	#R_IA64_GPREL22
 0x2®

	)

2636 
	#R_IA64_GPREL64I
 0x2b

	)

2637 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2638 
	#R_IA64_GPREL32LSB
 0x2d

	)

2639 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2640 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2641 
	#R_IA64_LTOFF22
 0x32

	)

2642 
	#R_IA64_LTOFF64I
 0x33

	)

2643 
	#R_IA64_PLTOFF22
 0x3®

	)

2644 
	#R_IA64_PLTOFF64I
 0x3b

	)

2645 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2646 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2647 
	#R_IA64_FPTR64I
 0x43

	)

2648 
	#R_IA64_FPTR32MSB
 0x44

	)

2649 
	#R_IA64_FPTR32LSB
 0x45

	)

2650 
	#R_IA64_FPTR64MSB
 0x46

	)

2651 
	#R_IA64_FPTR64LSB
 0x47

	)

2652 
	#R_IA64_PCREL60B
 0x48

	)

2653 
	#R_IA64_PCREL21B
 0x49

	)

2654 
	#R_IA64_PCREL21M
 0x4®

	)

2655 
	#R_IA64_PCREL21F
 0x4b

	)

2656 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2657 
	#R_IA64_PCREL32LSB
 0x4d

	)

2658 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2659 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2660 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2661 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2662 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2663 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2664 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2665 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2666 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2667 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2668 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2669 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2670 
	#R_IA64_SECREL32MSB
 0x64

	)

2671 
	#R_IA64_SECREL32LSB
 0x65

	)

2672 
	#R_IA64_SECREL64MSB
 0x66

	)

2673 
	#R_IA64_SECREL64LSB
 0x67

	)

2674 
	#R_IA64_REL32MSB
 0x6¯

	)

2675 
	#R_IA64_REL32LSB
 0x6d

	)

2676 
	#R_IA64_REL64MSB
 0x6ê

	)

2677 
	#R_IA64_REL64LSB
 0x6‡

	)

2678 
	#R_IA64_LTV32MSB
 0x74

	)

2679 
	#R_IA64_LTV32LSB
 0x75

	)

2680 
	#R_IA64_LTV64MSB
 0x76

	)

2681 
	#R_IA64_LTV64LSB
 0x77

	)

2682 
	#R_IA64_PCREL21BI
 0x79

	)

2683 
	#R_IA64_PCREL22
 0x7®

	)

2684 
	#R_IA64_PCREL64I
 0x7b

	)

2685 
	#R_IA64_IPLTMSB
 0x80

	)

2686 
	#R_IA64_IPLTLSB
 0x81

	)

2687 
	#R_IA64_COPY
 0x84

	)

2688 
	#R_IA64_SUB
 0x85

	)

2689 
	#R_IA64_LTOFF22X
 0x86

	)

2690 
	#R_IA64_LDXMOV
 0x87

	)

2691 
	#R_IA64_TPREL14
 0x91

	)

2692 
	#R_IA64_TPREL22
 0x92

	)

2693 
	#R_IA64_TPREL64I
 0x93

	)

2694 
	#R_IA64_TPREL64MSB
 0x96

	)

2695 
	#R_IA64_TPREL64LSB
 0x97

	)

2696 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2697 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2698 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2699 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2700 
	#R_IA64_DTPREL14
 0xb1

	)

2701 
	#R_IA64_DTPREL22
 0xb2

	)

2702 
	#R_IA64_DTPREL64I
 0xb3

	)

2703 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2704 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2705 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2706 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2707 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2712 
	#EF_SH_MACH_MASK
 0x1f

	)

2713 
	#EF_SH_UNKNOWN
 0x0

	)

2714 
	#EF_SH1
 0x1

	)

2715 
	#EF_SH2
 0x2

	)

2716 
	#EF_SH3
 0x3

	)

2717 
	#EF_SH_DSP
 0x4

	)

2718 
	#EF_SH3_DSP
 0x5

	)

2719 
	#EF_SH4AL_DSP
 0x6

	)

2720 
	#EF_SH3E
 0x8

	)

2721 
	#EF_SH4
 0x9

	)

2722 
	#EF_SH2E
 0xb

	)

2723 
	#EF_SH4A
 0xc

	)

2724 
	#EF_SH2A
 0xd

	)

2725 
	#EF_SH4_NOFPU
 0x10

	)

2726 
	#EF_SH4A_NOFPU
 0x11

	)

2727 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2728 
	#EF_SH2A_NOFPU
 0x13

	)

2729 
	#EF_SH3_NOMMU
 0x14

	)

2730 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2731 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2732 
	#EF_SH2A_SH4
 0x17

	)

2733 
	#EF_SH2A_SH3E
 0x18

	)

2736 
	#R_SH_NONE
 0

	)

2737 
	#R_SH_DIR32
 1

	)

2738 
	#R_SH_REL32
 2

	)

2739 
	#R_SH_DIR8WPN
 3

	)

2740 
	#R_SH_IND12W
 4

	)

2741 
	#R_SH_DIR8WPL
 5

	)

2742 
	#R_SH_DIR8WPZ
 6

	)

2743 
	#R_SH_DIR8BP
 7

	)

2744 
	#R_SH_DIR8W
 8

	)

2745 
	#R_SH_DIR8L
 9

	)

2746 
	#R_SH_SWITCH16
 25

	)

2747 
	#R_SH_SWITCH32
 26

	)

2748 
	#R_SH_USES
 27

	)

2749 
	#R_SH_COUNT
 28

	)

2750 
	#R_SH_ALIGN
 29

	)

2751 
	#R_SH_CODE
 30

	)

2752 
	#R_SH_DATA
 31

	)

2753 
	#R_SH_LABEL
 32

	)

2754 
	#R_SH_SWITCH8
 33

	)

2755 
	#R_SH_GNU_VTINHERIT
 34

	)

2756 
	#R_SH_GNU_VTENTRY
 35

	)

2757 
	#R_SH_TLS_GD_32
 144

	)

2758 
	#R_SH_TLS_LD_32
 145

	)

2759 
	#R_SH_TLS_LDO_32
 146

	)

2760 
	#R_SH_TLS_IE_32
 147

	)

2761 
	#R_SH_TLS_LE_32
 148

	)

2762 
	#R_SH_TLS_DTPMOD32
 149

	)

2763 
	#R_SH_TLS_DTPOFF32
 150

	)

2764 
	#R_SH_TLS_TPOFF32
 151

	)

2765 
	#R_SH_GOT32
 160

	)

2766 
	#R_SH_PLT32
 161

	)

2767 
	#R_SH_COPY
 162

	)

2768 
	#R_SH_GLOB_DAT
 163

	)

2769 
	#R_SH_JMP_SLOT
 164

	)

2770 
	#R_SH_RELATIVE
 165

	)

2771 
	#R_SH_GOTOFF
 166

	)

2772 
	#R_SH_GOTPC
 167

	)

2774 
	#R_SH_NUM
 256

	)

2780 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2784 
	#R_390_NONE
 0

	)

2785 
	#R_390_8
 1

	)

2786 
	#R_390_12
 2

	)

2787 
	#R_390_16
 3

	)

2788 
	#R_390_32
 4

	)

2789 
	#R_390_PC32
 5

	)

2790 
	#R_390_GOT12
 6

	)

2791 
	#R_390_GOT32
 7

	)

2792 
	#R_390_PLT32
 8

	)

2793 
	#R_390_COPY
 9

	)

2794 
	#R_390_GLOB_DAT
 10

	)

2795 
	#R_390_JMP_SLOT
 11

	)

2796 
	#R_390_RELATIVE
 12

	)

2797 
	#R_390_GOTOFF32
 13

	)

2798 
	#R_390_GOTPC
 14

	)

2799 
	#R_390_GOT16
 15

	)

2800 
	#R_390_PC16
 16

	)

2801 
	#R_390_PC16DBL
 17

	)

2802 
	#R_390_PLT16DBL
 18

	)

2803 
	#R_390_PC32DBL
 19

	)

2804 
	#R_390_PLT32DBL
 20

	)

2805 
	#R_390_GOTPCDBL
 21

	)

2806 
	#R_390_64
 22

	)

2807 
	#R_390_PC64
 23

	)

2808 
	#R_390_GOT64
 24

	)

2809 
	#R_390_PLT64
 25

	)

2810 
	#R_390_GOTENT
 26

	)

2811 
	#R_390_GOTOFF16
 27

	)

2812 
	#R_390_GOTOFF64
 28

	)

2813 
	#R_390_GOTPLT12
 29

	)

2814 
	#R_390_GOTPLT16
 30

	)

2815 
	#R_390_GOTPLT32
 31

	)

2816 
	#R_390_GOTPLT64
 32

	)

2817 
	#R_390_GOTPLTENT
 33

	)

2818 
	#R_390_PLTOFF16
 34

	)

2819 
	#R_390_PLTOFF32
 35

	)

2820 
	#R_390_PLTOFF64
 36

	)

2821 
	#R_390_TLS_LOAD
 37

	)

2822 
	#R_390_TLS_GDCALL
 38

	)

2824 
	#R_390_TLS_LDCALL
 39

	)

2826 
	#R_390_TLS_GD32
 40

	)

2828 
	#R_390_TLS_GD64
 41

	)

2830 
	#R_390_TLS_GOTIE12
 42

	)

2832 
	#R_390_TLS_GOTIE32
 43

	)

2834 
	#R_390_TLS_GOTIE64
 44

	)

2836 
	#R_390_TLS_LDM32
 45

	)

2838 
	#R_390_TLS_LDM64
 46

	)

2840 
	#R_390_TLS_IE32
 47

	)

2842 
	#R_390_TLS_IE64
 48

	)

2844 
	#R_390_TLS_IEENT
 49

	)

2846 
	#R_390_TLS_LE32
 50

	)

2848 
	#R_390_TLS_LE64
 51

	)

2850 
	#R_390_TLS_LDO32
 52

	)

2852 
	#R_390_TLS_LDO64
 53

	)

2854 
	#R_390_TLS_DTPMOD
 54

	)

2855 
	#R_390_TLS_DTPOFF
 55

	)

2856 
	#R_390_TLS_TPOFF
 56

	)

2858 
	#R_390_20
 57

	)

2859 
	#R_390_GOT20
 58

	)

2860 
	#R_390_GOTPLT20
 59

	)

2861 
	#R_390_TLS_GOTIE20
 60

	)

2863 
	#R_390_IRELATIVE
 61

	)

2865 
	#R_390_NUM
 62

	)

2869 
	#R_CRIS_NONE
 0

	)

2870 
	#R_CRIS_8
 1

	)

2871 
	#R_CRIS_16
 2

	)

2872 
	#R_CRIS_32
 3

	)

2873 
	#R_CRIS_8_PCREL
 4

	)

2874 
	#R_CRIS_16_PCREL
 5

	)

2875 
	#R_CRIS_32_PCREL
 6

	)

2876 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2877 
	#R_CRIS_GNU_VTENTRY
 8

	)

2878 
	#R_CRIS_COPY
 9

	)

2879 
	#R_CRIS_GLOB_DAT
 10

	)

2880 
	#R_CRIS_JUMP_SLOT
 11

	)

2881 
	#R_CRIS_RELATIVE
 12

	)

2882 
	#R_CRIS_16_GOT
 13

	)

2883 
	#R_CRIS_32_GOT
 14

	)

2884 
	#R_CRIS_16_GOTPLT
 15

	)

2885 
	#R_CRIS_32_GOTPLT
 16

	)

2886 
	#R_CRIS_32_GOTREL
 17

	)

2887 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2888 
	#R_CRIS_32_PLT_PCREL
 19

	)

2890 
	#R_CRIS_NUM
 20

	)

2894 
	#R_X86_64_NONE
 0

	)

2895 
	#R_X86_64_64
 1

	)

2896 
	#R_X86_64_PC32
 2

	)

2897 
	#R_X86_64_GOT32
 3

	)

2898 
	#R_X86_64_PLT32
 4

	)

2899 
	#R_X86_64_COPY
 5

	)

2900 
	#R_X86_64_GLOB_DAT
 6

	)

2901 
	#R_X86_64_JUMP_SLOT
 7

	)

2902 
	#R_X86_64_RELATIVE
 8

	)

2903 
	#R_X86_64_GOTPCREL
 9

	)

2905 
	#R_X86_64_32
 10

	)

2906 
	#R_X86_64_32S
 11

	)

2907 
	#R_X86_64_16
 12

	)

2908 
	#R_X86_64_PC16
 13

	)

2909 
	#R_X86_64_8
 14

	)

2910 
	#R_X86_64_PC8
 15

	)

2911 
	#R_X86_64_DTPMOD64
 16

	)

2912 
	#R_X86_64_DTPOFF64
 17

	)

2913 
	#R_X86_64_TPOFF64
 18

	)

2914 
	#R_X86_64_TLSGD
 19

	)

2916 
	#R_X86_64_TLSLD
 20

	)

2918 
	#R_X86_64_DTPOFF32
 21

	)

2919 
	#R_X86_64_GOTTPOFF
 22

	)

2921 
	#R_X86_64_TPOFF32
 23

	)

2922 
	#R_X86_64_PC64
 24

	)

2923 
	#R_X86_64_GOTOFF64
 25

	)

2924 
	#R_X86_64_GOTPC32
 26

	)

2926 
	#R_X86_64_GOT64
 27

	)

2927 
	#R_X86_64_GOTPCREL64
 28

	)

2929 
	#R_X86_64_GOTPC64
 29

	)

2930 
	#R_X86_64_GOTPLT64
 30

	)

2931 
	#R_X86_64_PLTOFF64
 31

	)

2933 
	#R_X86_64_SIZE32
 32

	)

2934 
	#R_X86_64_SIZE64
 33

	)

2935 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2936 
	#R_X86_64_TLSDESC_CALL
 35

	)

2938 
	#R_X86_64_TLSDESC
 36

	)

2939 
	#R_X86_64_IRELATIVE
 37

	)

2940 
	#R_X86_64_RELATIVE64
 38

	)

2942 
	#R_X86_64_NUM
 39

	)

2946 
	#R_MN10300_NONE
 0

	)

2947 
	#R_MN10300_32
 1

	)

2948 
	#R_MN10300_16
 2

	)

2949 
	#R_MN10300_8
 3

	)

2950 
	#R_MN10300_PCREL32
 4

	)

2951 
	#R_MN10300_PCREL16
 5

	)

2952 
	#R_MN10300_PCREL8
 6

	)

2953 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2954 
	#R_MN10300_GNU_VTENTRY
 8

	)

2955 
	#R_MN10300_24
 9

	)

2956 
	#R_MN10300_GOTPC32
 10

	)

2957 
	#R_MN10300_GOTPC16
 11

	)

2958 
	#R_MN10300_GOTOFF32
 12

	)

2959 
	#R_MN10300_GOTOFF24
 13

	)

2960 
	#R_MN10300_GOTOFF16
 14

	)

2961 
	#R_MN10300_PLT32
 15

	)

2962 
	#R_MN10300_PLT16
 16

	)

2963 
	#R_MN10300_GOT32
 17

	)

2964 
	#R_MN10300_GOT24
 18

	)

2965 
	#R_MN10300_GOT16
 19

	)

2966 
	#R_MN10300_COPY
 20

	)

2967 
	#R_MN10300_GLOB_DAT
 21

	)

2968 
	#R_MN10300_JMP_SLOT
 22

	)

2969 
	#R_MN10300_RELATIVE
 23

	)

2970 
	#R_MN10300_TLS_GD
 24

	)

2971 
	#R_MN10300_TLS_LD
 25

	)

2972 
	#R_MN10300_TLS_LDO
 26

	)

2973 
	#R_MN10300_TLS_GOTIE
 27

	)

2975 
	#R_MN10300_TLS_IE
 28

	)

2977 
	#R_MN10300_TLS_LE
 29

	)

2979 
	#R_MN10300_TLS_DTPMOD
 30

	)

2980 
	#R_MN10300_TLS_DTPOFF
 31

	)

2981 
	#R_MN10300_TLS_TPOFF
 32

	)

2982 
	#R_MN10300_SYM_DIFF
 33

	)

2984 
	#R_MN10300_ALIGN
 34

	)

2986 
	#R_MN10300_NUM
 35

	)

2990 
	#R_M32R_NONE
 0

	)

2991 
	#R_M32R_16
 1

	)

2992 
	#R_M32R_32
 2

	)

2993 
	#R_M32R_24
 3

	)

2994 
	#R_M32R_10_PCREL
 4

	)

2995 
	#R_M32R_18_PCREL
 5

	)

2996 
	#R_M32R_26_PCREL
 6

	)

2997 
	#R_M32R_HI16_ULO
 7

	)

2998 
	#R_M32R_HI16_SLO
 8

	)

2999 
	#R_M32R_LO16
 9

	)

3000 
	#R_M32R_SDA16
 10

	)

3001 
	#R_M32R_GNU_VTINHERIT
 11

	)

3002 
	#R_M32R_GNU_VTENTRY
 12

	)

3004 
	#R_M32R_16_RELA
 33

	)

3005 
	#R_M32R_32_RELA
 34

	)

3006 
	#R_M32R_24_RELA
 35

	)

3007 
	#R_M32R_10_PCREL_RELA
 36

	)

3008 
	#R_M32R_18_PCREL_RELA
 37

	)

3009 
	#R_M32R_26_PCREL_RELA
 38

	)

3010 
	#R_M32R_HI16_ULO_RELA
 39

	)

3011 
	#R_M32R_HI16_SLO_RELA
 40

	)

3012 
	#R_M32R_LO16_RELA
 41

	)

3013 
	#R_M32R_SDA16_RELA
 42

	)

3014 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3015 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3016 
	#R_M32R_REL32
 45

	)

3018 
	#R_M32R_GOT24
 48

	)

3019 
	#R_M32R_26_PLTREL
 49

	)

3020 
	#R_M32R_COPY
 50

	)

3021 
	#R_M32R_GLOB_DAT
 51

	)

3022 
	#R_M32R_JMP_SLOT
 52

	)

3023 
	#R_M32R_RELATIVE
 53

	)

3024 
	#R_M32R_GOTOFF
 54

	)

3025 
	#R_M32R_GOTPC24
 55

	)

3026 
	#R_M32R_GOT16_HI_ULO
 56

	)

3028 
	#R_M32R_GOT16_HI_SLO
 57

	)

3030 
	#R_M32R_GOT16_LO
 58

	)

3031 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3033 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3035 
	#R_M32R_GOTPC_LO
 61

	)

3037 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3039 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3041 
	#R_M32R_GOTOFF_LO
 64

	)

3042 
	#R_M32R_NUM
 256

	)

3045 
	#R_MICROBLAZE_NONE
 0

	)

3046 
	#R_MICROBLAZE_32
 1

	)

3047 
	#R_MICROBLAZE_32_PCREL
 2

	)

3048 
	#R_MICROBLAZE_64_PCREL
 3

	)

3049 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3050 
	#R_MICROBLAZE_64
 5

	)

3051 
	#R_MICROBLAZE_32_LO
 6

	)

3052 
	#R_MICROBLAZE_SRO32
 7

	)

3053 
	#R_MICROBLAZE_SRW32
 8

	)

3054 
	#R_MICROBLAZE_64_NONE
 9

	)

3055 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3056 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3057 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3058 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3059 
	#R_MICROBLAZE_GOT_64
 14

	)

3060 
	#R_MICROBLAZE_PLT_64
 15

	)

3061 
	#R_MICROBLAZE_REL
 16

	)

3062 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3063 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3064 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3065 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3066 
	#R_MICROBLAZE_COPY
 21

	)

3067 
	#R_MICROBLAZE_TLS
 22

	)

3068 
	#R_MICROBLAZE_TLSGD
 23

	)

3069 
	#R_MICROBLAZE_TLSLD
 24

	)

3070 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3071 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3072 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3073 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3074 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3077 
	#R_TILEPRO_NONE
 0

	)

3078 
	#R_TILEPRO_32
 1

	)

3079 
	#R_TILEPRO_16
 2

	)

3080 
	#R_TILEPRO_8
 3

	)

3081 
	#R_TILEPRO_32_PCREL
 4

	)

3082 
	#R_TILEPRO_16_PCREL
 5

	)

3083 
	#R_TILEPRO_8_PCREL
 6

	)

3084 
	#R_TILEPRO_LO16
 7

	)

3085 
	#R_TILEPRO_HI16
 8

	)

3086 
	#R_TILEPRO_HA16
 9

	)

3087 
	#R_TILEPRO_COPY
 10

	)

3088 
	#R_TILEPRO_GLOB_DAT
 11

	)

3089 
	#R_TILEPRO_JMP_SLOT
 12

	)

3090 
	#R_TILEPRO_RELATIVE
 13

	)

3091 
	#R_TILEPRO_BROFF_X1
 14

	)

3092 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3093 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3094 
	#R_TILEPRO_IMM8_X0
 17

	)

3095 
	#R_TILEPRO_IMM8_Y0
 18

	)

3096 
	#R_TILEPRO_IMM8_X1
 19

	)

3097 
	#R_TILEPRO_IMM8_Y1
 20

	)

3098 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3099 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3100 
	#R_TILEPRO_IMM16_X0
 23

	)

3101 
	#R_TILEPRO_IMM16_X1
 24

	)

3102 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3103 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3104 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3105 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3106 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3107 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3108 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3109 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3110 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3111 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3112 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3113 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3114 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3115 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3116 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3117 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3118 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3119 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3120 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3121 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3122 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3123 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3124 
	#R_TILEPRO_MMSTART_X0
 47

	)

3125 
	#R_TILEPRO_MMEND_X0
 48

	)

3126 
	#R_TILEPRO_MMSTART_X1
 49

	)

3127 
	#R_TILEPRO_MMEND_X1
 50

	)

3128 
	#R_TILEPRO_SHAMT_X0
 51

	)

3129 
	#R_TILEPRO_SHAMT_X1
 52

	)

3130 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3131 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3132 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3134 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3135 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3136 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3137 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3138 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3139 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3140 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3141 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3142 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3143 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3144 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3145 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3146 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3147 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3148 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3149 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3150 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3151 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3152 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3153 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3154 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3155 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3156 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3157 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3158 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3159 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3160 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3161 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3162 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3163 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3164 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3165 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3166 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3168 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3169 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3171 
	#R_TILEPRO_NUM
 130

	)

3175 
	#R_TILEGX_NONE
 0

	)

3176 
	#R_TILEGX_64
 1

	)

3177 
	#R_TILEGX_32
 2

	)

3178 
	#R_TILEGX_16
 3

	)

3179 
	#R_TILEGX_8
 4

	)

3180 
	#R_TILEGX_64_PCREL
 5

	)

3181 
	#R_TILEGX_32_PCREL
 6

	)

3182 
	#R_TILEGX_16_PCREL
 7

	)

3183 
	#R_TILEGX_8_PCREL
 8

	)

3184 
	#R_TILEGX_HW0
 9

	)

3185 
	#R_TILEGX_HW1
 10

	)

3186 
	#R_TILEGX_HW2
 11

	)

3187 
	#R_TILEGX_HW3
 12

	)

3188 
	#R_TILEGX_HW0_LAST
 13

	)

3189 
	#R_TILEGX_HW1_LAST
 14

	)

3190 
	#R_TILEGX_HW2_LAST
 15

	)

3191 
	#R_TILEGX_COPY
 16

	)

3192 
	#R_TILEGX_GLOB_DAT
 17

	)

3193 
	#R_TILEGX_JMP_SLOT
 18

	)

3194 
	#R_TILEGX_RELATIVE
 19

	)

3195 
	#R_TILEGX_BROFF_X1
 20

	)

3196 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3197 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3198 
	#R_TILEGX_IMM8_X0
 23

	)

3199 
	#R_TILEGX_IMM8_Y0
 24

	)

3200 
	#R_TILEGX_IMM8_X1
 25

	)

3201 
	#R_TILEGX_IMM8_Y1
 26

	)

3202 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3203 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3204 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3205 
	#R_TILEGX_MMSTART_X0
 30

	)

3206 
	#R_TILEGX_MMEND_X0
 31

	)

3207 
	#R_TILEGX_SHAMT_X0
 32

	)

3208 
	#R_TILEGX_SHAMT_X1
 33

	)

3209 
	#R_TILEGX_SHAMT_Y0
 34

	)

3210 
	#R_TILEGX_SHAMT_Y1
 35

	)

3211 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3212 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3213 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3214 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3215 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3216 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3217 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3218 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3219 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3220 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3221 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3222 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3223 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3224 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3225 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3226 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3227 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3228 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3229 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3230 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3231 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3232 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3233 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3234 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3235 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3236 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3237 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3238 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3239 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3240 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3241 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3242 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3243 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3244 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3245 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3246 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3247 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3248 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3249 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3250 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3251 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3252 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3253 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3254 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3255 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3256 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3257 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3258 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3259 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3260 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3261 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3262 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3263 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3264 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3266 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3267 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3268 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3269 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3270 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3271 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3272 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3273 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3274 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3275 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3276 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3277 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3279 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3280 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3281 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3282 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3283 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3284 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3285 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3286 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3287 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3288 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3289 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3290 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3291 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3292 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3293 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3294 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3296 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3297 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3299 
	#R_TILEGX_NUM
 130

	)

3302 
	g__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 
__±r_t


	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_BSD


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_BSD


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

102 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

104 #ifdef 
__USE_BSD


106 
	#WAIT_ANY
 (-1Ë

	)

107 
	#WAIT_MYPGRP
 0

	)

125 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

127 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 #i‚de‡
__id_t_deföed


129 
	~<bôs/ty≥s.h
>

130 
__id_t
 
	tid_t
;

131 
	#__id_t_deföed


	)

134 
	#__√ed_sigöfo_t


	)

135 
	~<bôs/sigöfo.h
>

148 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

149 
__›ti⁄s
);

152 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


155 
	grußge
;

162 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

163 
rußge
 * 
__ußge
Ë
__THROWNL
;

166 #ifde‡
__USE_BSD


168 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 *
__ußge
Ë
__THROWNL
;

173 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_BSD


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_BSD


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/auxv.h

20 
	#AT_NULL
 0

	)

21 
	#AT_IGNORE
 1

	)

22 
	#AT_EXECFD
 2

	)

23 
	#AT_PHDR
 3

	)

24 
	#AT_PHENT
 4

	)

25 
	#AT_PHNUM
 5

	)

26 
	#AT_PAGESZ
 6

	)

27 
	#AT_BASE
 7

	)

28 
	#AT_FLAGS
 8

	)

29 
	#AT_ENTRY
 9

	)

30 
	#AT_NOTELF
 10

	)

31 
	#AT_UID
 11

	)

32 
	#AT_EUID
 12

	)

33 
	#AT_GID
 13

	)

34 
	#AT_EGID
 14

	)

35 
	#AT_CLKTCK
 17

	)

38 
	#AT_PLATFORM
 15

	)

39 
	#AT_HWCAP
 16

	)

44 
	#AT_FPUCW
 18

	)

47 
	#AT_DCACHEBSIZE
 19

	)

48 
	#AT_ICACHEBSIZE
 20

	)

49 
	#AT_UCACHEBSIZE
 21

	)

53 
	#AT_IGNOREPPC
 22

	)

55 
	#AT_SECURE
 23

	)

57 
	#AT_BASE_PLATFORM
 24

	)

59 
	#AT_RANDOM
 25

	)

61 
	#AT_HWCAP2
 26

	)

64 
	#AT_EXECFN
 31

	)

68 
	#AT_SYSINFO
 32

	)

69 
	#AT_SYSINFO_EHDR
 33

	)

73 
	#AT_L1I_CACHESHAPE
 34

	)

74 
	#AT_L1D_CACHESHAPE
 35

	)

75 
	#AT_L2_CACHESHAPE
 36

	)

76 
	#AT_L3_CACHESHAPE
 37

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #ifde‡
_UAPI_LINUX_IN6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

96 
	#IP_PMTUDISC_DONT
 0

	)

97 
	#IP_PMTUDISC_WANT
 1

	)

98 
	#IP_PMTUDISC_DO
 2

	)

99 
	#IP_PMTUDISC_PROBE
 3

	)

102 
	#SOL_IP
 0

	)

104 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

105 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

106 
	#IP_MAX_MEMBERSHIPS
 20

	)

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


112 
	sù_›ts


114 
ö_addr
 
	mù_d°
;

115 
	mù_›ts
[40];

119 
	sù_mªqn


121 
ö_addr
 
	mimr_mu…üddr
;

122 
ö_addr
 
	mimr_addªss
;

123 
	mimr_ifödex
;

127 
	sö_pktöfo


129 
	mùi_ifödex
;

130 
ö_addr
 
	mùi_•ec_d°
;

131 
ö_addr
 
	mùi_addr
;

138 
	#IPV6_ADDRFORM
 1

	)

139 
	#IPV6_2292PKTINFO
 2

	)

140 
	#IPV6_2292HOPOPTS
 3

	)

141 
	#IPV6_2292DSTOPTS
 4

	)

142 
	#IPV6_2292RTHDR
 5

	)

143 
	#IPV6_2292PKTOPTIONS
 6

	)

144 
	#IPV6_CHECKSUM
 7

	)

145 
	#IPV6_2292HOPLIMIT
 8

	)

147 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

149 
	#IPV6_NEXTHOP
 9

	)

150 
	#IPV6_AUTHHDR
 10

	)

151 
	#IPV6_UNICAST_HOPS
 16

	)

152 
	#IPV6_MULTICAST_IF
 17

	)

153 
	#IPV6_MULTICAST_HOPS
 18

	)

154 
	#IPV6_MULTICAST_LOOP
 19

	)

155 
	#IPV6_JOIN_GROUP
 20

	)

156 
	#IPV6_LEAVE_GROUP
 21

	)

157 
	#IPV6_ROUTER_ALERT
 22

	)

158 
	#IPV6_MTU_DISCOVER
 23

	)

159 
	#IPV6_MTU
 24

	)

160 
	#IPV6_RECVERR
 25

	)

161 
	#IPV6_V6ONLY
 26

	)

162 
	#IPV6_JOIN_ANYCAST
 27

	)

163 
	#IPV6_LEAVE_ANYCAST
 28

	)

164 
	#IPV6_IPSEC_POLICY
 34

	)

165 
	#IPV6_XFRM_POLICY
 35

	)

167 
	#IPV6_RECVPKTINFO
 49

	)

168 
	#IPV6_PKTINFO
 50

	)

169 
	#IPV6_RECVHOPLIMIT
 51

	)

170 
	#IPV6_HOPLIMIT
 52

	)

171 
	#IPV6_RECVHOPOPTS
 53

	)

172 
	#IPV6_HOPOPTS
 54

	)

173 
	#IPV6_RTHDRDSTOPTS
 55

	)

174 
	#IPV6_RECVRTHDR
 56

	)

175 
	#IPV6_RTHDR
 57

	)

176 
	#IPV6_RECVDSTOPTS
 58

	)

177 
	#IPV6_DSTOPTS
 59

	)

179 
	#IPV6_RECVTCLASS
 66

	)

180 
	#IPV6_TCLASS
 67

	)

183 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

184 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

185 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

186 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

189 
	#IPV6_PMTUDISC_DONT
 0

	)

190 
	#IPV6_PMTUDISC_WANT
 1

	)

191 
	#IPV6_PMTUDISC_DO
 2

	)

192 
	#IPV6_PMTUDISC_PROBE
 3

	)

195 
	#SOL_IPV6
 41

	)

196 
	#SOL_ICMPV6
 58

	)

199 
	#IPV6_RTHDR_LOOSE
 0

	)

200 
	#IPV6_RTHDR_STRICT
 1

	)

202 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_BSD


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_BSD


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 c⁄° 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_VSOCK
 40

	)

83 
	#PF_MAX
 41

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DEC√t
 
PF_DEC√t


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_VSOCK
 
PF_VSOCK


	)

128 
	#AF_MAX
 
PF_MAX


	)

134 
	#SOL_RAW
 255

	)

135 
	#SOL_DECNET
 261

	)

136 
	#SOL_X25
 262

	)

137 
	#SOL_PACKET
 263

	)

138 
	#SOL_ATM
 264

	)

139 
	#SOL_AAL
 265

	)

140 
	#SOL_IRDA
 266

	)

143 
	#SOMAXCONN
 128

	)

146 
	~<bôs/sockaddr.h
>

149 
	ssockaddr


151 
__SOCKADDR_COMMON
 (
ß_
);

152 
	mß_d©a
[14];

158 
	#__ss_Æig¡y≥
 

	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000,

209 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_WAITFORONE
 = 0x10000,

211 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_FASTOPEN
 = 0x20000000,

213 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

215 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

218 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

224 
	smsghdr


226 *
	mmsg_«me
;

227 
sockÀn_t
 
	mmsg_«mñí
;

229 
iovec
 *
	mmsg_iov
;

230 
size_t
 
	mmsg_iovÀn
;

232 *
	mmsg_c⁄åﬁ
;

233 
size_t
 
	mmsg_c⁄åﬁÀn
;

238 
	mmsg_Êags
;

242 
	scmsghdr


244 
size_t
 
	mcmsg_Àn
;

249 
	mcmsg_Àvñ
;

250 
	mcmsg_ty≥
;

251 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

252 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

257 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

258 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

260 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

262 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

263 
	#CMSG_FIRSTHDR
(
mhdr
) \

264 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

265 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

266 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

267 & (
size_t
Ë~( (size_tË- 1))

	)

268 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

269 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

270 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

272 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

273 
cmsghdr
 *
__cmsg
Ë
__THROW
;

274 #ifde‡
__USE_EXTERN_INLINES


275 #i‚de‡
_EXTERN_INLINE


276 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

278 
_EXTERN_INLINE
 
cmsghdr
 *

279 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

281 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

283  (
cmsghdr
 *) 0;

285 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

286 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

287 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


288 + 
__mhdr
->
msg_c⁄åﬁÀn
)

289 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

290 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

292  (
cmsghdr
 *) 0;

293  
__cmsg
;

294 
	}
}

301 
	mSCM_RIGHTS
 = 0x01

302 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

303 #ifde‡
__USE_GNU


304 , 
	mSCM_CREDENTIALS
 = 0x02

305 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

309 #ifde‡
__USE_GNU


311 
	su¸ed


313 
pid_t
 
	mpid
;

314 
uid_t
 
	muid
;

315 
gid_t
 
	mgid
;

320 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


321 #i‚de‡
FIOGETOWN


322 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

324 #i‚de‡
FIOSETOWN


325 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

327 #i‚de‡
SIOCATMARK


328 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

330 #i‚de‡
SIOCGPGRP


331 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

333 #i‚de‡
SIOCGSTAMP


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

336 #i‚de‡
SIOCGSTAMPNS


337 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

339 #i‚de‡
SIOCSPGRP


340 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

345 
	~<asm/sockë.h
>

347 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


348 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


349 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


350 #unde‡
FIOGETOWN


352 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


354 #unde‡
FIOSETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


357 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


358 #unde‡
SIOCATMARK


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


361 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #unde‡
SIOCGPGRP


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #unde‡
SIOCGSTAMP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #unde‡
SIOCGSTAMPNS


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


373 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #unde‡
SIOCSPGRP


379 
	slögî


381 
	ml_⁄off
;

382 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

13 
	#SYS_ac˘
 
__NR_ac˘


	)

14 
	#SYS_add_key
 
__NR_add_key


	)

15 
	#SYS_adjtimex
 
__NR_adjtimex


	)

16 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

17 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

18 
	#SYS_bdÊush
 
__NR_bdÊush


	)

19 
	#SYS_bªak
 
__NR_bªak


	)

20 
	#SYS_brk
 
__NR_brk


	)

21 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

22 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

23 
	#SYS_chdú
 
__NR_chdú


	)

24 
	#SYS_chmod
 
__NR_chmod


	)

25 
	#SYS_chown
 
__NR_chown


	)

26 
	#SYS_chown32
 
__NR_chown32


	)

27 
	#SYS_chroŸ
 
__NR_chroŸ


	)

28 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

29 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

30 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

31 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

32 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

33 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

34 
	#SYS_˛o£
 
__NR_˛o£


	)

35 
	#SYS_¸ót
 
__NR_¸ót


	)

36 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

37 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

38 
	#SYS_dup
 
__NR_dup


	)

39 
	#SYS_dup2
 
__NR_dup2


	)

40 
	#SYS_dup3
 
__NR_dup3


	)

41 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

42 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

43 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

44 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

45 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

46 
	#SYS_evítfd
 
__NR_evítfd


	)

47 
	#SYS_evítfd2
 
__NR_evítfd2


	)

48 
	#SYS_execve
 
__NR_execve


	)

49 
	#SYS_exô
 
__NR_exô


	)

50 
	#SYS_exô_group
 
__NR_exô_group


	)

51 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

52 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

53 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

54 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

55 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

56 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

57 
	#SYS_fchdú
 
__NR_fchdú


	)

58 
	#SYS_fchmod
 
__NR_fchmod


	)

59 
	#SYS_fchmod©
 
__NR_fchmod©


	)

60 
	#SYS_fchown
 
__NR_fchown


	)

61 
	#SYS_fchown32
 
__NR_fchown32


	)

62 
	#SYS_fchow«t
 
__NR_fchow«t


	)

63 
	#SYS_f˙é
 
__NR_f˙é


	)

64 
	#SYS_f˙é64
 
__NR_f˙é64


	)

65 
	#SYS_fd©async
 
__NR_fd©async


	)

66 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

67 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kcmp
 
__NR_kcmp


	)

138 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

139 
	#SYS_key˘l
 
__NR_key˘l


	)

140 
	#SYS_kûl
 
__NR_kûl


	)

141 
	#SYS_lchown
 
__NR_lchown


	)

142 
	#SYS_lchown32
 
__NR_lchown32


	)

143 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

144 
	#SYS_lök
 
__NR_lök


	)

145 
	#SYS_lök©
 
__NR_lök©


	)

146 
	#SYS_li°x©å
 
__NR_li°x©å


	)

147 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

148 
	#SYS_lock
 
__NR_lock


	)

149 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

150 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

151 
	#SYS_l£ek
 
__NR_l£ek


	)

152 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

153 
	#SYS_l°©
 
__NR_l°©


	)

154 
	#SYS_l°©64
 
__NR_l°©64


	)

155 
	#SYS_madvi£
 
__NR_madvi£


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

231 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

232 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

233 
	#SYS_rmdú
 
__NR_rmdú


	)

234 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

235 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

236 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

237 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

238 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

239 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

240 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

241 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

242 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

243 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

244 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

245 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

246 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

247 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

248 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

249 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

250 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

251 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

252 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

253 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

254 
	#SYS_£ccomp
 
__NR_£ccomp


	)

255 
	#SYS_£À˘
 
__NR_£À˘


	)

256 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

257 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

258 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

259 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

260 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

261 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

262 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

263 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

264 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

265 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

266 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

267 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

268 
	#SYS_£tgid
 
__NR_£tgid


	)

269 
	#SYS_£tgid32
 
__NR_£tgid32


	)

270 
	#SYS_£tgroups
 
__NR_£tgroups


	)

271 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

272 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

273 
	#SYS_£tôimî
 
__NR_£tôimî


	)

274 
	#SYS_£äs
 
__NR_£äs


	)

275 
	#SYS_£çgid
 
__NR_£çgid


	)

276 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

277 
	#SYS_£åegid
 
__NR_£åegid


	)

278 
	#SYS_£åegid32
 
__NR_£åegid32


	)

279 
	#SYS_£åesgid
 
__NR_£åesgid


	)

280 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

281 
	#SYS_£åesuid
 
__NR_£åesuid


	)

282 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

283 
	#SYS_£åeuid
 
__NR_£åeuid


	)

284 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

285 
	#SYS_£ålimô
 
__NR_£ålimô


	)

286 
	#SYS_£tsid
 
__NR_£tsid


	)

287 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

288 
	#SYS_£tuid
 
__NR_£tuid


	)

289 
	#SYS_£tuid32
 
__NR_£tuid32


	)

290 
	#SYS_£tx©å
 
__NR_£tx©å


	)

291 
	#SYS_sgëmask
 
__NR_sgëmask


	)

292 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

293 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

294 
	#SYS_sig«l
 
__NR_sig«l


	)

295 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

296 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

297 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

298 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

299 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

300 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

301 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

302 
	#SYS_•li˚
 
__NR_•li˚


	)

303 
	#SYS_s£tmask
 
__NR_s£tmask


	)

304 
	#SYS_°©
 
__NR_°©


	)

305 
	#SYS_°©64
 
__NR_°©64


	)

306 
	#SYS_°©fs
 
__NR_°©fs


	)

307 
	#SYS_°©fs64
 
__NR_°©fs64


	)

308 
	#SYS_°ime
 
__NR_°ime


	)

309 
	#SYS_°ty
 
__NR_°ty


	)

310 
	#SYS_sw≠off
 
__NR_sw≠off


	)

311 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

312 
	#SYS_symlök
 
__NR_symlök


	)

313 
	#SYS_symlök©
 
__NR_symlök©


	)

314 
	#SYS_sync
 
__NR_sync


	)

315 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

316 
	#SYS_syncfs
 
__NR_syncfs


	)

317 
	#SYS_sysfs
 
__NR_sysfs


	)

318 
	#SYS_sysöfo
 
__NR_sysöfo


	)

319 
	#SYS_sy¶og
 
__NR_sy¶og


	)

320 
	#SYS_ãe
 
__NR_ãe


	)

321 
	#SYS_tgkûl
 
__NR_tgkûl


	)

322 
	#SYS_time
 
__NR_time


	)

323 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

324 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

325 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

326 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

327 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

328 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

329 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

330 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

331 
	#SYS_times
 
__NR_times


	)

332 
	#SYS_tkûl
 
__NR_tkûl


	)

333 
	#SYS_åunˇã
 
__NR_åunˇã


	)

334 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

335 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

336 
	#SYS_ulimô
 
__NR_ulimô


	)

337 
	#SYS_umask
 
__NR_umask


	)

338 
	#SYS_umou¡
 
__NR_umou¡


	)

339 
	#SYS_umou¡2
 
__NR_umou¡2


	)

340 
	#SYS_u«me
 
__NR_u«me


	)

341 
	#SYS_u∆ök
 
__NR_u∆ök


	)

342 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

343 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

344 
	#SYS_u£lib
 
__NR_u£lib


	)

345 
	#SYS_u°©
 
__NR_u°©


	)

346 
	#SYS_utime
 
__NR_utime


	)

347 
	#SYS_utimíßt
 
__NR_utimíßt


	)

348 
	#SYS_utimes
 
__NR_utimes


	)

349 
	#SYS_vf‹k
 
__NR_vf‹k


	)

350 
	#SYS_vh™gup
 
__NR_vh™gup


	)

351 
	#SYS_vm86
 
__NR_vm86


	)

352 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

353 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

354 
	#SYS_v£rvî
 
__NR_v£rvî


	)

355 
	#SYS_waô4
 
__NR_waô4


	)

356 
	#SYS_waôid
 
__NR_waôid


	)

357 
	#SYS_waôpid
 
__NR_waôpid


	)

358 
	#SYS_wrôe
 
__NR_wrôe


	)

359 
	#SYS_wrôev
 
__NR_wrôev


	)

361 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


362 
	#SYS__sys˘l
 
__NR__sys˘l


	)

363 
	#SYS_ac˚±
 
__NR_ac˚±


	)

364 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

365 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

366 
	#SYS_ac˘
 
__NR_ac˘


	)

367 
	#SYS_add_key
 
__NR_add_key


	)

368 
	#SYS_adjtimex
 
__NR_adjtimex


	)

369 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

370 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

371 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

372 
	#SYS_böd
 
__NR_böd


	)

373 
	#SYS_brk
 
__NR_brk


	)

374 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

375 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

376 
	#SYS_chdú
 
__NR_chdú


	)

377 
	#SYS_chmod
 
__NR_chmod


	)

378 
	#SYS_chown
 
__NR_chown


	)

379 
	#SYS_chroŸ
 
__NR_chroŸ


	)

380 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

381 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

382 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

383 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

384 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

385 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

386 
	#SYS_˛o£
 
__NR_˛o£


	)

387 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

388 
	#SYS_¸ót
 
__NR_¸ót


	)

389 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

390 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

391 
	#SYS_dup
 
__NR_dup


	)

392 
	#SYS_dup2
 
__NR_dup2


	)

393 
	#SYS_dup3
 
__NR_dup3


	)

394 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

395 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

396 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

397 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

398 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

399 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

400 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

401 
	#SYS_evítfd
 
__NR_evítfd


	)

402 
	#SYS_evítfd2
 
__NR_evítfd2


	)

403 
	#SYS_execve
 
__NR_execve


	)

404 
	#SYS_exô
 
__NR_exô


	)

405 
	#SYS_exô_group
 
__NR_exô_group


	)

406 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

407 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

408 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

409 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

410 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

411 
	#SYS_fchdú
 
__NR_fchdú


	)

412 
	#SYS_fchmod
 
__NR_fchmod


	)

413 
	#SYS_fchmod©
 
__NR_fchmod©


	)

414 
	#SYS_fchown
 
__NR_fchown


	)

415 
	#SYS_fchow«t
 
__NR_fchow«t


	)

416 
	#SYS_f˙é
 
__NR_f˙é


	)

417 
	#SYS_fd©async
 
__NR_fd©async


	)

418 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

419 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

420 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

421 
	#SYS_Êock
 
__NR_Êock


	)

422 
	#SYS_f‹k
 
__NR_f‹k


	)

423 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

424 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

425 
	#SYS_f°©
 
__NR_f°©


	)

426 
	#SYS_f°©fs
 
__NR_f°©fs


	)

427 
	#SYS_fsync
 
__NR_fsync


	)

428 
	#SYS_·runˇã
 
__NR_·runˇã


	)

429 
	#SYS_fuãx
 
__NR_fuãx


	)

430 
	#SYS_futimeßt
 
__NR_futimeßt


	)

431 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

432 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

433 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

434 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

435 
	#SYS_gë˝u
 
__NR_gë˝u


	)

436 
	#SYS_gëcwd
 
__NR_gëcwd


	)

437 
	#SYS_gëdíts
 
__NR_gëdíts


	)

438 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

439 
	#SYS_gëegid
 
__NR_gëegid


	)

440 
	#SYS_gëeuid
 
__NR_gëeuid


	)

441 
	#SYS_gëgid
 
__NR_gëgid


	)

442 
	#SYS_gëgroups
 
__NR_gëgroups


	)

443 
	#SYS_gëôimî
 
__NR_gëôimî


	)

444 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

445 
	#SYS_gëpgid
 
__NR_gëpgid


	)

446 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

447 
	#SYS_gëpid
 
__NR_gëpid


	)

448 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

449 
	#SYS_gëµid
 
__NR_gëµid


	)

450 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

451 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

452 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

453 
	#SYS_gëæimô
 
__NR_gëæimô


	)

454 
	#SYS_gërußge
 
__NR_gërußge


	)

455 
	#SYS_gësid
 
__NR_gësid


	)

456 
	#SYS_gësock«me
 
__NR_gësock«me


	)

457 
	#SYS_gësock›t
 
__NR_gësock›t


	)

458 
	#SYS_gëtid
 
__NR_gëtid


	)

459 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

460 
	#SYS_gëuid
 
__NR_gëuid


	)

461 
	#SYS_gëx©å
 
__NR_gëx©å


	)

462 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

463 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

464 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

465 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

466 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

467 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

468 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

469 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

470 
	#SYS_io_£tup
 
__NR_io_£tup


	)

471 
	#SYS_io_submô
 
__NR_io_submô


	)

472 
	#SYS_io˘l
 
__NR_io˘l


	)

473 
	#SYS_i›îm
 
__NR_i›îm


	)

474 
	#SYS_i›l
 
__NR_i›l


	)

475 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

476 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

477 
	#SYS_kcmp
 
__NR_kcmp


	)

478 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

479 
	#SYS_key˘l
 
__NR_key˘l


	)

480 
	#SYS_kûl
 
__NR_kûl


	)

481 
	#SYS_lchown
 
__NR_lchown


	)

482 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

483 
	#SYS_lök
 
__NR_lök


	)

484 
	#SYS_lök©
 
__NR_lök©


	)

485 
	#SYS_li°í
 
__NR_li°í


	)

486 
	#SYS_li°x©å
 
__NR_li°x©å


	)

487 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

488 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

489 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

490 
	#SYS_l£ek
 
__NR_l£ek


	)

491 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

492 
	#SYS_l°©
 
__NR_l°©


	)

493 
	#SYS_madvi£
 
__NR_madvi£


	)

494 
	#SYS_mböd
 
__NR_mböd


	)

495 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

496 
	#SYS_möc‹e
 
__NR_möc‹e


	)

497 
	#SYS_mkdú
 
__NR_mkdú


	)

498 
	#SYS_mkdú©
 
__NR_mkdú©


	)

499 
	#SYS_mknod
 
__NR_mknod


	)

500 
	#SYS_mknod©
 
__NR_mknod©


	)

501 
	#SYS_mlock
 
__NR_mlock


	)

502 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

503 
	#SYS_mm≠
 
__NR_mm≠


	)

504 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

505 
	#SYS_mou¡
 
__NR_mou¡


	)

506 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

507 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

508 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

509 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

510 
	#SYS_mq_›í
 
__NR_mq_›í


	)

511 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

512 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

513 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

514 
	#SYS_mªm≠
 
__NR_mªm≠


	)

515 
	#SYS_msg˘l
 
__NR_msg˘l


	)

516 
	#SYS_msggë
 
__NR_msggë


	)

517 
	#SYS_msgrcv
 
__NR_msgrcv


	)

518 
	#SYS_msg¢d
 
__NR_msg¢d


	)

519 
	#SYS_msync
 
__NR_msync


	)

520 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

521 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

522 
	#SYS_munm≠
 
__NR_munm≠


	)

523 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

524 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

525 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

526 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

527 
	#SYS_›í
 
__NR_›í


	)

528 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

529 
	#SYS_›í©
 
__NR_›í©


	)

530 
	#SYS_∑u£
 
__NR_∑u£


	)

531 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

532 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

533 
	#SYS_pùe
 
__NR_pùe


	)

534 
	#SYS_pùe2
 
__NR_pùe2


	)

535 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

536 
	#SYS_pﬁl
 
__NR_pﬁl


	)

537 
	#SYS_µﬁl
 
__NR_µﬁl


	)

538 
	#SYS_¥˘l
 
__NR_¥˘l


	)

539 
	#SYS_¥ód64
 
__NR_¥ód64


	)

540 
	#SYS_¥ódv
 
__NR_¥ódv


	)

541 
	#SYS_¥limô64
 
__NR_¥limô64


	)

542 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

543 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

544 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

545 
	#SYS_±ø˚
 
__NR_±ø˚


	)

546 
	#SYS_puçmsg
 
__NR_puçmsg


	)

547 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

548 
	#SYS_pwrôev
 
__NR_pwrôev


	)

549 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

550 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

551 
	#SYS_ªad
 
__NR_ªad


	)

552 
	#SYS_ªadahód
 
__NR_ªadahód


	)

553 
	#SYS_ªadlök
 
__NR_ªadlök


	)

554 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

555 
	#SYS_ªadv
 
__NR_ªadv


	)

556 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

557 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

558 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

559 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

560 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

561 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

562 
	#SYS_ª«me
 
__NR_ª«me


	)

563 
	#SYS_ª«mót
 
__NR_ª«mót


	)

564 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

565 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

566 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

567 
	#SYS_rmdú
 
__NR_rmdú


	)

568 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

569 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

570 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

571 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

572 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

573 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

574 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

575 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

576 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

577 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

578 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

579 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

580 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

581 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

582 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

583 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

584 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

585 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

586 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

587 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

588 
	#SYS_£ccomp
 
__NR_£ccomp


	)

589 
	#SYS_£curôy
 
__NR_£curôy


	)

590 
	#SYS_£À˘
 
__NR_£À˘


	)

591 
	#SYS_£m˘l
 
__NR_£m˘l


	)

592 
	#SYS_£mgë
 
__NR_£mgë


	)

593 
	#SYS_£m›
 
__NR_£m›


	)

594 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

595 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

596 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

597 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

598 
	#SYS_£ndto
 
__NR_£ndto


	)

599 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

600 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

601 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

602 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

603 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

604 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

605 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

606 
	#SYS_£tgid
 
__NR_£tgid


	)

607 
	#SYS_£tgroups
 
__NR_£tgroups


	)

608 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

609 
	#SYS_£tôimî
 
__NR_£tôimî


	)

610 
	#SYS_£äs
 
__NR_£äs


	)

611 
	#SYS_£çgid
 
__NR_£çgid


	)

612 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

613 
	#SYS_£åegid
 
__NR_£åegid


	)

614 
	#SYS_£åesgid
 
__NR_£åesgid


	)

615 
	#SYS_£åesuid
 
__NR_£åesuid


	)

616 
	#SYS_£åeuid
 
__NR_£åeuid


	)

617 
	#SYS_£ålimô
 
__NR_£ålimô


	)

618 
	#SYS_£tsid
 
__NR_£tsid


	)

619 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

620 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

621 
	#SYS_£tuid
 
__NR_£tuid


	)

622 
	#SYS_£tx©å
 
__NR_£tx©å


	)

623 
	#SYS_shm©
 
__NR_shm©


	)

624 
	#SYS_shm˘l
 
__NR_shm˘l


	)

625 
	#SYS_shmdt
 
__NR_shmdt


	)

626 
	#SYS_shmgë
 
__NR_shmgë


	)

627 
	#SYS_shutdown
 
__NR_shutdown


	)

628 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

629 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

630 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

631 
	#SYS_sockë
 
__NR_sockë


	)

632 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

633 
	#SYS_•li˚
 
__NR_•li˚


	)

634 
	#SYS_°©
 
__NR_°©


	)

635 
	#SYS_°©fs
 
__NR_°©fs


	)

636 
	#SYS_sw≠off
 
__NR_sw≠off


	)

637 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

638 
	#SYS_symlök
 
__NR_symlök


	)

639 
	#SYS_symlök©
 
__NR_symlök©


	)

640 
	#SYS_sync
 
__NR_sync


	)

641 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

642 
	#SYS_syncfs
 
__NR_syncfs


	)

643 
	#SYS_sysfs
 
__NR_sysfs


	)

644 
	#SYS_sysöfo
 
__NR_sysöfo


	)

645 
	#SYS_sy¶og
 
__NR_sy¶og


	)

646 
	#SYS_ãe
 
__NR_ãe


	)

647 
	#SYS_tgkûl
 
__NR_tgkûl


	)

648 
	#SYS_time
 
__NR_time


	)

649 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

650 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

651 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

652 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

653 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

654 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

655 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

656 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

657 
	#SYS_times
 
__NR_times


	)

658 
	#SYS_tkûl
 
__NR_tkûl


	)

659 
	#SYS_åunˇã
 
__NR_åunˇã


	)

660 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

661 
	#SYS_umask
 
__NR_umask


	)

662 
	#SYS_umou¡2
 
__NR_umou¡2


	)

663 
	#SYS_u«me
 
__NR_u«me


	)

664 
	#SYS_u∆ök
 
__NR_u∆ök


	)

665 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

666 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

667 
	#SYS_u£lib
 
__NR_u£lib


	)

668 
	#SYS_u°©
 
__NR_u°©


	)

669 
	#SYS_utime
 
__NR_utime


	)

670 
	#SYS_utimíßt
 
__NR_utimíßt


	)

671 
	#SYS_utimes
 
__NR_utimes


	)

672 
	#SYS_vf‹k
 
__NR_vf‹k


	)

673 
	#SYS_vh™gup
 
__NR_vh™gup


	)

674 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

675 
	#SYS_v£rvî
 
__NR_v£rvî


	)

676 
	#SYS_waô4
 
__NR_waô4


	)

677 
	#SYS_waôid
 
__NR_waôid


	)

678 
	#SYS_wrôe
 
__NR_wrôe


	)

679 
	#SYS_wrôev
 
__NR_wrôev


	)

681 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


682 
	#SYS_ac˚±
 
__NR_ac˚±


	)

683 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

684 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

685 
	#SYS_ac˘
 
__NR_ac˘


	)

686 
	#SYS_add_key
 
__NR_add_key


	)

687 
	#SYS_adjtimex
 
__NR_adjtimex


	)

688 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

689 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

690 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

691 
	#SYS_böd
 
__NR_böd


	)

692 
	#SYS_brk
 
__NR_brk


	)

693 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

694 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

695 
	#SYS_chdú
 
__NR_chdú


	)

696 
	#SYS_chmod
 
__NR_chmod


	)

697 
	#SYS_chown
 
__NR_chown


	)

698 
	#SYS_chroŸ
 
__NR_chroŸ


	)

699 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

700 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

701 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

702 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

703 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

704 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

705 
	#SYS_˛o£
 
__NR_˛o£


	)

706 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

707 
	#SYS_¸ót
 
__NR_¸ót


	)

708 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

709 
	#SYS_dup
 
__NR_dup


	)

710 
	#SYS_dup2
 
__NR_dup2


	)

711 
	#SYS_dup3
 
__NR_dup3


	)

712 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

713 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

714 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

715 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

716 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

717 
	#SYS_evítfd
 
__NR_evítfd


	)

718 
	#SYS_evítfd2
 
__NR_evítfd2


	)

719 
	#SYS_execve
 
__NR_execve


	)

720 
	#SYS_exô
 
__NR_exô


	)

721 
	#SYS_exô_group
 
__NR_exô_group


	)

722 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

723 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

724 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

725 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

726 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

727 
	#SYS_fchdú
 
__NR_fchdú


	)

728 
	#SYS_fchmod
 
__NR_fchmod


	)

729 
	#SYS_fchmod©
 
__NR_fchmod©


	)

730 
	#SYS_fchown
 
__NR_fchown


	)

731 
	#SYS_fchow«t
 
__NR_fchow«t


	)

732 
	#SYS_f˙é
 
__NR_f˙é


	)

733 
	#SYS_fd©async
 
__NR_fd©async


	)

734 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

735 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

736 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

737 
	#SYS_Êock
 
__NR_Êock


	)

738 
	#SYS_f‹k
 
__NR_f‹k


	)

739 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

740 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

741 
	#SYS_f°©
 
__NR_f°©


	)

742 
	#SYS_f°©fs
 
__NR_f°©fs


	)

743 
	#SYS_fsync
 
__NR_fsync


	)

744 
	#SYS_·runˇã
 
__NR_·runˇã


	)

745 
	#SYS_fuãx
 
__NR_fuãx


	)

746 
	#SYS_futimeßt
 
__NR_futimeßt


	)

747 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

748 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

749 
	#SYS_gë˝u
 
__NR_gë˝u


	)

750 
	#SYS_gëcwd
 
__NR_gëcwd


	)

751 
	#SYS_gëdíts
 
__NR_gëdíts


	)

752 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

753 
	#SYS_gëegid
 
__NR_gëegid


	)

754 
	#SYS_gëeuid
 
__NR_gëeuid


	)

755 
	#SYS_gëgid
 
__NR_gëgid


	)

756 
	#SYS_gëgroups
 
__NR_gëgroups


	)

757 
	#SYS_gëôimî
 
__NR_gëôimî


	)

758 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

759 
	#SYS_gëpgid
 
__NR_gëpgid


	)

760 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

761 
	#SYS_gëpid
 
__NR_gëpid


	)

762 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

763 
	#SYS_gëµid
 
__NR_gëµid


	)

764 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

765 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

766 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

767 
	#SYS_gëæimô
 
__NR_gëæimô


	)

768 
	#SYS_gërußge
 
__NR_gërußge


	)

769 
	#SYS_gësid
 
__NR_gësid


	)

770 
	#SYS_gësock«me
 
__NR_gësock«me


	)

771 
	#SYS_gësock›t
 
__NR_gësock›t


	)

772 
	#SYS_gëtid
 
__NR_gëtid


	)

773 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

774 
	#SYS_gëuid
 
__NR_gëuid


	)

775 
	#SYS_gëx©å
 
__NR_gëx©å


	)

776 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

777 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

778 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

779 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

780 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

781 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

782 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

783 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

784 
	#SYS_io_£tup
 
__NR_io_£tup


	)

785 
	#SYS_io_submô
 
__NR_io_submô


	)

786 
	#SYS_io˘l
 
__NR_io˘l


	)

787 
	#SYS_i›îm
 
__NR_i›îm


	)

788 
	#SYS_i›l
 
__NR_i›l


	)

789 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

790 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

791 
	#SYS_kcmp
 
__NR_kcmp


	)

792 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

793 
	#SYS_key˘l
 
__NR_key˘l


	)

794 
	#SYS_kûl
 
__NR_kûl


	)

795 
	#SYS_lchown
 
__NR_lchown


	)

796 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

797 
	#SYS_lök
 
__NR_lök


	)

798 
	#SYS_lök©
 
__NR_lök©


	)

799 
	#SYS_li°í
 
__NR_li°í


	)

800 
	#SYS_li°x©å
 
__NR_li°x©å


	)

801 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

802 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

803 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

804 
	#SYS_l£ek
 
__NR_l£ek


	)

805 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

806 
	#SYS_l°©
 
__NR_l°©


	)

807 
	#SYS_madvi£
 
__NR_madvi£


	)

808 
	#SYS_mböd
 
__NR_mböd


	)

809 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

810 
	#SYS_möc‹e
 
__NR_möc‹e


	)

811 
	#SYS_mkdú
 
__NR_mkdú


	)

812 
	#SYS_mkdú©
 
__NR_mkdú©


	)

813 
	#SYS_mknod
 
__NR_mknod


	)

814 
	#SYS_mknod©
 
__NR_mknod©


	)

815 
	#SYS_mlock
 
__NR_mlock


	)

816 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

817 
	#SYS_mm≠
 
__NR_mm≠


	)

818 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

819 
	#SYS_mou¡
 
__NR_mou¡


	)

820 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

821 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

822 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

823 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

824 
	#SYS_mq_›í
 
__NR_mq_›í


	)

825 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

826 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

827 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

828 
	#SYS_mªm≠
 
__NR_mªm≠


	)

829 
	#SYS_msg˘l
 
__NR_msg˘l


	)

830 
	#SYS_msggë
 
__NR_msggë


	)

831 
	#SYS_msgrcv
 
__NR_msgrcv


	)

832 
	#SYS_msg¢d
 
__NR_msg¢d


	)

833 
	#SYS_msync
 
__NR_msync


	)

834 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

835 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

836 
	#SYS_munm≠
 
__NR_munm≠


	)

837 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

838 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

839 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

840 
	#SYS_›í
 
__NR_›í


	)

841 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

842 
	#SYS_›í©
 
__NR_›í©


	)

843 
	#SYS_∑u£
 
__NR_∑u£


	)

844 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

845 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

846 
	#SYS_pùe
 
__NR_pùe


	)

847 
	#SYS_pùe2
 
__NR_pùe2


	)

848 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

849 
	#SYS_pﬁl
 
__NR_pﬁl


	)

850 
	#SYS_µﬁl
 
__NR_µﬁl


	)

851 
	#SYS_¥˘l
 
__NR_¥˘l


	)

852 
	#SYS_¥ód64
 
__NR_¥ód64


	)

853 
	#SYS_¥ódv
 
__NR_¥ódv


	)

854 
	#SYS_¥limô64
 
__NR_¥limô64


	)

855 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

856 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

857 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

858 
	#SYS_±ø˚
 
__NR_±ø˚


	)

859 
	#SYS_puçmsg
 
__NR_puçmsg


	)

860 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

861 
	#SYS_pwrôev
 
__NR_pwrôev


	)

862 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

863 
	#SYS_ªad
 
__NR_ªad


	)

864 
	#SYS_ªadahód
 
__NR_ªadahód


	)

865 
	#SYS_ªadlök
 
__NR_ªadlök


	)

866 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

867 
	#SYS_ªadv
 
__NR_ªadv


	)

868 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

869 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

870 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

871 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

872 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

873 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

874 
	#SYS_ª«me
 
__NR_ª«me


	)

875 
	#SYS_ª«mót
 
__NR_ª«mót


	)

876 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

877 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

878 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

879 
	#SYS_rmdú
 
__NR_rmdú


	)

880 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

881 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

882 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

883 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

884 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

885 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

886 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

887 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

888 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

889 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

890 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

891 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

892 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

893 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

894 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

895 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

896 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

897 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

898 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

899 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

900 
	#SYS_£ccomp
 
__NR_£ccomp


	)

901 
	#SYS_£curôy
 
__NR_£curôy


	)

902 
	#SYS_£À˘
 
__NR_£À˘


	)

903 
	#SYS_£m˘l
 
__NR_£m˘l


	)

904 
	#SYS_£mgë
 
__NR_£mgë


	)

905 
	#SYS_£m›
 
__NR_£m›


	)

906 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

907 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

908 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

909 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

910 
	#SYS_£ndto
 
__NR_£ndto


	)

911 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

912 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

913 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

914 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

915 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

916 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

917 
	#SYS_£tgid
 
__NR_£tgid


	)

918 
	#SYS_£tgroups
 
__NR_£tgroups


	)

919 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

920 
	#SYS_£tôimî
 
__NR_£tôimî


	)

921 
	#SYS_£äs
 
__NR_£äs


	)

922 
	#SYS_£çgid
 
__NR_£çgid


	)

923 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

924 
	#SYS_£åegid
 
__NR_£åegid


	)

925 
	#SYS_£åesgid
 
__NR_£åesgid


	)

926 
	#SYS_£åesuid
 
__NR_£åesuid


	)

927 
	#SYS_£åeuid
 
__NR_£åeuid


	)

928 
	#SYS_£ålimô
 
__NR_£ålimô


	)

929 
	#SYS_£tsid
 
__NR_£tsid


	)

930 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

931 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

932 
	#SYS_£tuid
 
__NR_£tuid


	)

933 
	#SYS_£tx©å
 
__NR_£tx©å


	)

934 
	#SYS_shm©
 
__NR_shm©


	)

935 
	#SYS_shm˘l
 
__NR_shm˘l


	)

936 
	#SYS_shmdt
 
__NR_shmdt


	)

937 
	#SYS_shmgë
 
__NR_shmgë


	)

938 
	#SYS_shutdown
 
__NR_shutdown


	)

939 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

940 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

941 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

942 
	#SYS_sockë
 
__NR_sockë


	)

943 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

944 
	#SYS_•li˚
 
__NR_•li˚


	)

945 
	#SYS_°©
 
__NR_°©


	)

946 
	#SYS_°©fs
 
__NR_°©fs


	)

947 
	#SYS_sw≠off
 
__NR_sw≠off


	)

948 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

949 
	#SYS_symlök
 
__NR_symlök


	)

950 
	#SYS_symlök©
 
__NR_symlök©


	)

951 
	#SYS_sync
 
__NR_sync


	)

952 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

953 
	#SYS_syncfs
 
__NR_syncfs


	)

954 
	#SYS_sysfs
 
__NR_sysfs


	)

955 
	#SYS_sysöfo
 
__NR_sysöfo


	)

956 
	#SYS_sy¶og
 
__NR_sy¶og


	)

957 
	#SYS_ãe
 
__NR_ãe


	)

958 
	#SYS_tgkûl
 
__NR_tgkûl


	)

959 
	#SYS_time
 
__NR_time


	)

960 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

961 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

962 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

963 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

964 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

965 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

966 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

967 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

968 
	#SYS_times
 
__NR_times


	)

969 
	#SYS_tkûl
 
__NR_tkûl


	)

970 
	#SYS_åunˇã
 
__NR_åunˇã


	)

971 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

972 
	#SYS_umask
 
__NR_umask


	)

973 
	#SYS_umou¡2
 
__NR_umou¡2


	)

974 
	#SYS_u«me
 
__NR_u«me


	)

975 
	#SYS_u∆ök
 
__NR_u∆ök


	)

976 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

977 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

978 
	#SYS_u°©
 
__NR_u°©


	)

979 
	#SYS_utime
 
__NR_utime


	)

980 
	#SYS_utimíßt
 
__NR_utimíßt


	)

981 
	#SYS_utimes
 
__NR_utimes


	)

982 
	#SYS_vf‹k
 
__NR_vf‹k


	)

983 
	#SYS_vh™gup
 
__NR_vh™gup


	)

984 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

985 
	#SYS_waô4
 
__NR_waô4


	)

986 
	#SYS_waôid
 
__NR_waôid


	)

987 
	#SYS_wrôe
 
__NR_wrôe


	)

988 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_BSD


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

279 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

280 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

281 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

282 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

283 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

284 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

285 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

286 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

287 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

288 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

289 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

290 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

291 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

292 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

293 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

294 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

295 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

296 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

297 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

298 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

299 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

300 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

301 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

302 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

303 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

304 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

305 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

306 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

307 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

308 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

309 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

310 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@
1
.
1
/usr/include
634
17851
build/install/hostinclude/hostcompat.h
build/install/include/assert.h
build/install/include/err.h
build/install/include/errno.h
build/install/include/fcntl.h
build/install/include/kern/endian.h
build/install/include/kern/errmsg.h
build/install/include/kern/errno.h
build/install/include/kern/fcntl.h
build/install/include/kern/ioctl.h
build/install/include/kern/iovec.h
build/install/include/kern/limits.h
build/install/include/kern/mips/endian.h
build/install/include/kern/mips/regdefs.h
build/install/include/kern/mips/setjmp.h
build/install/include/kern/mips/signal.h
build/install/include/kern/mips/types.h
build/install/include/kern/reboot.h
build/install/include/kern/resource.h
build/install/include/kern/seek.h
build/install/include/kern/sfs.h
build/install/include/kern/signal.h
build/install/include/kern/socket.h
build/install/include/kern/stat.h
build/install/include/kern/stattypes.h
build/install/include/kern/syscall.h
build/install/include/kern/time.h
build/install/include/kern/types.h
build/install/include/kern/unistd.h
build/install/include/kern/wait.h
build/install/include/limits.h
build/install/include/setjmp.h
build/install/include/signal.h
build/install/include/stdarg.h
build/install/include/stdint.h
build/install/include/stdio.h
build/install/include/stdlib.h
build/install/include/string.h
build/install/include/sys/endian.h
build/install/include/sys/ioctl.h
build/install/include/sys/null.h
build/install/include/sys/reboot.h
build/install/include/sys/stat.h
build/install/include/sys/types.h
build/install/include/sys/wait.h
build/install/include/time.h
build/install/include/types/size_t.h
build/install/include/unistd.h
common/gcc-millicode/adddi3.c
common/gcc-millicode/anddi3.c
common/gcc-millicode/ashldi3.c
common/gcc-millicode/ashrdi3.c
common/gcc-millicode/cmpdi2.c
common/gcc-millicode/divdi3.c
common/gcc-millicode/iordi3.c
common/gcc-millicode/longlong.h
common/gcc-millicode/lshldi3.c
common/gcc-millicode/lshrdi3.c
common/gcc-millicode/moddi3.c
common/gcc-millicode/muldi3.c
common/gcc-millicode/negdi2.c
common/gcc-millicode/notdi2.c
common/gcc-millicode/qdivrem.c
common/gcc-millicode/subdi3.c
common/gcc-millicode/ucmpdi2.c
common/gcc-millicode/udivdi3.c
common/gcc-millicode/umoddi3.c
common/gcc-millicode/xordi3.c
common/libc/printf/__printf.c
common/libc/printf/snprintf.c
common/libc/stdlib/atoi.c
common/libc/string/bzero.c
common/libc/string/memcpy.c
common/libc/string/memmove.c
common/libc/string/strcat.c
common/libc/string/strchr.c
common/libc/string/strcmp.c
common/libc/string/strcpy.c
common/libc/string/strlen.c
common/libc/string/strrchr.c
common/libc/string/strtok_r.c
kern/arch/mips/include/current.h
kern/arch/mips/include/elf.h
kern/arch/mips/include/kern/endian.h
kern/arch/mips/include/kern/regdefs.h
kern/arch/mips/include/kern/setjmp.h
kern/arch/mips/include/kern/signal.h
kern/arch/mips/include/kern/types.h
kern/arch/mips/include/specialreg.h
kern/arch/mips/include/spinlock.h
kern/arch/mips/include/thread.h
kern/arch/mips/include/tlb.h
kern/arch/mips/include/trapframe.h
kern/arch/mips/include/types.h
kern/arch/mips/include/vm.h
kern/arch/mips/locore/trap.c
kern/arch/mips/syscall/syscall.c
kern/arch/mips/thread/cpu.c
kern/arch/mips/thread/switchframe.c
kern/arch/mips/thread/switchframe.h
kern/arch/mips/thread/thread_machdep.c
kern/arch/mips/vm/dumbvm.c
kern/arch/mips/vm/ram.c
kern/arch/sys161/dev/lamebus_machdep.c
kern/arch/sys161/include/bus.h
kern/arch/sys161/include/maxcpus.h
kern/compile/ASST0/autoconf.c
kern/compile/ASST0/autoconf.h
kern/compile/ASST0/opt-A0.h
kern/compile/ASST0/opt-A1.h
kern/compile/ASST0/opt-A2.h
kern/compile/ASST0/opt-A3.h
kern/compile/ASST0/opt-A4.h
kern/compile/ASST0/opt-A5.h
kern/compile/ASST0/opt-dumbvm.h
kern/compile/ASST0/opt-net.h
kern/compile/ASST0/opt-netfs.h
kern/compile/ASST0/opt-noasserts.h
kern/compile/ASST0/opt-sfs.h
kern/compile/ASST0/opt-synchprobs.h
kern/compile/ASST0/vers.c
kern/compile/ASST1/autoconf.c
kern/compile/ASST1/autoconf.h
kern/compile/ASST1/opt-A0.h
kern/compile/ASST1/opt-A1.h
kern/compile/ASST1/opt-A2.h
kern/compile/ASST1/opt-A3.h
kern/compile/ASST1/opt-A4.h
kern/compile/ASST1/opt-A5.h
kern/compile/ASST1/opt-dumbvm.h
kern/compile/ASST1/opt-net.h
kern/compile/ASST1/opt-netfs.h
kern/compile/ASST1/opt-noasserts.h
kern/compile/ASST1/opt-sfs.h
kern/compile/ASST1/opt-synchprobs.h
kern/compile/ASST1/vers.c
kern/compile/ASST2/autoconf.c
kern/compile/ASST2/autoconf.h
kern/compile/ASST2/opt-A0.h
kern/compile/ASST2/opt-A1.h
kern/compile/ASST2/opt-A2.h
kern/compile/ASST2/opt-A3.h
kern/compile/ASST2/opt-A4.h
kern/compile/ASST2/opt-A5.h
kern/compile/ASST2/opt-dumbvm.h
kern/compile/ASST2/opt-net.h
kern/compile/ASST2/opt-netfs.h
kern/compile/ASST2/opt-noasserts.h
kern/compile/ASST2/opt-sfs.h
kern/compile/ASST2/opt-synchprobs.h
kern/compile/ASST2/vers.c
kern/compile/ASST3/autoconf.c
kern/compile/ASST3/autoconf.h
kern/compile/ASST3/opt-A0.h
kern/compile/ASST3/opt-A1.h
kern/compile/ASST3/opt-A2.h
kern/compile/ASST3/opt-A3.h
kern/compile/ASST3/opt-A4.h
kern/compile/ASST3/opt-A5.h
kern/compile/ASST3/opt-dumbvm.h
kern/compile/ASST3/opt-net.h
kern/compile/ASST3/opt-netfs.h
kern/compile/ASST3/opt-noasserts.h
kern/compile/ASST3/opt-sfs.h
kern/compile/ASST3/opt-synchprobs.h
kern/compile/ASST3/vers.c
kern/dev/generic/beep.c
kern/dev/generic/beep.h
kern/dev/generic/console.c
kern/dev/generic/console.h
kern/dev/generic/random.c
kern/dev/generic/random.h
kern/dev/generic/rtclock.c
kern/dev/generic/rtclock.h
kern/dev/lamebus/beep_ltimer.c
kern/dev/lamebus/con_lscreen.c
kern/dev/lamebus/con_lser.c
kern/dev/lamebus/emu.c
kern/dev/lamebus/emu.h
kern/dev/lamebus/emu_att.c
kern/dev/lamebus/lamebus.c
kern/dev/lamebus/lamebus.h
kern/dev/lamebus/lhd.c
kern/dev/lamebus/lhd.h
kern/dev/lamebus/lhd_att.c
kern/dev/lamebus/lnet.c
kern/dev/lamebus/lnet_att.c
kern/dev/lamebus/lrandom.c
kern/dev/lamebus/lrandom.h
kern/dev/lamebus/lrandom_att.c
kern/dev/lamebus/lscreen.c
kern/dev/lamebus/lscreen.h
kern/dev/lamebus/lscreen_att.c
kern/dev/lamebus/lser.c
kern/dev/lamebus/lser.h
kern/dev/lamebus/lser_att.c
kern/dev/lamebus/ltimer.c
kern/dev/lamebus/ltimer.h
kern/dev/lamebus/ltimer_att.c
kern/dev/lamebus/ltrace.c
kern/dev/lamebus/ltrace.h
kern/dev/lamebus/ltrace_att.c
kern/dev/lamebus/random_lrandom.c
kern/dev/lamebus/rtclock_ltimer.c
kern/fs/sfs/sfs_fs.c
kern/fs/sfs/sfs_io.c
kern/fs/sfs/sfs_vnode.c
kern/include/addrspace.h
kern/include/array.h
kern/include/bitmap.h
kern/include/cdefs.h
kern/include/clock.h
kern/include/copyinout.h
kern/include/cpu.h
kern/include/current.h
kern/include/device.h
kern/include/elf.h
kern/include/emufs.h
kern/include/endian.h
kern/include/fs.h
kern/include/kern/endian.h
kern/include/kern/errmsg.h
kern/include/kern/errno.h
kern/include/kern/fcntl.h
kern/include/kern/ioctl.h
kern/include/kern/iovec.h
kern/include/kern/limits.h
kern/include/kern/reboot.h
kern/include/kern/resource.h
kern/include/kern/seek.h
kern/include/kern/sfs.h
kern/include/kern/signal.h
kern/include/kern/socket.h
kern/include/kern/stat.h
kern/include/kern/stattypes.h
kern/include/kern/syscall.h
kern/include/kern/time.h
kern/include/kern/types.h
kern/include/kern/unistd.h
kern/include/kern/wait.h
kern/include/lib.h
kern/include/limits.h
kern/include/mainbus.h
kern/include/pid.h
kern/include/proc.h
kern/include/queue.h
kern/include/setjmp.h
kern/include/sfs.h
kern/include/signal.h
kern/include/spinlock.h
kern/include/spl.h
kern/include/stat.h
kern/include/stdarg.h
kern/include/synch.h
kern/include/synchprobs.h
kern/include/syscall.h
kern/include/test.h
kern/include/thread.h
kern/include/threadlist.h
kern/include/threadprivate.h
kern/include/types.h
kern/include/uio.h
kern/include/uw-vmstats.h
kern/include/version.h
kern/include/vfs.h
kern/include/vm.h
kern/include/vnode.h
kern/include/wchan.h
kern/lib/array.c
kern/lib/bitmap.c
kern/lib/bswap.c
kern/lib/kgets.c
kern/lib/kprintf.c
kern/lib/misc.c
kern/lib/queue.c
kern/lib/uio.c
kern/proc/pid.c
kern/proc/proc.c
kern/startup/._menu.c
kern/startup/main.c
kern/startup/menu.c
kern/synchprobs/catmouse.c
kern/synchprobs/catmouse_synch.c
kern/synchprobs/traffic.c
kern/synchprobs/traffic_synch.c
kern/synchprobs/whalemating.c
kern/syscall/file_syscalls.c
kern/syscall/loadelf.c
kern/syscall/proc_syscalls.c
kern/syscall/runprogram.c
kern/syscall/time_syscalls.c
kern/test/arraytest.c
kern/test/bitmaptest.c
kern/test/fstest.c
kern/test/malloctest.c
kern/test/nettest.c
kern/test/synchtest.c
kern/test/threadtest.c
kern/test/tt3.c
kern/test/uw-tests.c
kern/thread/clock.c
kern/thread/spinlock.c
kern/thread/spl.c
kern/thread/synch.c
kern/thread/thread.c
kern/thread/threadlist.c
kern/vfs/device.c
kern/vfs/devnull.c
kern/vfs/vfscwd.c
kern/vfs/vfslist.c
kern/vfs/vfslookup.c
kern/vfs/vfspath.c
kern/vfs/vnode.c
kern/vm/copyinout.c
kern/vm/kmalloc.c
kern/vm/uw-vmstats.c
user/bin/cat/cat.c
user/bin/cp/cp.c
user/bin/false/false.c
user/bin/ln/ln.c
user/bin/ls/ls.c
user/bin/mkdir/mkdir.c
user/bin/mv/mv.c
user/bin/pwd/pwd.c
user/bin/rm/rm.c
user/bin/rmdir/rmdir.c
user/bin/sh/sh.c
user/bin/sync/sync.c
user/bin/true/true.c
user/include/assert.h
user/include/err.h
user/include/errno.h
user/include/fcntl.h
user/include/limits.h
user/include/setjmp.h
user/include/signal.h
user/include/stdarg.h
user/include/stdint.h
user/include/stdio.h
user/include/stdlib.h
user/include/string.h
user/include/sys/endian.h
user/include/sys/ioctl.h
user/include/sys/null.h
user/include/sys/reboot.h
user/include/sys/stat.h
user/include/sys/types.h
user/include/sys/wait.h
user/include/time.h
user/include/types/size_t.h
user/include/unistd.h
user/lib/hostcompat/err.c
user/lib/hostcompat/host-err.h
user/lib/hostcompat/hostcompat.c
user/lib/hostcompat/hostcompat.h
user/lib/hostcompat/time.c
user/lib/libc/stdio/__puts.c
user/lib/libc/stdio/getchar.c
user/lib/libc/stdio/printf.c
user/lib/libc/stdio/putchar.c
user/lib/libc/stdio/puts.c
user/lib/libc/stdlib/abort.c
user/lib/libc/stdlib/exit.c
user/lib/libc/stdlib/malloc.c
user/lib/libc/stdlib/random.c
user/lib/libc/stdlib/system.c
user/lib/libc/string/memcmp.c
user/lib/libc/string/memset.c
user/lib/libc/string/strerror.c
user/lib/libc/string/strtok.c
user/lib/libc/time/time.c
user/lib/libc/unix/__assert.c
user/lib/libc/unix/err.c
user/lib/libc/unix/errno.c
user/lib/libc/unix/getcwd.c
user/my-testbin/example/example.c
user/sbin/dumpsfs/dumpsfs.c
user/sbin/halt/halt.c
user/sbin/mksfs/disk.c
user/sbin/mksfs/disk.h
user/sbin/mksfs/mksfs.c
user/sbin/mksfs/support.c
user/sbin/mksfs/support.h
user/sbin/poweroff/poweroff.c
user/sbin/reboot/reboot.c
user/sbin/sfsck/sfsck.c
user/testbin/add/add.c
user/testbin/argtest/argtest.c
user/testbin/badcall/bad_chdir.c
user/testbin/badcall/bad_close.c
user/testbin/badcall/bad_dup2.c
user/testbin/badcall/bad_execv.c
user/testbin/badcall/bad_fsync.c
user/testbin/badcall/bad_ftruncate.c
user/testbin/badcall/bad_getcwd.c
user/testbin/badcall/bad_getdirentry.c
user/testbin/badcall/bad_ioctl.c
user/testbin/badcall/bad_link.c
user/testbin/badcall/bad_lseek.c
user/testbin/badcall/bad_mkdir.c
user/testbin/badcall/bad_open.c
user/testbin/badcall/bad_pipe.c
user/testbin/badcall/bad_read.c
user/testbin/badcall/bad_readlink.c
user/testbin/badcall/bad_reboot.c
user/testbin/badcall/bad_remove.c
user/testbin/badcall/bad_rename.c
user/testbin/badcall/bad_rmdir.c
user/testbin/badcall/bad_sbrk.c
user/testbin/badcall/bad_stat.c
user/testbin/badcall/bad_symlink.c
user/testbin/badcall/bad_time.c
user/testbin/badcall/bad_waitpid.c
user/testbin/badcall/bad_write.c
user/testbin/badcall/common_buf.c
user/testbin/badcall/common_fds.c
user/testbin/badcall/common_path.c
user/testbin/badcall/config.h
user/testbin/badcall/driver.c
user/testbin/badcall/test.h
user/testbin/bigfile/bigfile.c
user/testbin/conman/conman.c
user/testbin/crash/crash.c
user/testbin/ctest/ctest.c
user/testbin/dirconc/dirconc.c
user/testbin/dirseek/dirseek.c
user/testbin/dirtest/dirtest.c
user/testbin/f_test/f_hdr.h
user/testbin/f_test/f_read.c
user/testbin/f_test/f_test.c
user/testbin/f_test/f_write.c
user/testbin/farm/farm.c
user/testbin/faulter/faulter.c
user/testbin/filetest/filetest.c
user/testbin/forkbomb/forkbomb.c
user/testbin/forktest/forktest.c
user/testbin/guzzle/guzzle.c
user/testbin/hash/hash.c
user/testbin/hog/hog.c
user/testbin/huge/huge.c
user/testbin/kitchen/kitchen.c
user/testbin/malloctest/malloctest.c
user/testbin/matmult/matmult-orig.c
user/testbin/matmult/matmult.c
user/testbin/palin/palin.c
user/testbin/parallelvm/parallelvm.c
user/testbin/psort/psort.c
user/testbin/randcall/calls.c
user/testbin/randcall/extern.h
user/testbin/randcall/main.c
user/testbin/rmdirtest/rmdirtest.c
user/testbin/rmtest/rmtest.c
user/testbin/sink/sink.c
user/testbin/sort/sort.c
user/testbin/sty/sty.c
user/testbin/tail/tail.c
user/testbin/tictac/tictac.c
user/testbin/triplehuge/triple.c
user/testbin/triplehuge/triple.h
user/testbin/triplehuge/triplehuge.c
user/testbin/triplemat/triple.c
user/testbin/triplemat/triple.h
user/testbin/triplemat/triplemat.c
user/testbin/triplesort/triple.c
user/testbin/triplesort/triple.h
user/testbin/triplesort/triplesort.c
user/testbin/userthreads/userthreads.c
user/testbin/zero/zero.c
user/uw-testbin/argtest/argtest.c
user/uw-testbin/argtesttest/argtesttest.c
user/uw-testbin/conc-io/conc-io.c
user/uw-testbin/files1/files1.c
user/uw-testbin/files2/files2.c
user/uw-testbin/hogparty/hogparty.c
user/uw-testbin/lib/testutils.c
user/uw-testbin/lib/testutils.h
user/uw-testbin/onefork/onefork.c
user/uw-testbin/pidcheck/pidcheck.c
user/uw-testbin/romemwrite/romemwrite.c
user/uw-testbin/segments/segments.c
user/uw-testbin/sparse/sparse.c
user/uw-testbin/syscall/syscall.c
user/uw-testbin/tlbfaulter/tlbfaulter.c
user/uw-testbin/vm-crash1/vm-crash1.c
user/uw-testbin/vm-crash2/vm-crash2.c
user/uw-testbin/vm-crash3/vm-crash3.c
user/uw-testbin/vm-data1/vm-data1.c
user/uw-testbin/vm-data2/vm-data2.c
user/uw-testbin/vm-data3/vm-data3.c
user/uw-testbin/vm-funcs/vm-funcs.c
user/uw-testbin/vm-mix1-exec/vm-mix1-exec.c
user/uw-testbin/vm-mix1-fork/vm-mix1-fork.c
user/uw-testbin/vm-mix1/vm-mix1.c
user/uw-testbin/vm-mix2/vm-mix2.c
user/uw-testbin/vm-stack1/vm-stack1.c
user/uw-testbin/vm-stack2/vm-stack2.c
user/uw-testbin/widefork/widefork.c
user/uw-testbin/writeread/writeread.c
user/uw-testbin/xhog/xhog.c
user/uw-testbin/yhog/yhog.c
user/uw-testbin/zhog/zhog.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/netinet/in.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/syscall.h
/usr/include/termios.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/auxv.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/syscall.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syscall.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/uio.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/errno.h
/usr/include/asm/socket.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/libc-lock.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/socket.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/ioctl.h
/usr/include/asm/sockios.h
/usr/include/sched.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/sockios.h
/usr/include/bits/sched.h
